<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-motor-telemetry" kind="group">
    <compoundname>Cpp-motor-telemetry</compoundname>
    <title>Cpp-motor-telemetry</title>
    <innergroup refid="group__cpp-motor-configuration">Cpp-motor-configuration</innergroup>
      <sectiondef kind="user-defined">
      <header>Motor telemetry functions</header>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga77c649e1c8512e880729f18182116bbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double get_actual_velocity</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_actual_velocity</name>
        <reimplementedby refid="group__cpp-motors_1gafd3c1ec0b15a106c72764070e884a243">get_actual_velocity</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gafd3c1ec0b15a106c72764070e884a243">get_actual_velocity</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="329" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga438c6abbee42ff9c8f7e78760a598b72" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; get_actual_velocity_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_actual_velocity_all</name>
        <reimplementedby refid="group__cpp-motors_1gaf53bacb8a5e98fd0e08be4fe816b9c78">get_actual_velocity_all</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gaf53bacb8a5e98fd0e08be4fe816b9c78">get_actual_velocity_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector containing the actual velocity/velocities of the motor(s) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; actual velocity/velocities in RPM or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="341" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gad4f59ac98c0207e4fd2d70781f308c89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_current_draw</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_current_draw</name>
        <reimplementedby refid="group__cpp-motors_1gaf5d053531ffaf773e3658cbc18defaab">get_current_draw</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gaf5d053531ffaf773e3658cbc18defaab">get_current_draw</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the current drawn by the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s current in mA or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="357" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga7bd04f923910b767c00c46ddb9e7a04c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; get_current_draw_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_current_draw_all</name>
        <reimplementedby refid="group__cpp-motors_1gafc9eb0f2728134f647b86b4405fc9dae">get_current_draw_all</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gafc9eb0f2728134f647b86b4405fc9dae">get_current_draw_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector containing the current(s) drawn by the motor(s) in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A vector conatining the motor&apos;s/motors&apos; current(s) in mA or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="371" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga7fedbc5979e60dc4abf68cb43ad7aeb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_direction</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_direction</name>
        <reimplementedby refid="group__cpp-motor-group_1ga313fcc0eff912e3c7a501516a49e54d8">get_direction</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga313fcc0eff912e3c7a501516a49e54d8">get_direction</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the direction of movement for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 for moving in the positive direction, -1 for moving in the negative direction, and PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="387" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga1056fa3bf38bd7c6b7bd43ebfa990999" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; get_direction_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_direction_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga00bd352bb0916ec99c250e4d91f081a3">get_direction_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga00bd352bb0916ec99c250e4d91f081a3">get_direction_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector containing the direction(s) of movement for the motor(s). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A vector containing 1 for moving in the positive direction, -1 for moving in the negative direction, and PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="402" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga30c1f2c5cef4e488faf1df295bf82ad1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double get_efficiency</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_efficiency</name>
        <reimplementedby refid="group__cpp-motor-group_1ga0788cd4278262379f63def687c9621a5">get_efficiency</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga0788cd4278262379f63def687c9621a5">get_efficiency</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the efficiency of the motor in percent. </para>
        </briefdescription>
        <detaileddescription>
<para>An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s efficiency in percent or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="422" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gac29928ead5ce1c1b7feb83354fe25f1f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; get_efficiency_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_efficiency_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gaae62e15d35c375a24533c4add1f8f0c7">get_efficiency_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gaae62e15d35c375a24533c4add1f8f0c7">get_efficiency_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector containing the efficiency/efficiencies of the motor(s) in percent. </para>
        </briefdescription>
        <detaileddescription>
<para>An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.</para>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; efficiency/efficiencies in percent or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="440" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gaa18b24c5db5590ea01b89bcb5eac211c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::uint32_t</type>
        <definition>virtual std::uint32_t get_faults</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_faults</name>
        <reimplementedby refid="group__cpp-motor-group_1gac08a2eb37219772c9dc123fc5ff6cede">get_faults</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gac08a2eb37219772c9dc123fc5ff6cede">get_faults</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the faults experienced by the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_fault_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s faults. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="457" column="23"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga0ce7428e0087f7e1a1c11bcae4ec9020" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::uint32_t &gt;</type>
        <definition>virtual std::vector&lt;std::uint32_t&gt; get_faults_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_faults_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga2e4df2f10200a038351a4406194b57c3">get_faults_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga2e4df2f10200a038351a4406194b57c3">get_faults_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the faults experienced by the motor(s). </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_fault_e_t.</para>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A bitfield containing the motor&apos;s/motors&apos; faults. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="471" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gae86ff2f9e792299f74e168b711f7f7c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::uint32_t</type>
        <definition>virtual std::uint32_t get_flags</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_flags</name>
        <reimplementedby refid="group__cpp-motor-group_1gaf3df6f79f5d52349e8934da9b72ab467">get_flags</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gaf3df6f79f5d52349e8934da9b72ab467">get_flags</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the flags set by the motor&apos;s operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_flag_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s flags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="487" column="23"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gae51d95442747f6a63dc569dd0a302e38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::uint32_t &gt;</type>
        <definition>virtual std::vector&lt;std::uint32_t&gt; get_flags_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_flags_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga1196eb575d750159a41244ad7a5c5158">get_flags_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga1196eb575d750159a41244ad7a5c5158">get_flags_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the flags set by the motor&apos;s/motors&apos; operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_flag_e_t.</para>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A bitfield containing the motor&apos;s/motors&apos; flags. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="502" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga466b41cb785216638b51257d0950cad8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double get_position</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_position</name>
        <reimplementedby refid="group__cpp-motor-group_1ga053a57a839be6a4f0a4bee0840cad6b4">get_position</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga053a57a839be6a4f0a4bee0840cad6b4">get_position</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the absolute position of the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s absolute position in its encoder units or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="518" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga719cdc008b41b3dd7946e3f113c582cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; get_position_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_position_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gaf8d36d6e6c7450dfe5c8c537a90646c5">get_position_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gaf8d36d6e6c7450dfe5c8c537a90646c5">get_position_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector containing the absolute position(s) of the motor(s) in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; absolute position(s) in its encoder units or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="532" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gaa08338d400876e155bb3b88ba9059f68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double get_power</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_power</name>
        <reimplementedby refid="group__cpp-motor-group_1ga1cefda03cd79f93d5ffecc8e338c991b">get_power</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga1cefda03cd79f93d5ffecc8e338c991b">get_power</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the power drawn by the motor in Watts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s power draw in Watts or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="548" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga524b20db8715aa56014a501e7173366c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; get_power_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_power_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga69ee95e7f2d0359f788a7b3badbe754b">get_power_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga69ee95e7f2d0359f788a7b3badbe754b">get_power_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector containing the power(s) drawn by the motor(s) in Watts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; power draw in Watts or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="561" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga4c917fc7e8b3f92a5511923c8d8c9e35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_raw_position</definition>
        <argsstring>(std::uint32_t *const timestamp, const std::uint8_t index=0) const =0</argsstring>
        <name>get_raw_position</name>
        <reimplementedby refid="group__cpp-motor-group_1ga9dc566471016218eb475354297a5ffd8">get_raw_position</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga9dc566471016218eb475354297a5ffd8">get_raw_position</reimplementedby>
        <param>
          <type>std::uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the raw encoder count of the motor at a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw encoder count at the given timestamp or PROS_ERR if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="582" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gabf650661a11b19e69b743a34a71b0027" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; get_raw_position_all</definition>
        <argsstring>(std::uint32_t *const timestamp) const =0</argsstring>
        <name>get_raw_position_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga24edad2423f67412ad9ba98a4c82dc31">get_raw_position_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga24edad2423f67412ad9ba98a4c82dc31">get_raw_position_all</reimplementedby>
        <param>
          <type>std::uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Gets a vector of the raw encoder count(s) of the motor(s) at a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing the raw encoder count(s) at the given timestamp or PROS_ERR if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="601" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga3ed2e114d755fc8a24b6e42bdd5ea4bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double get_temperature</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_temperature</name>
        <reimplementedby refid="group__cpp-motor-group_1gaa333b80500626bd19fc8f19bc15a02b8">get_temperature</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gaa333b80500626bd19fc8f19bc15a02b8">get_temperature</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the temperature of the motor in degrees Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s temperature in degrees Celsius or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="617" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gabfc62ae07e7452f8af3ab62e78363c76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; get_temperature_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_temperature_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gad7c6601004de4a794331ec71e1526ba3">get_temperature_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gad7c6601004de4a794331ec71e1526ba3">get_temperature_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the temperature(s) of the motor(s) in degrees Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; temperature(s) in degrees Celsius or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="633" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga7cca2d5eb09b2341b5afffbc26dae635" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double get_torque</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_torque</name>
        <reimplementedby refid="group__cpp-motor-group_1ga5d1344f260b9e9a694151e27dd90a4a0">get_torque</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga5d1344f260b9e9a694151e27dd90a4a0">get_torque</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the torque generated by the motor in Newton Meters (Nm). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s torque in Nm or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="648" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gaa4225a5f22a6b10a9b4c1532d395b4ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>virtual std::vector&lt;double&gt; get_torque_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_torque_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga15b83c274ca69fc30c1fc53ec050b5bb">get_torque_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga15b83c274ca69fc30c1fc53ec050b5bb">get_torque_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the torque(s) generated by the motor(s) in Newton Meters (Nm). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; torque(s) in Nm or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="664" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gaeeec095b765765c43c22578dc44bd7b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_voltage</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_voltage</name>
        <reimplementedby refid="group__cpp-motor-group_1ga0857fec2fbc76a7a3b04a2dceb7a55a8">get_voltage</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga0857fec2fbc76a7a3b04a2dceb7a55a8">get_voltage</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the voltage delivered to the motor in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s voltage in mV or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="679" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gaf4f1030a9b7adc003bfe46325da6d2d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; get_voltage_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_voltage_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga8b6089b5a1464c183258980321aaca47">get_voltage_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga8b6089b5a1464c183258980321aaca47">get_voltage_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the voltage(s) delivered to the motor(s) in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; voltage(s) in mV or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="695" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga75daf190cb506dbfe807c672fd61a9f1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t is_over_current</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>is_over_current</name>
        <reimplementedby refid="group__cpp-motor-group_1ga08811b2a28240b216db28281175e58fe">is_over_current</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga08811b2a28240b216db28281175e58fe">is_over_current</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Checks if the motor is drawing over its current limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor&apos;s current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="712" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga93ed616f0597a8367dc9e0419bdc78df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; is_over_current_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>is_over_current_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga2a8d6aa10076314d209b741215689e23">is_over_current_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga2a8d6aa10076314d209b741215689e23">is_over_current_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of whether each motor is drawing over its current limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor&apos;s current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="729" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1gad6c9b66f689819d5a27af242623fcc37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t is_over_temp</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>is_over_temp</name>
        <reimplementedby refid="group__cpp-motor-group_1gafe2d787550459907d7efd6cc7174a1cc">is_over_temp</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gafe2d787550459907d7efd6cc7174a1cc">is_over_temp</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the temperature limit flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the temperature limit is exceeded and 0 if the temperature is below the limit, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="745" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-telemetry_1ga945be8a01f60dbc29247097c0aea81c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; is_over_temp_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>is_over_temp_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga92f61f573c53ca1f59b26b06696d31ff">is_over_temp_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga92f61f573c53ca1f59b26b06696d31ff">is_over_temp_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the temperature limit flag(s) for the motor(s). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the temperature limit is exceeded and 0 if the temperature is below the limit, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="761" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>These functions allow programmers to collect telemetry from motors </para>
    </detaileddescription>
  </compounddef>
</doxygen>
