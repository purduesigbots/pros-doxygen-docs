<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-vision" kind="group">
    <compoundname>cpp-vision</compoundname>
    <title>Vision Sensor C++ API</title>
    <innerfile refid="vision_8hpp">vision.hpp</innerfile>
    <innerclass refid="classpros_1_1v5_1_1Vision" prot="public">pros::v5::Vision</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-vision_1gaddf9ae6eb4813386116110d06c5beac4" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Vision</definition>
        <argsstring>(std::uint8_t port, vision_zero_e_t zero_point=E_VISION_ZERO_TOPLEFT)</argsstring>
        <name>Vision</name>
        <param>
          <type>std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>vision_zero_e_t</type>
          <declname>zero_point</declname>
          <defval>E_VISION_ZERO_TOPLEFT</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor object on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="55" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga76431ffd2012b88a7a32a629584b594a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t clear_led</definition>
        <argsstring>(void) const</argsstring>
        <name>clear_led</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="68" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga4f1fc5e12221451d7e244318cfe5bc04" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
        <definition>static vision_signature_s_t signature_from_utility</definition>
        <argsstring>(const std::int32_t id, const std::int32_t u_min, const std::int32_t u_max, const std::int32_t u_mean, const std::int32_t v_min, const std::int32_t v_max, const std::int32_t v_mean, const float range, const std::int32_t type)</argsstring>
        <name>signature_from_utility</name>
        <param>
          <type>const std::int32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>u_min</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>u_max</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>u_mean</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>v_min</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>v_max</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>v_mean</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a signature from the vision sensor utility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> that can be set using <ref refid="group__cpp-vision_1ga82489e0d344b86b031e45a7a549f6acd" kindref="member">Vision::set_signature</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="94" column="29"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gaad39648fb027abf526d427fcd39ac850" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>vision_color_code_t</type>
        <definition>vision_color_code_t create_color_code</definition>
        <argsstring>(const std::uint32_t sig_id1, const std::uint32_t sig_id2, const std::uint32_t sig_id3=0, const std::uint32_t sig_id4=0, const std::uint32_t sig_id5=0) const</argsstring>
        <name>create_color_code</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id1</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id2</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id3</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id4</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id5</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a color code that represents a combination of the given signature IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - Fewer than two signatures have been provided or one of the signatures is out of its [1-7] range (or 0 when omitted).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig_id1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id4</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id5</parametername>
</parameternamelist>
<parameterdescription>
<para>The fifth signature id [1-7] to add to the color code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_color_code_t object containing the color code information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="122" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gaf4fa926cf28cf99a0818714f5f701187" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t get_by_size</definition>
        <argsstring>(const std::uint32_t size_id) const</argsstring>
        <name>get_by_size</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given size id, or PROS_ERR if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="142" column="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gaad2f7f19ea9d69ccbf82af9f5b55f419" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t get_by_sig</definition>
        <argsstring>(const std::uint32_t size_id, const std::uint32_t sig_id) const</argsstring>
        <name>get_by_sig</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given signature according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EINVAL - sig_id is outside the range [1-8] EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> signature for which an object will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given signature and size_id, or PROS_ERR if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="164" column="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga0ee6adc0ac7836cc75195a65fd0dbaed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t get_by_code</definition>
        <argsstring>(const std::uint32_t size_id, const vision_color_code_t color_code) const</argsstring>
        <name>get_by_code</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const vision_color_code_t</type>
          <declname>color_code</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given color code according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which an object will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given color code and size_id, or PROS_ERR if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="183" column="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gaf21a819740fe50fd73af70c41651cbae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_exposure</definition>
        <argsstring>(void) const</argsstring>
        <name>get_exposure</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the exposure parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>The current exposure parameter from [0,150], PROS_ERR if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="197" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga450dc055c2448fab6eb551231dde7071" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_object_count</definition>
        <argsstring>(void) const</argsstring>
        <name>get_object_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of objects currently detected by the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>The number of objects detected on the specified vision sensor. Returns PROS_ERR if the port was invalid or an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="209" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gafcbec69e9c0dc3bf13765441f9e9e659" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t get_signature</definition>
        <argsstring>(const std::uint8_t signature_id) const</argsstring>
        <name>get_signature</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <briefdescription>
<para>Gets the object detection signature with the given id number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> containing information about the signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="223" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gabb5ece73e4caaa15a39f5e661c3ec5cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_white_balance</definition>
        <argsstring>(void) const</argsstring>
        <name>get_white_balance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the white balance parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>The current RGB white balance setting of the sensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="234" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gab5b546c064555ccc94aa3efdcb62dbfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t read_by_size</definition>
        <argsstring>(const std::uint32_t size_id, const std::uint32_t object_count, vision_object_s_t *const object_arr) const</argsstring>
        <name>read_by_size</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="260" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga054480d0518c7368c4d9206b9cde25e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t read_by_sig</definition>
        <argsstring>(const std::uint32_t size_id, const std::uint32_t sig_id, const std::uint32_t object_count, vision_object_s_t *const object_arr) const</argsstring>
        <name>read_by_sig</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EINVAL - sig_id is outside the range [1-8] EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> signature for which an object will be returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="290" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga107dcaf6b54f1cb77e67998e5fef148f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t read_by_code</definition>
        <argsstring>(const std::uint32_t size_id, const vision_color_code_t color_code, const std::uint32_t object_count, vision_object_s_t *const object_arr) const</argsstring>
        <name>read_by_code</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const vision_color_code_t</type>
          <declname>color_code</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EDOM - size_id is greater than the number of available objects. ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which objects will be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="318" column="9"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gace530d71a4be7d2c1ab90dc31856f58b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>static std::int32_t print_signature</definition>
        <argsstring>(const vision_signature_s_t sig)</argsstring>
        <name>print_signature</name>
        <param>
          <type>const <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Prints the contents of the signature as an initializer list to the terminal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature for which the contents will be printed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="329" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga3056945e74c922ee2a8d324fe136fac7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_auto_white_balance</definition>
        <argsstring>(const std::uint8_t enable) const</argsstring>
        <name>set_auto_white_balance</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables/disables auto white-balancing on the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass 0 to disable, 1 to enable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="344" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga4c754824ad4dc5fbbe9afc45064b10a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_exposure</definition>
        <argsstring>(const std::uint8_t exposure) const</argsstring>
        <name>set_exposure</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
<para>Sets the exposure parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The new exposure setting from [0,150].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="361" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gae3fe29fed597773781e7532275a93b22" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_led</definition>
        <argsstring>(const std::int32_t rgb) const</argsstring>
        <name>set_led</name>
        <param>
          <type>const std::int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the vision sensor LED color, overriding the automatic behavior. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>An RGB code to set the LED to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="376" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga82489e0d344b86b031e45a7a549f6acd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_signature</definition>
        <argsstring>(const std::uint8_t signature_id, vision_signature_s_t *const signature_ptr) const</argsstring>
        <name>set_signature</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <param>
          <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> *const</type>
          <declname>signature_ptr</declname>
        </param>
        <briefdescription>
<para>Stores the supplied object detection signature onto the vision sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: This saves the signature in volatile memory, and the signature will be lost as soon as the sensor is powered down.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EINVAL - sig_id is outside the range [1-8]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to store into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signature_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the signature to save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="396" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gac3307c30a25eebfba74911220d404a94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_white_balance</definition>
        <argsstring>(const std::int32_t rgb) const</argsstring>
        <name>set_white_balance</name>
        <param>
          <type>const std::int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the white balance parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>The new RGB white balance setting of the sensor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="411" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1gaf4949921bb01abcf430d48fa5532b5c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_zero_point</definition>
        <argsstring>(vision_zero_e_t zero_point) const</argsstring>
        <name>set_zero_point</name>
        <param>
          <type>vision_zero_e_t</type>
          <declname>zero_point</declname>
        </param>
        <briefdescription>
<para>Sets the (0,0) coordinate for the Field of View. </para>
        </briefdescription>
        <detaileddescription>
<para>This will affect the coordinates returned for each request for a <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> from the sensor, so it is recommended that this function only be used to configure the sensor at the beginning of its use.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="430" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-vision_1ga9d04ecf017d67e551ca413b0bfd8fcd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_wifi_mode</definition>
        <argsstring>(const std::uint8_t enable) const</argsstring>
        <name>set_wifi_mode</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Sets the Wi-Fi mode of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Disable Wi-Fi on the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> sensor if 0, enable otherwise (e.g. 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.hpp" line="445" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Additional example code for this module can be found in its <ref refid="vision" kindref="compound">Tutorial.</ref> </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
