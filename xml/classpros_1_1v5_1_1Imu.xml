<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1v5_1_1Imu" kind="class" language="C++" prot="public">
    <compoundname>pros::v5::Imu</compoundname>
    <basecompoundref refid="classpros_1_1v5_1_1Device" prot="public" virt="non-virtual">Device</basecompoundref>
    <includes refid="imu_8hpp" local="yes">imu.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__cpp-imu_1gac6f1a6d4484080397cb0c78eabea166b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Imu</definition>
        <argsstring>(const std::uint8_t port)</argsstring>
        <name>Imu</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Creates an <ref refid="classpros_1_1v5_1_1Imu" kindref="compound">Imu</ref> object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>the<sp/>sensor<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="87" column="1" bodyfile="pros/imu.hpp" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gae904d8560172ce61c6f99edb36d936dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Imu</definition>
        <argsstring>(const Device &amp;device)</argsstring>
        <name>Imu</name>
        <param>
          <type>const <ref refid="classpros_1_1v5_1_1Device" kindref="compound">Device</ref> &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="89" column="1" bodyfile="pros/imu.hpp" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gac52642244bf571d7551cd72db472b6be" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t reset</definition>
        <argsstring>(bool blocking=false) const</argsstring>
        <name>reset</name>
        <param>
          <type>bool</type>
          <declname>blocking</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Calibrate IMU. </para>
        </briefdescription>
        <detaileddescription>
<para>Calibration takes approximately 2 seconds and blocks during this period if the blocking param is true, with a timeout for this operation being set a 3 seconds as a safety margin. This function also blocks until the IMU status flag is set properly to E_IMU_STATUS_CALIBRATING, with a minimum blocking time of 5ms and a timeout of 1 second if it&apos;s never set.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is already calibrating, or time out setting the status flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blocking</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether this function blocks during calibration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>imu.calibrate();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Block<sp/>until<sp/>calibration<sp/>is<sp/>complete</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>imu.reset(true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="145" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gafb4e63f82dffc58b0fb0569f73250ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_data_rate</definition>
        <argsstring>(std::uint32_t rate) const</argsstring>
        <name>set_data_rate</name>
        <param>
          <type>std::uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the Inertial Sensor&apos;s refresh interval in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>The rate may be specified in increments of 5ms, and will be rounded down to the nearest increment. The minimum allowable refresh rate is 5ms. The default rate is 10ms.</para>
<para>As values are copied into the shared memory buffer only at 10ms intervals, setting this value to less than 10ms does not mean that you can poll the sensor&apos;s values any faster. However, it will guarantee that the data is as recent as possible.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>The data refresh interval in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>refresh<sp/>rate<sp/>to<sp/>5ms</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::int32_t<sp/>status<sp/>=<sp/>imu.set_data_rate(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>the<sp/>operation<sp/>was<sp/>successful</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(status<sp/>==<sp/>PROS_ERR)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>the<sp/>error</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>the<sp/>sensor<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="191" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga60630447c3ada8da63dd91e092eeb2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_rotation</definition>
        <argsstring>() const</argsstring>
        <name>get_rotation</name>
        <briefdescription>
<para>Get the total number of degrees the Inertial Sensor has spun about the z-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is theoretically unbounded. Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>total<sp/>number<sp/>of<sp/>degrees<sp/>the<sp/>sensor<sp/>has<sp/>spun</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>printf(&quot;Total<sp/>rotation:<sp/>%f\n&quot;,<sp/>imu.get_rotation());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="243" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga16a339b5f7729298dc79cf4971565043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_heading</definition>
        <argsstring>() const</argsstring>
        <name>get_heading</name>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s heading relative to the initial direction of its x-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is bounded by [0,360). Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%f\n&quot;,<sp/>imu.get_heading());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="279" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga0775873d5815e585727e6b3978f242f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-imu_1ga1f3d4bf4251e6ce7cb374297de6390a1" kindref="member">pros::quaternion_s_t</ref></type>
        <definition>virtual pros::quaternion_s_t get_quaternion</definition>
        <argsstring>() const</argsstring>
        <name>get_quaternion</name>
        <briefdescription>
<para>Get a quaternion representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quaternion representing the sensor&apos;s orientation. If the operation failed, all the quaternion&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>quaternion</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::quaternion_s_t<sp/>quat<sp/>=<sp/>imu.get_quaternion();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Quaternion:<sp/>&quot;<sp/>&lt;&lt;<sp/>quat.w<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>quat.x<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>quat.y<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>quat.z<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="312" column="30"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gac2bf7777fcebe495e7e615bd4d2da7af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-imu_1ga93e80020ec907b7e11ac7166e5d01c55" kindref="member">pros::euler_s_t</ref></type>
        <definition>virtual pros::euler_s_t get_euler</definition>
        <argsstring>() const</argsstring>
        <name>get_euler</name>
        <briefdescription>
<para>Get the Euler angles representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euler angles representing the sensor&apos;s orientation. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>Euler<sp/>angles</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::euler_s_t<sp/>euler<sp/>=<sp/>imu.get_euler();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Euler:<sp/>&quot;<sp/>&lt;&lt;<sp/>euler.roll<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>euler.pitch<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>euler.yaw<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="345" column="25"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga74b63ffbb1f1a31e6f1bb740b8c4f823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_pitch</definition>
        <argsstring>() const</argsstring>
        <name>get_pitch</name>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s pitch angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pitch angle, or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>pitch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Pitch:<sp/>%f\n&quot;,<sp/>imu.get_pitch());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="376" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga25b06e3629127c64370d43454b04696f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_roll</definition>
        <argsstring>() const</argsstring>
        <name>get_roll</name>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s roll angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The roll angle, or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>roll</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Roll:<sp/>%f\n&quot;,<sp/>imu.get_roll());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="406" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga757ff3f4ff5e6646db7a158bdc951dc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_yaw</definition>
        <argsstring>() const</argsstring>
        <name>get_yaw</name>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s yaw angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The yaw angle, or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>yaw</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Yaw:<sp/>%f\n&quot;,<sp/>imu.get_yaw());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="436" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga2f7de75365d00f78dfc73f82c410065e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-imu_1ga5b9e240cfb181cce3c741e29efbbbf23" kindref="member">pros::imu_gyro_s_t</ref></type>
        <definition>virtual pros::imu_gyro_s_t get_gyro_rate</definition>
        <argsstring>() const</argsstring>
        <name>get_gyro_rate</name>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw gyroscope values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>raw<sp/>gyroscope<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::imu_gyro_s_t<sp/>gyro<sp/>=<sp/>imu.get_gyro_rate();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Gyro:<sp/>&quot;<sp/>&lt;&lt;<sp/>gyro.x<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>gyro.y<sp/>&lt;&lt;<sp/>&quot;,<sp/>&quot;<sp/>&lt;&lt;<sp/>gyro.z<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="468" column="28"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gaa0267b91c2766fc53e5d8d382b1e3ba2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_rotation</definition>
        <argsstring>() const</argsstring>
        <name>tare_rotation</name>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s rotation to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>rotation<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_rotation(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>sensor&apos;s<sp/>rotation<sp/>value<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.tare_rotation();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="505" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga66450ac36b71abf1637ed049544cf0e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_heading</definition>
        <argsstring>() const</argsstring>
        <name>tare_heading</name>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s heading to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>heading<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_heading(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>sensor&apos;s<sp/>heading<sp/>value<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.tare_heading();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="542" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gafa1565cc9e7f3dba04399f15be7eb454" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_pitch</definition>
        <argsstring>() const</argsstring>
        <name>tare_pitch</name>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s pitch to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>pitch<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_pitch(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>sensor&apos;s<sp/>pitch<sp/>value<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.tare_pitch();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="579" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gaf1e8a07f645b44fb970a9355a595ec41" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_yaw</definition>
        <argsstring>() const</argsstring>
        <name>tare_yaw</name>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s yaw to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>yaw<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_yaw(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>sensor&apos;s<sp/>yaw<sp/>value<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.tare_yaw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="616" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga7102b391456b5e4a87d54aa75e9367e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_roll</definition>
        <argsstring>() const</argsstring>
        <name>tare_roll</name>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s roll to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>roll<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_roll(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>sensor&apos;s<sp/>roll<sp/>value<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.tare_roll();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="653" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga2e1d8770361636ce084f95b57df0c1d0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare</definition>
        <argsstring>() const</argsstring>
        <name>tare</name>
        <briefdescription>
<para>Resets all 5 values of the Inertial Sensor to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>all<sp/>values<sp/>of<sp/>the<sp/>sensor<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.tare();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="684" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga581438687c3b69e495dda3e145173d7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_euler</definition>
        <argsstring>() const</argsstring>
        <name>tare_euler</name>
        <briefdescription>
<para>Reset all 3 euler values of the Inertial Sensor to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>all<sp/>euler<sp/>values<sp/>of<sp/>the<sp/>sensor<sp/>to<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.tare_euler();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="715" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga39d71c5e2bf21bc76aa40bdfa6384937" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_heading</definition>
        <argsstring>(const double target) const</argsstring>
        <name>set_heading</name>
        <param>
          <type>const double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s heading to target value Target will default to 360 if above 360 and default to 0 if below 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the heading value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>heading<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_heading(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="751" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga1885d4e1d4cc150d55db862ce53ba209" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_rotation</definition>
        <argsstring>(const double target) const</argsstring>
        <name>set_rotation</name>
        <param>
          <type>const double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s rotation to target value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the rotation value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>rotation<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_rotation(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="786" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga5f601df7e023e5e102d7d34ee60919f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_yaw</definition>
        <argsstring>(const double target) const</argsstring>
        <name>set_yaw</name>
        <param>
          <type>const double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s yaw to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for yaw value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>yaw<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_yaw(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="822" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gaf5eaac02249d670303513e90d91de70a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_pitch</definition>
        <argsstring>(const double target) const</argsstring>
        <name>set_pitch</name>
        <param>
          <type>const double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s pitch to target value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the pitch value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>pitch<sp/>value<sp/>to<sp/>10</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_pitch(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="857" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gad42996e6b92cab819c3cb566ee809348" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_roll</definition>
        <argsstring>(const double target) const</argsstring>
        <name>set_roll</name>
        <param>
          <type>const double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s roll to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target euler values for the euler values to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>roll<sp/>value<sp/>to<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_roll(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="893" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga23f999199acce579127ffe5582eb8c89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_euler</definition>
        <argsstring>(const pros::euler_s_t target) const</argsstring>
        <name>set_euler</name>
        <param>
          <type>const <ref refid="group__c-imu_1ga93e80020ec907b7e11ac7166e5d01c55" kindref="member">pros::euler_s_t</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s euler values to target euler values. </para>
        </briefdescription>
        <detaileddescription>
<para>Will default to +/- 180 if target exceeds +/- 180.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target euler values for the euler values to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>sensor&apos;s<sp/>euler<sp/>values<sp/>to<sp/>50</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.set_euler(50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="929" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga7ce63efa119789a8886a4819ee3c0443" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-imu_1ga70eb3173193f4f46266eade4c243f662" kindref="member">pros::imu_accel_s_t</ref></type>
        <definition>virtual pros::imu_accel_s_t get_accel</definition>
        <argsstring>() const</argsstring>
        <name>get_accel</name>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw accelerometer values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>raw<sp/>accelerometer<sp/>values</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::imu_accel_s_t<sp/>accel<sp/>=<sp/>imu.get_accel();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;x:<sp/>%f,<sp/>y:<sp/>%f,<sp/>z:<sp/>%f\n&quot;,<sp/>accel.x,<sp/>accel.y,<sp/>accel.z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="963" column="29"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga86823263dabc96d9dbdf08a6217380aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__cpp-imu_1gab0742c208423893382bf252026c79176" kindref="member">pros::ImuStatus</ref></type>
        <definition>virtual pros::ImuStatus get_status</definition>
        <argsstring>() const</argsstring>
        <name>get_status</name>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s status. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Inertial Sensor&apos;s status code, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>sensor&apos;s<sp/>status</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::ImuStatus<sp/>status<sp/>=<sp/>imu.get_status();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>&quot;Status:<sp/>&quot;<sp/>&lt;&lt;<sp/>status<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="997" column="25"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1gac58cd647360441bf82830bd17d2f6c82" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool is_calibrating</definition>
        <argsstring>() const</argsstring>
        <name>is_calibrating</name>
        <briefdescription>
<para>Check whether the IMU is calibrating. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the V5 Inertial Sensor is calibrating or false false if it is not.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Imu<sp/>imu(IMU_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Calibrate<sp/>the<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu.calibrate();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>if<sp/>the<sp/>sensor<sp/>is<sp/>calibrating</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(imu.is_calibrating())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Calibrating...\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something<sp/>with<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="1027" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga1333241204fe027ff627f51603fc0742" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>imu_orientation_e_t</type>
        <definition>virtual imu_orientation_e_t get_physical_orientation</definition>
        <argsstring>() const</argsstring>
        <name>get_physical_orientation</name>
        <briefdescription>
<para>Returns the physical orientation of the IMU. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The physical orientation of the Inertial Sensor or PROS_ERR if an error occured. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="1041" column="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="group__cpp-imu_1gafd1dcb9f194904648ced68b890dc6d6c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpros_1_1v5_1_1Imu" kindref="compound">Imu</ref></type>
        <definition>static Imu get_imu</definition>
        <argsstring>()</argsstring>
        <name>get_imu</name>
        <briefdescription>
<para>Gets a IMU sensor that is plugged in to the brain. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The first time this function is called it returns the IMU sensor at the lowest port If this function is called multiple times, it will cycle through all the ports. For example, if you have 1 IMU sensor on the robot this function will always return a IMU sensor object for that port. If you have 2 IMU sensors, all the odd numered calls to this function will return objects for the lower port number, all the even number calls will return IMU objects for the higher port number</para>
</simplesect>
This functions uses the following values of errno when an error state is reached: ENODEV - No IMU sensor is plugged into the brain</para>
<para><simplesect kind="return"><para>A IMU object corresponding to a port that a IMU sensor is connected to the brain If no IMU sensor is plugged in, it returns a IMU sensor on port PROS_ERR_BYTE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="111" column="12"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-imu_1ga25b45846ce0dc1dd5dc01c0f5c5baf96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classpros_1_1v5_1_1Imu" kindref="compound">Imu</ref> &gt;</type>
        <definition>static std::vector&lt;Imu&gt; get_all_devices</definition>
        <argsstring>()</argsstring>
        <name>get_all_devices</name>
        <briefdescription>
<para>Gets all IMU sensors. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A vector of <ref refid="classpros_1_1v5_1_1Imu" kindref="compound">Imu</ref> sensor objects.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::vector&lt;Imu&gt;<sp/>imu_all<sp/>=<sp/>pros::Imu::get_all_devices();<sp/><sp/>//<sp/>All<sp/>IMU<sp/>sensors<sp/>that<sp/>are<sp/>connected</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="207" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="group__cpp-imu_1gad7de8a3436dddae34bbbd27772c93d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const pros::Imu &amp;imu)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classpros_1_1v5_1_1Imu" kindref="compound">pros::Imu</ref> &amp;</type>
          <declname>imu</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format(this below is all in one line with no new line): <ref refid="classpros_1_1v5_1_1Imu" kindref="compound">Imu</ref> [port: imu._port, rotation: (rotation), heading: (heading), pitch: (pitch angle), roll: (roll angle), yaw: (yaw angle), gyro rate: {x,y,z}, get accel: {x,y,z}, calibrating: (calibrating boolean)] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.hpp" line="1051" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Imu</label>
        <link refid="classpros_1_1v5_1_1Imu"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Device</label>
        <link refid="classpros_1_1v5_1_1Device"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Imu</label>
        <link refid="classpros_1_1v5_1_1Imu"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Device</label>
        <link refid="classpros_1_1v5_1_1Device"/>
      </node>
    </collaborationgraph>
    <location file="pros/imu.hpp" line="55" column="24" bodyfile="pros/imu.hpp" bodystart="55" bodyend="1054"/>
    <listofallmembers>
      <member refid="group__cpp-device_1ga8176a1cb598ccc924caa19a6d669b396" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>Device</name></member>
      <member refid="group__cpp-imu_1ga7ce63efa119789a8886a4819ee3c0443" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_accel</name></member>
      <member refid="group__cpp-imu_1ga25b45846ce0dc1dd5dc01c0f5c5baf96" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>get_all_devices</name></member>
      <member refid="group__cpp-device_1gaeb207d6beaac509eb94a0f21137b6f35" prot="public" virt="non-virtual" ambiguityscope="pros::v5::Device::"><scope>pros::v5::Imu</scope><name>get_all_devices</name></member>
      <member refid="group__cpp-imu_1gac2bf7777fcebe495e7e615bd4d2da7af" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_euler</name></member>
      <member refid="group__cpp-imu_1ga2f7de75365d00f78dfc73f82c410065e" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_gyro_rate</name></member>
      <member refid="group__cpp-imu_1ga16a339b5f7729298dc79cf4971565043" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_heading</name></member>
      <member refid="group__cpp-imu_1gafd1dcb9f194904648ced68b890dc6d6c" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>get_imu</name></member>
      <member refid="group__cpp-imu_1ga1333241204fe027ff627f51603fc0742" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_physical_orientation</name></member>
      <member refid="group__cpp-imu_1ga74b63ffbb1f1a31e6f1bb740b8c4f823" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_pitch</name></member>
      <member refid="group__cpp-device_1gad5b1efc698f196a0d4fd0f795550b703" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>get_plugged_type</name></member>
      <member refid="group__cpp-device_1ga270385bad8e84b2d327ea4551f3ea648" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>get_plugged_type</name></member>
      <member refid="group__cpp-device_1ga4c2a58a7c22b5eeca58ccb341a1c92be" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>get_port</name></member>
      <member refid="group__cpp-imu_1ga0775873d5815e585727e6b3978f242f2" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_quaternion</name></member>
      <member refid="group__cpp-imu_1ga25b06e3629127c64370d43454b04696f" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_roll</name></member>
      <member refid="group__cpp-imu_1ga60630447c3ada8da63dd91e092eeb2fd" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_rotation</name></member>
      <member refid="group__cpp-imu_1ga86823263dabc96d9dbdf08a6217380aa" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_status</name></member>
      <member refid="group__cpp-imu_1ga757ff3f4ff5e6646db7a158bdc951dc2" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>get_yaw</name></member>
      <member refid="group__cpp-imu_1gac6f1a6d4484080397cb0c78eabea166b" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>Imu</name></member>
      <member refid="group__cpp-imu_1gae904d8560172ce61c6f99edb36d936dd" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>Imu</name></member>
      <member refid="group__cpp-imu_1gac58cd647360441bf82830bd17d2f6c82" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>is_calibrating</name></member>
      <member refid="group__cpp-device_1gaaf5448d59f0bc980c4490e97964cfb42" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>is_installed</name></member>
      <member refid="group__cpp-imu_1gad7de8a3436dddae34bbbd27772c93d59" prot="public" virt="non-virtual"><scope>pros::v5::Imu</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__cpp-imu_1gac52642244bf571d7551cd72db472b6be" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>reset</name></member>
      <member refid="group__cpp-imu_1gafb4e63f82dffc58b0fb0569f73250ff6" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>set_data_rate</name></member>
      <member refid="group__cpp-imu_1ga23f999199acce579127ffe5582eb8c89" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>set_euler</name></member>
      <member refid="group__cpp-imu_1ga39d71c5e2bf21bc76aa40bdfa6384937" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>set_heading</name></member>
      <member refid="group__cpp-imu_1gaf5eaac02249d670303513e90d91de70a" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>set_pitch</name></member>
      <member refid="group__cpp-imu_1gad42996e6b92cab819c3cb566ee809348" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>set_roll</name></member>
      <member refid="group__cpp-imu_1ga1885d4e1d4cc150d55db862ce53ba209" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>set_rotation</name></member>
      <member refid="group__cpp-imu_1ga5f601df7e023e5e102d7d34ee60919f8" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>set_yaw</name></member>
      <member refid="group__cpp-imu_1ga2e1d8770361636ce084f95b57df0c1d0" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>tare</name></member>
      <member refid="group__cpp-imu_1ga581438687c3b69e495dda3e145173d7b" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>tare_euler</name></member>
      <member refid="group__cpp-imu_1ga66450ac36b71abf1637ed049544cf0e5" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>tare_heading</name></member>
      <member refid="group__cpp-imu_1gafa1565cc9e7f3dba04399f15be7eb454" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>tare_pitch</name></member>
      <member refid="group__cpp-imu_1ga7102b391456b5e4a87d54aa75e9367e8" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>tare_roll</name></member>
      <member refid="group__cpp-imu_1gaa0267b91c2766fc53e5d8d382b1e3ba2" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>tare_rotation</name></member>
      <member refid="group__cpp-imu_1gaf1e8a07f645b44fb970a9355a595ec41" prot="public" virt="virtual"><scope>pros::v5::Imu</scope><name>tare_yaw</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
