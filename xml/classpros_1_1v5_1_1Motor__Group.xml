<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1v5_1_1Motor__Group" kind="class" language="C++" prot="public">
    <compoundname>pros::v5::Motor_Group</compoundname>
    <derivedcompoundref refid="classpros_1_1v5_1_1Motor" prot="public" virt="non-virtual">Motor</derivedcompoundref>
    <includes refid="motors_8hpp" local="yes">motors.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Motor movement functions</header>
      <description><para>These functions allow programmers to make motors move </para>
</description>
      <memberdef kind="function" id="group__cpp-motors_1gad338fa6ea2f37d45d57763b176963445" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t operator=</definition>
        <argsstring>(std::int32_t voltage) const</argsstring>
        <name>operator=</name>
        <param>
          <type>std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor_Group<sp/>motor_group<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="187" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move</definition>
        <argsstring>(std::int32_t voltage) const</argsstring>
        <name>move</name>
        <param>
          <type>std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -127 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__c-motors_1gac76e46064191f91bf2546335caccf6b5" kindref="member">motor_move()</ref>, or <ref refid="group__api-legacy_1ga59a0d6bd050cd259ad488e68f856ae81" kindref="member">motorSet()</ref> from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor_Group<sp/>motor_group<sp/>({1});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move(master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="218" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga6f6ed2b95a6d2e4e2f2473017dc42eec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_absolute</definition>
        <argsstring>(const double position, const std::int32_t velocity) const</argsstring>
        <name>move_absolute</name>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the target absolute position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the position of the motor when initialized or the position when it was most recently reset with <ref refid="group__cpp-motors_1ga5a4a9f0564cf6573848fed77e433a751" kindref="member">pros::Motor::set_zero_position()</ref>.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The absolute position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.tare_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="263" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga966302132cf4a74d3f2493b70764191b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_relative</definition>
        <argsstring>(const double position, const std::int32_t velocity) const</argsstring>
        <name>move_relative</name>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the relative target position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the current position of the motor as given in <ref refid="group__c-motors_1ga113fbf1950304b3a56705722b283c3a1" kindref="member">pros::Motor::motor_get_position()</ref>. Providing 10.0 as the position parameter would result in the motor moving clockwise 10 units, no matter what the current position is.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_relative(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_relative(100,<sp/>100);<sp/>//<sp/>Also<sp/>moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>205)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>195)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="304" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga589bce07656e7689a07ef4cef4e8152e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_velocity</definition>
        <argsstring>(const std::int32_t velocity) const</argsstring>
        <name>move_velocity</name>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the velocity for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This velocity corresponds to different actual speeds depending on the gearset used for the motor. This results in a range of +-100 for E_MOTOR_GEARSET_36, +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity is held with PID to ensure consistent speed, as opposed to setting the motor&apos;s voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from -+-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_velocity(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>100<sp/>RPM<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_velocity(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="336" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga3d490ebe9fc7bc4b1c80dad7e78a8cb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_voltage</definition>
        <argsstring>(const std::int32_t voltage) const</argsstring>
        <name>move_voltage</name>
        <param>
          <type>const std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the output voltage for the motor from -12000 to 12000 in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage value from -12000 to 12000</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_voltage(12000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>max<sp/>voltage<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_voltage(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="362" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga3ac7359521b822775fbdc3a708f9e687" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t brake</definition>
        <argsstring>(void) const</argsstring>
        <name>brake</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stops the motor using the currently configured brake mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets motor velocity to zero, which will cause it to act according to the set brake mode. If brake mode is set to MOTOR_BRAKE_HOLD, this function may behave differently than calling move_absolute(0) or move_relative(0).</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="379" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga530807d30c58f7e098a65d14c039dc57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t modify_profiled_velocity</definition>
        <argsstring>(const std::int32_t velocity) const</argsstring>
        <name>modify_profiled_velocity</name>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Changes the output velocity for a profiled movement (<ref refid="group__c-motors_1ga75e7ed194eba3e78d281c40fcd10763f" kindref="member">motor_move_absolute()</ref> or <ref refid="group__c-motors_1gad62eb0085dbb0aad697487a1b2c00bc1" kindref="member">motor_move_relative()</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para>This will have no effect if the motor is not following a profiled movement.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(1,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.modify_profiled_velocity(1,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor<sp/>early</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="407" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga0e05eaa2a892c44accbae47b773481a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_target_position</definition>
        <argsstring>(void) const</argsstring>
        <name>get_target_position</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the target position set for the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The target position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Target:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_target_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>100</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="429" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaf036f8d1397df486675451062a3a493d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_target_position</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_target_position</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor_Group<sp/>motor_group<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="430" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaaa87d390d75a311e1e568538fe818a83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_every_target_position</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_target_position</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor_Group<sp/>motor_group<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="432" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaa6c4295d83cf68a2dbc6cac41a052750" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_target_velocity</definition>
        <argsstring>(void) const</argsstring>
        <name>get_target_velocity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the velocity commanded to the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move_velocity(master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Velocity:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_target_velocity();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>value<sp/>of<sp/>E_CONTROLLER_ANALOG_LEFT_Y</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="458" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga79c3404f946126a899bb3b1108a2eea6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_target_velocity</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_target_velocity</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor_Group<sp/>motor_group<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="459" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gadde511c62c7d16f9073b0bced8a0beb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_every_target_velocity</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_target_velocity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor_Group<sp/>motor_group<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="461" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor telemetry functions</header>
      <description><para>These functions allow programmers to collect telemetry from motors </para>
</description>
      <memberdef kind="function" id="group__cpp-motors_1gac7b4dcf86cdb27eeb013e9ba0da65f86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_actual_velocity</definition>
        <argsstring>(void) const</argsstring>
        <name>get_actual_velocity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="491" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga2e427acfd02bd06fcb9a8112eb0d54ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_actual_velocity</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_actual_velocity</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="492" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga31ab82555993553a3e97396fdd159828" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_every_actual_velocity</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_actual_velocity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="494" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5720a781b7b4beeae824da95aae098ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_current_draw</definition>
        <argsstring>(void) const</argsstring>
        <name>get_current_draw</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current drawn by the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s current in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Current<sp/>Draw:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_current_draw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="519" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gab35d9a9d060886b5aedac14bb9880324" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_current_draw</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_current_draw</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="520" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga0aa4859092be7d68f5a74105b2e804b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_every_current_draw</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_current_draw</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="521" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5e22c8978eeab11d79846d44ce71a658" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_direction</definition>
        <argsstring>(void) const</argsstring>
        <name>get_direction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the direction of movement for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 for moving in the positive direction, -1 for moving in the negative direction, and PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Direction:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_direction();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="546" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga86e9b1078175e5dd1bba8beb02c39918" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_direction</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_direction</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="547" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga54fabac8705784e8a580e1ca87f4180c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_every_direction</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_direction</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="548" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5fe48a04a707b27542b082b211cf134d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_efficiency</definition>
        <argsstring>(void) const</argsstring>
        <name>get_efficiency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the efficiency of the motor in percent. </para>
        </briefdescription>
        <detaileddescription>
<para>An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s efficiency in percent or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Efficiency:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_efficiency();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="577" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga6c1abedf8323a80ea7c2193d3ded48fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_efficiency</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_efficiency</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="578" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga2b70875534cc4d2f6f77007ffeb4c4e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_every_efficiency</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_efficiency</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="579" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga2f054fdeb8598d4ac6933aa8eaba4848" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_faults</definition>
        <argsstring>(void) const</argsstring>
        <name>get_faults</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the faults experienced by the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_fault_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s faults.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Faults:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_faults();pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="607" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga94b840f3b3b5490e623370857ff831b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_faults</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_faults</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="608" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga60c12e1fb44265f3246d27f89f8270fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::uint32_t &gt;</type>
        <definition>std::vector&lt;std::uint32_t&gt; get_every_faults</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_faults</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="609" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5d121b6cd69527b2a8524b68c1599d68" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_flags</definition>
        <argsstring>(void) const</argsstring>
        <name>get_flags</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the flags set by the motor&apos;s operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_flag_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s flags.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Faults:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_faults();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="637" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gae8b3ba5afa497be7ca101c8e7e080665" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_flags</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_flags</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="638" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga86f89ee60d53922732f19172c7b08d6e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::uint32_t &gt;</type>
        <definition>std::vector&lt;std::uint32_t&gt; get_every_flags</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_flags</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="639" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga75df6d1bf98c67ff7f1887e09658f42f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_position</definition>
        <argsstring>(void) const</argsstring>
        <name>get_position</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the absolute position of the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s absolute position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Position:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="664" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga39d1af014298251059bfea291faa3dae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_position</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_position</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="665" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga0c91e93e656624a04d7554421f3bf873" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_every_position</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_position</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="666" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga179c822375c2fe243218f69f3e18237e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_power</definition>
        <argsstring>(void) const</argsstring>
        <name>get_power</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the power drawn by the motor in Watts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s power draw in Watts or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Power:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_power();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="691" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga790c106aa56e5035f7205e85d42591e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_power</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_power</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="692" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaed6edc055fd89fdaa43a6652f01329c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_every_power</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_power</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="693" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gadad2d06b4b7257e49e98bf64c299252a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_raw_position</definition>
        <argsstring>(std::uint32_t *const timestamp) const</argsstring>
        <name>get_raw_position</name>
        <param>
          <type>std::uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Gets the raw encoder count of the motor at a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw encoder count at the given timestamp or PROS_ERR if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::uint32_t<sp/>now<sp/>=<sp/>pros::millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Position:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_raw_position(&amp;now);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="723" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga756fa5125a0cde4673ba864f3c059b7d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_raw_position</definition>
        <argsstring>(std::uint32_t *const timestamp, std::uint8_t) const</argsstring>
        <name>get_raw_position</name>
        <param>
          <type>std::uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="724" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga52daf6728cd4df0cc4540f73c29718a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_every_raw_position</definition>
        <argsstring>(std::uint32_t *const timestamp) const</argsstring>
        <name>get_every_raw_position</name>
        <param>
          <type>std::uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="725" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga66496e94f84aa84dcec7b49f978cc664" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_temperature</definition>
        <argsstring>(void) const</argsstring>
        <name>get_temperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the temperature of the motor in degrees Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s temperature in degrees Celsius or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Temperature:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_temperature();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="750" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gafc2a313a8ba70da3db73bed95725982b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_temperature</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_temperature</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="751" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga52140c2aed0885bef17f9002cb2b53ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_every_temperature</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_temperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="752" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5d292814315e3d8eb7cac6aba364d98e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_torque</definition>
        <argsstring>(void) const</argsstring>
        <name>get_torque</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the torque generated by the motor in Newton Meters (Nm). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s torque in Nm or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Torque:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_torque();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="776" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga54ee97b582b7f82b02120e34d5084b2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_torque</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_torque</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="777" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga1141b1743f9104cc1174a09f569cb8ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_every_torque</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_torque</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="778" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gab79ef069a21c9d73b62badc49f11d767" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_voltage</definition>
        <argsstring>(void) const</argsstring>
        <name>get_voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the voltage delivered to the motor in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s voltage in mV or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Voltage:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_voltage();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="802" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gac5332437708209a0458ab598245ebf70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_voltage</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_voltage</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="803" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga59e89961c48d4fdc9b5b1d1b8cde1dac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_every_voltage</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="804" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gacdf7df56b77f1eb26f7d71dbd912b694" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_over_current</definition>
        <argsstring>(void) const</argsstring>
        <name>is_over_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the motor is drawing over its current limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the motor&apos;s current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>the<sp/>motor<sp/>over<sp/>its<sp/>current<sp/>limit?:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_over_current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="830" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga8f45ca242099d11e13483a29dce9864e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_over_current</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>is_over_current</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="831" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga2298467acdd4cf33d7eced8e2f8268ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; every_is_over_current</definition>
        <argsstring>(void) const</argsstring>
        <name>every_is_over_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="832" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga6dd9a8741f1794315d2d7321ac75e59d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_over_temp</definition>
        <argsstring>(void) const</argsstring>
        <name>is_over_temp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the temperature limit flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the temperature limit is exceeded and 0 if the temperature is below the limit, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>the<sp/>motor<sp/>over<sp/>its<sp/>temperature<sp/>limit?:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_over_temp();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="857" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga70260d87897dfce00af0e33028602d5a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_over_temp</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>is_over_temp</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="858" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gad3b170c875eeab7abd7777a7ff915a92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; every_is_over_temp</definition>
        <argsstring>(void) const</argsstring>
        <name>every_is_over_temp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="859" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor configuration functions</header>
      <description><para>These functions allow programmers to configure the behavior of motors </para>
</description>
      <memberdef kind="function" id="group__cpp-motors_1gaf4e7a74edb8ab9df7f64ba3bd35104cf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacepros_1_1v5_1ab2148aa2bceb0c2e94321c24c9b0fd67" kindref="member">Motor_Brake</ref></type>
        <definition>Motor_Brake get_brake_mode</definition>
        <argsstring>(void) const</argsstring>
        <name>get_brake_mode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="886" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga969c0a6e568a6af60072dbb2ef5a2ac4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacepros_1_1v5_1ab2148aa2bceb0c2e94321c24c9b0fd67" kindref="member">Motor_Brake</ref></type>
        <definition>Motor_Brake get_brake_mode</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_brake_mode</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="887" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga631d18edef12872cbd856d2e544475d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacepros_1_1v5_1ab2148aa2bceb0c2e94321c24c9b0fd67" kindref="member">Motor_Brake</ref> &gt;</type>
        <definition>std::vector&lt;Motor_Brake&gt; get_every_brake_mode</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_brake_mode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="888" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaeedf9e3209b12128c93bdf6fc1c5793c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_current_limit</definition>
        <argsstring>(void) const</argsstring>
        <name>get_current_limit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 2500 mA.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s current limit in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Current<sp/>Limit:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_current_limit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="913" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaed7bcf42182d6b0ca8c1282b1d2ea8b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_current_limit</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_current_limit</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="914" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga82c970340a41a1e8db3541b159972487" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_every_current_limit</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_current_limit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="915" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaba2d1bf0b4b792e2e73163f965b6ef17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacepros_1_1v5_1a9d601c278c32b1e46d6dd506eebc0817" kindref="member">Motor_Units</ref></type>
        <definition>Motor_Units get_encoder_units</definition>
        <argsstring>(void) const</argsstring>
        <name>get_encoder_units</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the encoder units that were set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Units according to what is set for the motor or E_MOTOR_ENCODER_INVALID if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1,<sp/>E_MOTOR_GEARSET_06,<sp/>false,<sp/>E_MOTOR_ENCODER_COUNTS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Encoder<sp/>Units:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_encoder_units();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="935" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga42ff00fe52dbe2cd059fe465eb117178" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacepros_1_1v5_1a9d601c278c32b1e46d6dd506eebc0817" kindref="member">Motor_Units</ref></type>
        <definition>Motor_Units get_encoder_units</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_encoder_units</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="936" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga1be36d4c3e0146e3f26fe2507a255e84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacepros_1_1v5_1a9d601c278c32b1e46d6dd506eebc0817" kindref="member">Motor_Units</ref> &gt;</type>
        <definition>std::vector&lt;Motor_Units&gt; get_every_encoder_units</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_encoder_units</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="937" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga7fbb5cb23b8d3d5aeb90bb573316757e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
        <definition>Motor_Gears get_gearing</definition>
        <argsstring>(void) const</argsstring>
        <name>get_gearing</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the gearset that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Gears according to what is set for the motor, or pros::Motor_Gears::invalid if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1,<sp/>E_MOTOR_GEARSET_06,<sp/>false,<sp/>E_MOTOR_ENCODER_COUNTS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Gearing:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_gearing();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="957" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gae9429fcaf4eed03c0c101bd1de821cc0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
        <definition>Motor_Gears get_gearing</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_gearing</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="958" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga2376f80b319801abc81d14ad185eca94" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref> &gt;</type>
        <definition>std::vector&lt;Motor_Gears&gt; get_every_gearing</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_gearing</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="959" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga9d0cdf4f83007babc306a804ce87ccfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::uint8_t &gt;</type>
        <definition>std::vector&lt;std::uint8_t&gt; get_every_port</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_port</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets returns a vector with all the port numbers in the motor group. </para>
        </briefdescription>
        <detaileddescription>
<para>(ALL THE PORTS WILL BE POSITIVE) Use get_ports if you want to get the information on reversal.</para>
<para><simplesect kind="return"><para>std::vector&lt;std::uint8_t&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="968" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga26d4c306d2e68dc8794f4c5e5819bebc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_voltage_limit</definition>
        <argsstring>(void) const</argsstring>
        <name>get_voltage_limit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the voltage limit set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Default value is 0V, which means that there is no software limitation imposed on the voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s voltage limit in V or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Voltage<sp/>Limit:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_voltage_limit();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="991" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaf096008871f815e614342ad1896342f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_voltage_limit</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>get_voltage_limit</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="992" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga527d88e4fe1db242e1428497d69e648a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_every_voltage_limit</definition>
        <argsstring>(void) const</argsstring>
        <name>get_every_voltage_limit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="993" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga913a6f2e24397575d94179aa853a6eca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_reversed</definition>
        <argsstring>(void) const</argsstring>
        <name>is_reversed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the operation direction of the motor as set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the motor has been reversed and 0 if the motor was not reversed, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>the<sp/>motor<sp/>reversed?<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_reversed();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;0&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1014" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga188a2dafa32273b7a3ce6f2186b35110" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_reversed</definition>
        <argsstring>(std::uint8_t) const</argsstring>
        <name>is_reversed</name>
        <param>
          <type>std::uint8_t</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1015" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga8f6dd0d94f2ffd14fd5c0548e0ea6902" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; every_is_reversed</definition>
        <argsstring>(void) const</argsstring>
        <name>every_is_reversed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1016" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga262ad52ba7c6082865f7ff8c0a10d0fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_brake_mode</definition>
        <argsstring>(const Motor_Brake mode) const</argsstring>
        <name>set_brake_mode</name>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ab2148aa2bceb0c2e94321c24c9b0fd67" kindref="member">Motor_Brake</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Sets one of Motor_Brake to the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Works with the C enum and the C++ enum class.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The Motor_Brake to set for the motor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1041" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gab0421c060ac8e6c1b1b2b70e28511619" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_brake_mode</definition>
        <argsstring>(const pros::motor_brake_mode_e_t mode) const</argsstring>
        <name>set_brake_mode</name>
        <param>
          <type>const pros::motor_brake_mode_e_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1042" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gacea9318adbdbb68bf859df3b5adb9cb9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_current_limit</definition>
        <argsstring>(const std::int32_t limit) const</argsstring>
        <name>set_current_limit</name>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Sets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new current limit in mA</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">motor.set_current_limit(1000);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>reduce<sp/>its<sp/>output<sp/>at<sp/>1000<sp/>mA<sp/>instead<sp/>of<sp/>the<sp/>default<sp/>2500<sp/>mA</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1072" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5ea3c179e719829ac409d0534562e2c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_encoder_units</definition>
        <argsstring>(const Motor_Units units)</argsstring>
        <name>set_encoder_units</name>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a9d601c278c32b1e46d6dd506eebc0817" kindref="member">Motor_Units</ref></type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Sets one of Motor_Units for the motor encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>Works with the C enum and the C++ enum class.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>units</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_encoder_units(E_MOTOR_ENCODER_DEGREES);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Encoder<sp/>Units:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_encoder_units();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1097" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga6d847c917f2994c4b69e73bcc6128b98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_encoder_units</definition>
        <argsstring>(const pros::motor_encoder_units_e_t units)</argsstring>
        <name>set_encoder_units</name>
        <param>
          <type>const pros::motor_encoder_units_e_t</type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1098" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaac4bfa684e62972fc894b40e7722252c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_gearing</definition>
        <argsstring>(const Motor_Gears gearset)</argsstring>
        <name>set_gearing</name>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Sets one of the gear cartridge (red, green, blue) for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Usable with the C++ enum class and the C enum.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_gearing(E_MOTOR_GEARSET_06);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Gearset:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_gearing();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1123" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaa4b40010d01a3c38e0c0700512160d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_gearing</definition>
        <argsstring>(const pros::motor_gearset_e_t gearset)</argsstring>
        <name>set_gearing</name>
        <param>
          <type>const pros::motor_gearset_e_t</type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1124" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga024087665358ab9631f66de754176be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_reversed</definition>
        <argsstring>(const bool reverse)</argsstring>
        <name>set_reversed</name>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Sets the reverse flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This will invert its movements and the values returned for its position.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>True reverses the motor, false is default</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_reversed(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>this<sp/>motor<sp/>reversed?<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_reversed();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1150" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gadbaeb8d34a1601a119e9d531440951a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_voltage_limit</definition>
        <argsstring>(const std::int32_t limit) const</argsstring>
        <name>set_voltage_limit</name>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Sets the voltage limit for the motor in Volts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage limit in Volts</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_voltage_limit(10000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>not<sp/>output<sp/>more<sp/>than<sp/>10<sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1180" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5a4a9f0564cf6573848fed77e433a751" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_zero_position</definition>
        <argsstring>(const double position) const</argsstring>
        <name>set_zero_position</name>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Sets the position for the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be the future reference point for the motor&apos;s &quot;absolute&quot; position.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The new reference position in its encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_zero_position(80);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>80<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1211" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga0555bbf0702e28db96a4e0e796898f20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t tare_position</definition>
        <argsstring>(void) const</argsstring>
        <name>tare_position</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets the &quot;absolute&quot; zero position of the motor to its current position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.tare_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1235" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaea6e734c75989d4f96734d5c70d39d5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int8_t</type>
        <definition>std::int8_t size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the number of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::int8_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1242" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga90b3c4a74ceaa8ba053bba7112e41619" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::int8_t &gt;</type>
        <definition>std::vector&lt;std::int8_t&gt; get_ports</definition>
        <argsstring>(void) const</argsstring>
        <name>get_ports</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the ports object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;std::int8_t&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1249" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaf5ff68faf5c3be85c507f9c4121aac60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operator+=</definition>
        <argsstring>(Motor_Group &amp;)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classpros_1_1v5_1_1Motor__Group" kindref="compound">Motor_Group</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Appends the other motor group reference to this motor group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1255" column="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaa30bb091517f26ecd080e8ebe5b9a98b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void append</definition>
        <argsstring>(Motor_Group &amp;)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="classpros_1_1v5_1_1Motor__Group" kindref="compound">Motor_Group</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Appends the other motor group reference to this motor group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1261" column="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga62f3c8a7e1902ae2cb2f4121fe5800eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void erase_port</definition>
        <argsstring>(std::int8_t port)</argsstring>
        <name>erase_port</name>
        <param>
          <type>std::int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Removes the port (and it&apos;s reversed ) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1268" column="6"/>
      </memberdef>
      <memberdef kind="friend" id="group__cpp-motors_1ga5a0dba40e3c1f831f6f4517a252998bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, pros::Motor_Group &amp;motor)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classpros_1_1v5_1_1Motor__Group" kindref="compound">pros::Motor_Group</ref> &amp;</type>
          <declname>motor</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format: <ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> [port: (motor port), brake mode: (brake mode), current draw: (current draw), current limit: (current limit), direction: (direction), efficiency: (efficiency), encoder units: (encoder units), gearing: (gearing), is over temp: (over temp), position: (position), reversed: (reversed boolean), temperature: (temperature), torque: (torque), voltage: (voltage)] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1280" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="group__cpp-motors_1gade3d5afddf0961ac868c51e39335ec29" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::int8_t &gt;</type>
        <definition>std::vector&lt;std::int8_t&gt; _ports</definition>
        <argsstring></argsstring>
        <name>_ports</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1283" column="13" bodyfile="pros/motors.hpp" bodystart="1283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__cpp-motors_1gaaa2888793236df9acfd711a11b991983" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool _reverse</definition>
        <argsstring></argsstring>
        <name>_reverse</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1284" column="6" bodyfile="pros/motors.hpp" bodystart="1284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__cpp-motors_1ga8cd368f2fd0d67ac03965f6170563256" prot="private" static="no" mutable="yes">
        <type><ref refid="classpros_1_1rtos_1_1Mutex" kindref="compound">pros::Mutex</ref></type>
        <definition>pros::Mutex _motor_group_mutex</definition>
        <argsstring></argsstring>
        <name>_motor_group_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1285" column="21" bodyfile="pros/motors.hpp" bodystart="1285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__cpp-motors_1ga3f3402d48a6541b9923abe2be4bc1e52" prot="private" static="no" mutable="no">
        <type><ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">pros::v5::Motor_Gear</ref></type>
        <definition>pros::v5::Motor_Gear _gearset</definition>
        <argsstring></argsstring>
        <name>_gearset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1286" column="22" bodyfile="pros/motors.hpp" bodystart="1286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__cpp-motors_1gaaa9541bf0ff8e87e5c2fc9461eb6371a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacepros_1_1v5_1a9d601c278c32b1e46d6dd506eebc0817" kindref="member">pros::v5::Motor_Units</ref></type>
        <definition>pros::v5::Motor_Units _encoder_units</definition>
        <argsstring></argsstring>
        <name>_encoder_units</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1287" column="23" bodyfile="pros/motors.hpp" bodystart="1287" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__cpp-motors_1ga32df8fb06602599c2ad99483a5a1d121" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::initializer_list&lt; std::int8_t &gt; ports, const Motor_Gears gearset, const bool reverse, const Motor_Units encoder_units)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::initializer_list&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a9d601c278c32b1e46d6dd506eebc0817" kindref="member">Motor_Units</ref></type>
          <declname>encoder_units</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> object for the given port and specifications. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>The motor&apos;s gearset </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>True reverses the motor, false is default </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoder_units</parametername>
</parameternamelist>
<parameterdescription>
<para>The motor&apos;s encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1,<sp/>E_MOTOR_GEARSET_18,<sp/>false,<sp/>E_MOTOR_ENCODER_DEGREES);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move(master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="132" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaf126adbdabf25a5abbb7c6409d0c0399" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::initializer_list&lt; std::int8_t &gt; ports, const Motor_Gears gearset, const bool reverse)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::initializer_list&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="135" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga195a4becb35a9b5222e47023ab95df26" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::initializer_list&lt; std::int8_t &gt; ports, const Motor_Gears gearset)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::initializer_list&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="137" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga86f38c340e323bd71cad0a7f7bd3ae89" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::initializer_list&lt; std::int8_t &gt; ports, const bool reverse)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::initializer_list&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="139" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gacbafba4d4939e30a5c591dfe3b6d5c84" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::initializer_list&lt; std::int8_t &gt; ports)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::initializer_list&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="141" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gae43ffce75b3ad75e6fff0c21bb52f37d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::vector&lt; std::int8_t &gt; ports, const Motor_Gears gearset, const bool reverse, const Motor_Units encoder_units)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::vector&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a9d601c278c32b1e46d6dd506eebc0817" kindref="member">Motor_Units</ref></type>
          <declname>encoder_units</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="143" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaa716468d7bb6557f0f7751f06901a591" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::vector&lt; std::int8_t &gt; ports, const Motor_Gears gearset, const bool reverse)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::vector&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="146" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gac0eb47f6f58622aae0dba1de4e2a7997" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::vector&lt; std::int8_t &gt; ports, const Motor_Gears gearset)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::vector&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ac34565743ac140efe50a681e99d1d870" kindref="member">Motor_Gears</ref></type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="148" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga4bb843341711fa84b0b23123efe5ba17" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::vector&lt; std::int8_t &gt; ports, const bool reverse)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::vector&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="150" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gabb4a823aec0b33ed69c8a0a8b1f31894" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor_Group</definition>
        <argsstring>(std::vector&lt; std::int8_t &gt; ports)</argsstring>
        <name>Motor_Group</name>
        <param>
          <type>std::vector&lt; std::int8_t &gt;</type>
          <declname>ports</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="152" column="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="group__cpp-motors_1ga799810c829b3e520a70c4e1e3c27efdb" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void push_motor_configuration</definition>
        <argsstring>(void) const</argsstring>
        <name>push_motor_configuration</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="1288" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Motor</label>
        <link refid="classpros_1_1v5_1_1Motor"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>Motor_Group</label>
        <link refid="classpros_1_1v5_1_1Motor__Group"/>
      </node>
    </inheritancegraph>
    <location file="pros/motors.hpp" line="97" column="18" bodyfile="pros/motors.hpp" bodystart="97" bodyend="1289"/>
    <listofallmembers>
      <member refid="group__cpp-motors_1gaaa9541bf0ff8e87e5c2fc9461eb6371a" prot="private" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>_encoder_units</name></member>
      <member refid="group__cpp-motors_1ga3f3402d48a6541b9923abe2be4bc1e52" prot="private" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>_gearset</name></member>
      <member refid="group__cpp-motors_1ga8cd368f2fd0d67ac03965f6170563256" prot="private" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>_motor_group_mutex</name></member>
      <member refid="group__cpp-motors_1gade3d5afddf0961ac868c51e39335ec29" prot="private" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>_ports</name></member>
      <member refid="group__cpp-motors_1gaaa2888793236df9acfd711a11b991983" prot="private" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>_reverse</name></member>
      <member refid="group__cpp-motors_1gaa30bb091517f26ecd080e8ebe5b9a98b" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>append</name></member>
      <member refid="group__cpp-motors_1ga3ac7359521b822775fbdc3a708f9e687" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>brake</name></member>
      <member refid="group__cpp-motors_1ga62f3c8a7e1902ae2cb2f4121fe5800eb" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>erase_port</name></member>
      <member refid="group__cpp-motors_1ga2298467acdd4cf33d7eced8e2f8268ad" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>every_is_over_current</name></member>
      <member refid="group__cpp-motors_1gad3b170c875eeab7abd7777a7ff915a92" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>every_is_over_temp</name></member>
      <member refid="group__cpp-motors_1ga8f6dd0d94f2ffd14fd5c0548e0ea6902" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>every_is_reversed</name></member>
      <member refid="group__cpp-motors_1gac7b4dcf86cdb27eeb013e9ba0da65f86" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_actual_velocity</name></member>
      <member refid="group__cpp-motors_1ga2e427acfd02bd06fcb9a8112eb0d54ca" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_actual_velocity</name></member>
      <member refid="group__cpp-motors_1gaf4e7a74edb8ab9df7f64ba3bd35104cf" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_brake_mode</name></member>
      <member refid="group__cpp-motors_1ga969c0a6e568a6af60072dbb2ef5a2ac4" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_brake_mode</name></member>
      <member refid="group__cpp-motors_1ga5720a781b7b4beeae824da95aae098ed" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_current_draw</name></member>
      <member refid="group__cpp-motors_1gab35d9a9d060886b5aedac14bb9880324" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_current_draw</name></member>
      <member refid="group__cpp-motors_1gaeedf9e3209b12128c93bdf6fc1c5793c" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_current_limit</name></member>
      <member refid="group__cpp-motors_1gaed7bcf42182d6b0ca8c1282b1d2ea8b2" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_current_limit</name></member>
      <member refid="group__cpp-motors_1ga5e22c8978eeab11d79846d44ce71a658" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_direction</name></member>
      <member refid="group__cpp-motors_1ga86e9b1078175e5dd1bba8beb02c39918" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_direction</name></member>
      <member refid="group__cpp-motors_1ga5fe48a04a707b27542b082b211cf134d" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_efficiency</name></member>
      <member refid="group__cpp-motors_1ga6c1abedf8323a80ea7c2193d3ded48fe" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_efficiency</name></member>
      <member refid="group__cpp-motors_1gaba2d1bf0b4b792e2e73163f965b6ef17" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_encoder_units</name></member>
      <member refid="group__cpp-motors_1ga42ff00fe52dbe2cd059fe465eb117178" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_encoder_units</name></member>
      <member refid="group__cpp-motors_1ga31ab82555993553a3e97396fdd159828" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_actual_velocity</name></member>
      <member refid="group__cpp-motors_1ga631d18edef12872cbd856d2e544475d5" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_brake_mode</name></member>
      <member refid="group__cpp-motors_1ga0aa4859092be7d68f5a74105b2e804b2" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_current_draw</name></member>
      <member refid="group__cpp-motors_1ga82c970340a41a1e8db3541b159972487" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_current_limit</name></member>
      <member refid="group__cpp-motors_1ga54fabac8705784e8a580e1ca87f4180c" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_direction</name></member>
      <member refid="group__cpp-motors_1ga2b70875534cc4d2f6f77007ffeb4c4e5" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_efficiency</name></member>
      <member refid="group__cpp-motors_1ga1be36d4c3e0146e3f26fe2507a255e84" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_encoder_units</name></member>
      <member refid="group__cpp-motors_1ga60c12e1fb44265f3246d27f89f8270fe" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_faults</name></member>
      <member refid="group__cpp-motors_1ga86f89ee60d53922732f19172c7b08d6e" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_flags</name></member>
      <member refid="group__cpp-motors_1ga2376f80b319801abc81d14ad185eca94" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_gearing</name></member>
      <member refid="group__cpp-motors_1ga9d0cdf4f83007babc306a804ce87ccfa" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_port</name></member>
      <member refid="group__cpp-motors_1ga0c91e93e656624a04d7554421f3bf873" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_position</name></member>
      <member refid="group__cpp-motors_1gaed6edc055fd89fdaa43a6652f01329c4" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_power</name></member>
      <member refid="group__cpp-motors_1ga52daf6728cd4df0cc4540f73c29718a3" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_raw_position</name></member>
      <member refid="group__cpp-motors_1gaaa87d390d75a311e1e568538fe818a83" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_target_position</name></member>
      <member refid="group__cpp-motors_1gadde511c62c7d16f9073b0bced8a0beb0" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_target_velocity</name></member>
      <member refid="group__cpp-motors_1ga52140c2aed0885bef17f9002cb2b53ec" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_temperature</name></member>
      <member refid="group__cpp-motors_1ga1141b1743f9104cc1174a09f569cb8ad" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_torque</name></member>
      <member refid="group__cpp-motors_1ga59e89961c48d4fdc9b5b1d1b8cde1dac" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_voltage</name></member>
      <member refid="group__cpp-motors_1ga527d88e4fe1db242e1428497d69e648a" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_every_voltage_limit</name></member>
      <member refid="group__cpp-motors_1ga2f054fdeb8598d4ac6933aa8eaba4848" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_faults</name></member>
      <member refid="group__cpp-motors_1ga94b840f3b3b5490e623370857ff831b4" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_faults</name></member>
      <member refid="group__cpp-motors_1ga5d121b6cd69527b2a8524b68c1599d68" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_flags</name></member>
      <member refid="group__cpp-motors_1gae8b3ba5afa497be7ca101c8e7e080665" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_flags</name></member>
      <member refid="group__cpp-motors_1ga7fbb5cb23b8d3d5aeb90bb573316757e" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_gearing</name></member>
      <member refid="group__cpp-motors_1gae9429fcaf4eed03c0c101bd1de821cc0" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_gearing</name></member>
      <member refid="group__cpp-motors_1ga90b3c4a74ceaa8ba053bba7112e41619" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_ports</name></member>
      <member refid="group__cpp-motors_1ga75df6d1bf98c67ff7f1887e09658f42f" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_position</name></member>
      <member refid="group__cpp-motors_1ga39d1af014298251059bfea291faa3dae" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_position</name></member>
      <member refid="group__cpp-motors_1ga179c822375c2fe243218f69f3e18237e" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_power</name></member>
      <member refid="group__cpp-motors_1ga790c106aa56e5035f7205e85d42591e3" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_power</name></member>
      <member refid="group__cpp-motors_1gadad2d06b4b7257e49e98bf64c299252a" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_raw_position</name></member>
      <member refid="group__cpp-motors_1ga756fa5125a0cde4673ba864f3c059b7d" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_raw_position</name></member>
      <member refid="group__cpp-motors_1ga0e05eaa2a892c44accbae47b773481a9" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_target_position</name></member>
      <member refid="group__cpp-motors_1gaf036f8d1397df486675451062a3a493d" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_target_position</name></member>
      <member refid="group__cpp-motors_1gaa6c4295d83cf68a2dbc6cac41a052750" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_target_velocity</name></member>
      <member refid="group__cpp-motors_1ga79c3404f946126a899bb3b1108a2eea6" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_target_velocity</name></member>
      <member refid="group__cpp-motors_1ga66496e94f84aa84dcec7b49f978cc664" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_temperature</name></member>
      <member refid="group__cpp-motors_1gafc2a313a8ba70da3db73bed95725982b" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_temperature</name></member>
      <member refid="group__cpp-motors_1ga5d292814315e3d8eb7cac6aba364d98e" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_torque</name></member>
      <member refid="group__cpp-motors_1ga54ee97b582b7f82b02120e34d5084b2b" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_torque</name></member>
      <member refid="group__cpp-motors_1gab79ef069a21c9d73b62badc49f11d767" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_voltage</name></member>
      <member refid="group__cpp-motors_1gac5332437708209a0458ab598245ebf70" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_voltage</name></member>
      <member refid="group__cpp-motors_1ga26d4c306d2e68dc8794f4c5e5819bebc" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_voltage_limit</name></member>
      <member refid="group__cpp-motors_1gaf096008871f815e614342ad1896342f6" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>get_voltage_limit</name></member>
      <member refid="group__cpp-motors_1gacdf7df56b77f1eb26f7d71dbd912b694" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>is_over_current</name></member>
      <member refid="group__cpp-motors_1ga8f45ca242099d11e13483a29dce9864e" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>is_over_current</name></member>
      <member refid="group__cpp-motors_1ga6dd9a8741f1794315d2d7321ac75e59d" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>is_over_temp</name></member>
      <member refid="group__cpp-motors_1ga70260d87897dfce00af0e33028602d5a" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>is_over_temp</name></member>
      <member refid="group__cpp-motors_1ga913a6f2e24397575d94179aa853a6eca" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>is_reversed</name></member>
      <member refid="group__cpp-motors_1ga188a2dafa32273b7a3ce6f2186b35110" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>is_reversed</name></member>
      <member refid="group__cpp-motors_1ga530807d30c58f7e098a65d14c039dc57" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>modify_profiled_velocity</name></member>
      <member refid="group__cpp-motors_1ga32df8fb06602599c2ad99483a5a1d121" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1gaf126adbdabf25a5abbb7c6409d0c0399" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1ga195a4becb35a9b5222e47023ab95df26" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1ga86f38c340e323bd71cad0a7f7bd3ae89" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1gacbafba4d4939e30a5c591dfe3b6d5c84" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1gae43ffce75b3ad75e6fff0c21bb52f37d" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1gaa716468d7bb6557f0f7751f06901a591" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1gac0eb47f6f58622aae0dba1de4e2a7997" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1ga4bb843341711fa84b0b23123efe5ba17" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1gabb4a823aec0b33ed69c8a0a8b1f31894" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>Motor_Group</name></member>
      <member refid="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>move</name></member>
      <member refid="group__cpp-motors_1ga6f6ed2b95a6d2e4e2f2473017dc42eec" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>move_absolute</name></member>
      <member refid="group__cpp-motors_1ga966302132cf4a74d3f2493b70764191b" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>move_relative</name></member>
      <member refid="group__cpp-motors_1ga589bce07656e7689a07ef4cef4e8152e" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>move_velocity</name></member>
      <member refid="group__cpp-motors_1ga3d490ebe9fc7bc4b1c80dad7e78a8cb4" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>move_voltage</name></member>
      <member refid="group__cpp-motors_1gaf5ff68faf5c3be85c507f9c4121aac60" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>operator+=</name></member>
      <member refid="group__cpp-motors_1ga5a0dba40e3c1f831f6f4517a252998bd" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__cpp-motors_1gad338fa6ea2f37d45d57763b176963445" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>operator=</name></member>
      <member refid="group__cpp-motors_1ga799810c829b3e520a70c4e1e3c27efdb" prot="private" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>push_motor_configuration</name></member>
      <member refid="group__cpp-motors_1ga262ad52ba7c6082865f7ff8c0a10d0fd" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_brake_mode</name></member>
      <member refid="group__cpp-motors_1gab0421c060ac8e6c1b1b2b70e28511619" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_brake_mode</name></member>
      <member refid="group__cpp-motors_1gacea9318adbdbb68bf859df3b5adb9cb9" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_current_limit</name></member>
      <member refid="group__cpp-motors_1ga5ea3c179e719829ac409d0534562e2c0" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_encoder_units</name></member>
      <member refid="group__cpp-motors_1ga6d847c917f2994c4b69e73bcc6128b98" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_encoder_units</name></member>
      <member refid="group__cpp-motors_1gaac4bfa684e62972fc894b40e7722252c" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_gearing</name></member>
      <member refid="group__cpp-motors_1gaa4b40010d01a3c38e0c0700512160d68" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_gearing</name></member>
      <member refid="group__cpp-motors_1ga024087665358ab9631f66de754176be4" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_reversed</name></member>
      <member refid="group__cpp-motors_1gadbaeb8d34a1601a119e9d531440951a5" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_voltage_limit</name></member>
      <member refid="group__cpp-motors_1ga5a4a9f0564cf6573848fed77e433a751" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>set_zero_position</name></member>
      <member refid="group__cpp-motors_1gaea6e734c75989d4f96734d5c70d39d5b" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>size</name></member>
      <member refid="group__cpp-motors_1ga0555bbf0702e28db96a4e0e796898f20" prot="public" virt="non-virtual"><scope>pros::v5::Motor_Group</scope><name>tare_position</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
