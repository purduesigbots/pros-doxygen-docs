<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1v5_1_1Gps" kind="class" language="C++" prot="public">
    <compoundname>pros::v5::Gps</compoundname>
    <basecompoundref refid="classpros_1_1v5_1_1Device" prot="public" virt="non-virtual">Device</basecompoundref>
    <includes refid="gps_8hpp" local="yes">gps.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__cpp-gps_1ga261f51bd4a7feb468a24a087f490b02e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="47" column="1" bodyfile="pros/gps.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa82632237daee7623ac933916d1c7407" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xInitial, double yInitial, double headingInitial)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="49" column="1" bodyfile="pros/gps.hpp" bodystart="49" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga29c04631f27c1286f94a65325f41a644" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xOffset, double yOffset)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="53" column="1" bodyfile="pros/gps.hpp" bodystart="53" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga47b6f08a37c3eb91a2b4bf89b22c346e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xInitial, double yInitial, double headingInitial, double xOffset, double yOffset)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="57" column="1" bodyfile="pros/gps.hpp" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga781bfdd4f6f3c9a606a0e2a305d36d34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t initialize_full</definition>
        <argsstring>(double xInitial, double yInitial, double headingInitial, double xOffset, double yOffset) const</argsstring>
        <name>initialize_full</name>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters, as well as its initial position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="85" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga48b81f1d12b0201c77ef1d78c546e0b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_offset</definition>
        <argsstring>(double xOffset, double yOffset) const</argsstring>
        <name>set_offset</name>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="104" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gac92982de29de3e3645f5a4fac6ef3835" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_offset</definition>
        <argsstring>(double *xOffset, double *yOffset) const</argsstring>
        <name>get_offset</name>
        <param>
          <type>double *</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Get the GPS&apos;s location relative to the center of turning/origin in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="122" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga3cc7f6e7185a2a59d545e0eefea126aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_position</definition>
        <argsstring>(double xInitial, double yInitial, double headingInitial) const</argsstring>
        <name>set_position</name>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <briefdescription>
<para>Sets the robot&apos;s location relative to the center of the field in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="142" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gafb4e63f82dffc58b0fb0569f73250ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_data_rate</definition>
        <argsstring>(std::uint32_t rate) const</argsstring>
        <name>set_data_rate</name>
        <param>
          <type>std::uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the GPS sensor&apos;s data rate in milliseconds, only applies to IMU on GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Data rate in milliseconds (Minimum: 5 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="158" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa0d4205475b9b1837a7a96bf81b895ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_error</definition>
        <argsstring>() const</argsstring>
        <name>get_error</name>
        <briefdescription>
<para>Get the possible RMS (Root Mean Squared) error in meters for GPS position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>Possible RMS (Root Mean Squared) error in meters for GPS position. If the operation failed, returns PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="172" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gae2b3d0997875c3075acb4d9570d5e974" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga0bebcb6a5be6dc96c165711cbe710aea" kindref="member">pros::gps_status_s_t</ref></type>
        <definition>virtual pros::gps_status_s_t get_status</definition>
        <argsstring>() const</argsstring>
        <name>get_status</name>
        <briefdescription>
<para>Gets the position and roll, yaw, and pitch of the GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>A struct (<ref refid="structgps__status__s__t" kindref="compound">gps_status_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="188" column="30"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga16a339b5f7729298dc79cf4971565043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_heading</definition>
        <argsstring>() const</argsstring>
        <name>get_heading</name>
        <briefdescription>
<para>Get the heading in [0,360) degree values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The heading in [0,360) degree values. If the operation failed, returns PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="203" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga7bd68d228dc3cbf251083b50284fa2f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_heading_raw</definition>
        <argsstring>() const</argsstring>
        <name>get_heading_raw</name>
        <briefdescription>
<para>Get the heading in the max double value and min double value scale. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The heading in [DOUBLE_MIN, DOUBLE_MAX] values. If the operation fails, returns PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="217" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga60630447c3ada8da63dd91e092eeb2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_rotation</definition>
        <argsstring>() const</argsstring>
        <name>get_rotation</name>
        <briefdescription>
<para>Gets the GPS sensor&apos;s elapsed rotation value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The elased heading in degrees. If the operation fails, returns PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="231" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gadea479bb033bc10c5864a32ed8d7fe0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_rotation</definition>
        <argsstring>(double target) const</argsstring>
        <name>set_rotation</name>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Set the GPS sensor&apos;s rotation value to target value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target rotation value to set rotation value to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="247" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa0267b91c2766fc53e5d8d382b1e3ba2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_rotation</definition>
        <argsstring>() const</argsstring>
        <name>tare_rotation</name>
        <briefdescription>
<para>Tare the GPS sensor&apos;s rotation value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="261" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gac4a33a837a2dd1fad50006b0d4c3e100" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga67a9badd3682634a75ad506fd87f7903" kindref="member">pros::gps_gyro_s_t</ref></type>
        <definition>virtual pros::gps_gyro_s_t get_gyro_rate</definition>
        <argsstring>() const</argsstring>
        <name>get_gyro_rate</name>
        <briefdescription>
<para>Get the GPS&apos;s raw gyroscope values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="275" column="28"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga400de3b554f4077e05aae5cd06f2e3bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga207fc83ba7d708bb8fe13855938469ef" kindref="member">pros::gps_accel_s_t</ref></type>
        <definition>virtual pros::gps_accel_s_t get_accel</definition>
        <argsstring>() const</argsstring>
        <name>get_accel</name>
        <briefdescription>
<para>Get the GPS&apos;s raw accelerometer values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS&apos;s port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="291" column="29"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gabfb87cfad20a0316415fddff116a1e8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacepros_1ad258d4c51629346fceac4679b3209ad9" kindref="member">pros::DeviceType</ref></type>
        <definition>pros::DeviceType get_type</definition>
        <argsstring>() const</argsstring>
        <name>get_type</name>
        <reimplements refid="classpros_1_1v5_1_1Device_1a9a4bb29be088c9622cbb960eda5966c8">get_type</reimplements>
        <briefdescription>
<para>Returns the type of device. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="305" column="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="group__cpp-gps_1gaf0de0a0195a05974cece8c81f713741b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const pros::Gps &amp;gps)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classpros_1_1v5_1_1Gps" kindref="compound">pros::Gps</ref> &amp;</type>
          <declname>gps</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format: <ref refid="classpros_1_1v5_1_1Gps" kindref="compound">Gps</ref> [port: gps._port, x: (x position), y: (y position), heading: (gps heading), rotation: (gps rotation)] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="299" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Device</label>
        <link refid="classpros_1_1v5_1_1Device"/>
      </node>
      <node id="1">
        <label>Gps</label>
        <link refid="classpros_1_1v5_1_1Gps"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Device</label>
        <link refid="classpros_1_1v5_1_1Device"/>
      </node>
      <node id="1">
        <label>Gps</label>
        <link refid="classpros_1_1v5_1_1Gps"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pros/gps.hpp" line="40" column="24" bodyfile="pros/gps.hpp" bodystart="40" bodyend="307"/>
    <listofallmembers>
      <member refid="group__cpp-gps_1ga400de3b554f4077e05aae5cd06f2e3bd" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_accel</name></member>
      <member refid="group__cpp-gps_1gaa0d4205475b9b1837a7a96bf81b895ba" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_error</name></member>
      <member refid="group__cpp-gps_1gac4a33a837a2dd1fad50006b0d4c3e100" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_gyro_rate</name></member>
      <member refid="group__cpp-gps_1ga16a339b5f7729298dc79cf4971565043" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_heading</name></member>
      <member refid="group__cpp-gps_1ga7bd68d228dc3cbf251083b50284fa2f4" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_heading_raw</name></member>
      <member refid="group__cpp-gps_1gac92982de29de3e3645f5a4fac6ef3835" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_offset</name></member>
      <member refid="classpros_1_1v5_1_1Device_1a33b5263b936248a074f77f1b5ec4fa45" prot="public" virt="non-virtual"><scope>pros::v5::Gps</scope><name>get_port</name></member>
      <member refid="group__cpp-gps_1ga60630447c3ada8da63dd91e092eeb2fd" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_rotation</name></member>
      <member refid="group__cpp-gps_1gae2b3d0997875c3075acb4d9570d5e974" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_status</name></member>
      <member refid="group__cpp-gps_1gabfb87cfad20a0316415fddff116a1e8f" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>get_type</name></member>
      <member refid="group__cpp-gps_1ga261f51bd4a7feb468a24a087f490b02e" prot="public" virt="non-virtual"><scope>pros::v5::Gps</scope><name>Gps</name></member>
      <member refid="group__cpp-gps_1gaa82632237daee7623ac933916d1c7407" prot="public" virt="non-virtual"><scope>pros::v5::Gps</scope><name>Gps</name></member>
      <member refid="group__cpp-gps_1ga29c04631f27c1286f94a65325f41a644" prot="public" virt="non-virtual"><scope>pros::v5::Gps</scope><name>Gps</name></member>
      <member refid="group__cpp-gps_1ga47b6f08a37c3eb91a2b4bf89b22c346e" prot="public" virt="non-virtual"><scope>pros::v5::Gps</scope><name>Gps</name></member>
      <member refid="group__cpp-gps_1ga781bfdd4f6f3c9a606a0e2a305d36d34" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>initialize_full</name></member>
      <member refid="group__cpp-gps_1gaf0de0a0195a05974cece8c81f713741b" prot="public" virt="non-virtual"><scope>pros::v5::Gps</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__cpp-gps_1gafb4e63f82dffc58b0fb0569f73250ff6" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>set_data_rate</name></member>
      <member refid="group__cpp-gps_1ga48b81f1d12b0201c77ef1d78c546e0b4" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>set_offset</name></member>
      <member refid="group__cpp-gps_1ga3cc7f6e7185a2a59d545e0eefea126aa" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>set_position</name></member>
      <member refid="group__cpp-gps_1gadea479bb033bc10c5864a32ed8d7fe0b" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>set_rotation</name></member>
      <member refid="group__cpp-gps_1gaa0267b91c2766fc53e5d8d382b1e3ba2" prot="public" virt="virtual"><scope>pros::v5::Gps</scope><name>tare_rotation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
