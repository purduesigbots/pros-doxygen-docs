<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1Task" kind="class" language="C++" prot="public">
    <compoundname>pros::Task</compoundname>
    <includes refid="rtos_8hpp" local="yes">rtos.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpros_1_1Task_1a56cc089e11e076028d73369e1ba36e30" prot="private" static="no" mutable="no">
        <type><ref refid="namespacepros_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t task</definition>
        <argsstring></argsstring>
        <name>task</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="387" column="8" bodyfile="pros/rtos.hpp" bodystart="387" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1Task_1af76b26c5282f35f6a25b9bd022c953cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Task</definition>
        <argsstring>(task_fn_t function, void *parameters=nullptr, std::uint32_t prio=TASK_PRIORITY_DEFAULT, std::uint16_t stack_depth=TASK_STACK_DEPTH_DEFAULT, const char *name=&quot;&quot;)</argsstring>
        <name>Task</name>
        <param>
          <type><ref refid="namespacepros_1aece0aa29b1f1538115228d2197239f98" kindref="member">task_fn_t</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>parameters</declname>
          <defval>nullptr</defval>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>prio</declname>
          <defval><ref refid="rtos_8h_1a3082a7e8f15691441dba683711bb823f" kindref="member">TASK_PRIORITY_DEFAULT</ref></defval>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>stack_depth</declname>
          <defval><ref refid="rtos_8h_1a9ffb33b9e3714ca949d9f45dde3cbf8f" kindref="member">TASK_STACK_DEPTH_DEFAULT</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the task entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that will be used as a parameter for the task being created. This memory should not typically come from stack, but rather from dynamically (i.e., malloc&apos;d) or statically allocated memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of words (i.e. 4 * stack_depth) available on the task&apos;s stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a8d6642f2de80d6445619fe395568085d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Task</definition>
        <argsstring>(task_fn_t function, void *parameters, const char *name)</argsstring>
        <name>Task</name>
        <param>
          <type><ref refid="namespacepros_1aece0aa29b1f1538115228d2197239f98" kindref="member">task_fn_t</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the task entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that will be used as a parameter for the task being created. This memory should not typically come from stack, but rather from dynamically (i.e., malloc&apos;d) or statically allocated memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1aa1ffe37a99acadd8b2b750e9a9f0bf14" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Task</definition>
        <argsstring>(F &amp;&amp;function, std::uint32_t prio=TASK_PRIORITY_DEFAULT, std::uint16_t stack_depth=TASK_STACK_DEPTH_DEFAULT, const char *name=&quot;&quot;)</argsstring>
        <name>Task</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>prio</declname>
          <defval><ref refid="rtos_8h_1a3082a7e8f15691441dba683711bb823f" kindref="member">TASK_PRIORITY_DEFAULT</ref></defval>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>stack_depth</declname>
          <defval><ref refid="rtos_8h_1a9ffb33b9e3714ca949d9f45dde3cbf8f" kindref="member">TASK_STACK_DEPTH_DEFAULT</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Callable object to use as entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of words (i.e. 4 * stack_depth) available on the task&apos;s stack. TASK_STACK_DEPTH_DEFAULT is typically sufficient. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="161" column="10" bodyfile="pros/rtos.hpp" bodystart="161" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1acbd0c9af4689e81baec06af05a16d29f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>Task</definition>
        <argsstring>(F &amp;&amp;function, const char *name)</argsstring>
        <name>Task</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Callable object to use as entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="187" column="1" bodyfile="pros/rtos.hpp" bodystart="187" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a966220f76c100aa2fbfdb221d032ddd9" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Task</definition>
        <argsstring>(task_t task)</argsstring>
        <name>Task</name>
        <param>
          <type><ref refid="namespacepros_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Create a C++ task object from a task handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>A task handle from <ref refid="namespacepros_1_1c_1ab7f6e243b717091fec2bac6405bd3d56" kindref="member">task_create()</ref> for which to create a <ref refid="classpros_1_1Task" kindref="compound">pros::Task</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="197" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a6511e9f551c6e751f3b553f6235e3080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpros_1_1Task" kindref="compound">Task</ref> &amp;</type>
        <definition>Task&amp; operator=</definition>
        <argsstring>(task_t in)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="namespacepros_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>in</declname>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>A task handle from <ref refid="namespacepros_1_1c_1ab7f6e243b717091fec2bac6405bd3d56" kindref="member">task_create()</ref> for which to create a <ref refid="classpros_1_1Task" kindref="compound">pros::Task</ref> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="211" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a1fcb45e5d2428352eb36b487d1d4eea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void remove</definition>
        <argsstring>()</argsstring>
        <name>remove</name>
        <briefdescription>
<para>Removes the <ref refid="classpros_1_1Task" kindref="compound">Task</ref> from the RTOS real time kernel&apos;s management. </para>
        </briefdescription>
        <detaileddescription>
<para>This task will be removed from all ready, blocked, suspended and event lists.</para>
<para>Memory dynamically allocated by the task is not automatically freed, and should be freed before the task is deleted. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="220" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a27921c9f94fc881b2a042320d8504731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_priority</definition>
        <argsstring>()</argsstring>
        <name>get_priority</name>
        <briefdescription>
<para>Gets the priority of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The priority of the task </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="227" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a685ad82d9352c7fe58deb1506ab6ab86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void set_priority</definition>
        <argsstring>(std::uint32_t prio)</argsstring>
        <name>set_priority</name>
        <param>
          <type>std::uint32_t</type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Sets the priority of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para>If the specified task&apos;s state is available to be scheduled (e.g. not blocked) and new priority is higher than the currently running task, a context switch may occur.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The new priority of the task </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="239" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a200ea249e657b61dd6a31fe60cbfe7e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_state</definition>
        <argsstring>()</argsstring>
        <name>get_state</name>
        <briefdescription>
<para>Gets the state of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The state of the task </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="246" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a3605b58fb45d69d498721bc2f2a14b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void suspend</definition>
        <argsstring>()</argsstring>
        <name>suspend</name>
        <briefdescription>
<para>Suspends the specified task, making it ineligible to be scheduled. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="251" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a41de8150eff044a237990c271d57ea27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resume</definition>
        <argsstring>()</argsstring>
        <name>resume</name>
        <briefdescription>
<para>Resumes the specified task, making it eligible to be scheduled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to resume </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="259" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1aa37ab6a2f004bfa2c956115231072736" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* get_name</definition>
        <argsstring>()</argsstring>
        <name>get_name</name>
        <briefdescription>
<para>Gets the name of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A pointer to the name of the task </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="266" column="12"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1af68d7f3aeaf718187f2a74d80b1a669f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>operator task_t</definition>
        <argsstring>()</argsstring>
        <name>operator task_t</name>
        <briefdescription>
<para>Convert this object to a C task_t handle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="271" column="10" bodyfile="pros/rtos.hpp" bodystart="271" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a3673829895566e7151ddbb6cdca82d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t notify</definition>
        <argsstring>()</argsstring>
        <name>notify</name>
        <briefdescription>
<para>Sends a simple notification to task and increments the notification counter. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><simplesect kind="return"><para>Always returns true. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="284" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a6c7abfff648dad193674fc432ad4840d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void join</definition>
        <argsstring>()</argsstring>
        <name>join</name>
        <briefdescription>
<para>Utilizes task notifications to wait until specified task is complete and deleted, then continues to execute the program. </para>
        </briefdescription>
        <detaileddescription>
<para>Analogous to std::thread::join in C++.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="295" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a8416442a23f42ca38044c9b2dec99316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t notify_ext</definition>
        <argsstring>(std::uint32_t value, notify_action_e_t action, std::uint32_t *prev_value)</argsstring>
        <name>notify_ext</name>
        <param>
          <type>std::uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacepros_1a42ea99b5e5d38da0b98154609cf6c570" kindref="member">notify_action_e_t</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>std::uint32_t *</type>
          <declname>prev_value</declname>
        </param>
        <briefdescription>
<para>Sends a notification to a task, optionally performing some action. </para>
        </briefdescription>
        <detaileddescription>
<para>Will also retrieve the value of the notification in the target task before modifying the notification value.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value used in performing the action </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to optionally perform on the receiving task&apos;s notification value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the previous value of the target task&apos;s notification, may be NULL</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dependent on the notification action. For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without needing to overwrite, 1 otherwise. For all other NOTIFY_ACTION values: always return 0 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="319" column="15"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a6b470af6702dc8031d6de86419c97b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool notify_clear</definition>
        <argsstring>()</argsstring>
        <name>notify_clear</name>
        <briefdescription>
<para>Clears the notification for a task. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><simplesect kind="return"><para>False if there was not a notification waiting, true if there was </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="347" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classpros_1_1Task_1a1d372f751d498ee7dc15b08700b70547" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepros_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>static task_t create</definition>
        <argsstring>(F &amp;&amp;function, std::uint32_t prio=TASK_PRIORITY_DEFAULT, std::uint16_t stack_depth=TASK_STACK_DEPTH_DEFAULT, const char *name=&quot;&quot;)</argsstring>
        <name>create</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>prio</declname>
          <defval><ref refid="rtos_8h_1a3082a7e8f15691441dba683711bb823f" kindref="member">TASK_PRIORITY_DEFAULT</ref></defval>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>stack_depth</declname>
          <defval><ref refid="rtos_8h_1a9ffb33b9e3714ca949d9f45dde3cbf8f" kindref="member">TASK_STACK_DEPTH_DEFAULT</ref></defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Callable object to use as entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of words (i.e. 4 * stack_depth) available on the task&apos;s stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="110" column="15" bodyfile="pros/rtos.hpp" bodystart="110" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a7eedd9988858633a57fd34b6059b07da" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class F</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepros_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>static task_t create</definition>
        <argsstring>(F &amp;&amp;function, const char *name)</argsstring>
        <name>create</name>
        <param>
          <type>F &amp;&amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Callable object to use as entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="136" column="15" bodyfile="pros/rtos.hpp" bodystart="136" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a6bc440ea23792294f5f41f00b3e4b5cd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classpros_1_1Task" kindref="compound">Task</ref></type>
        <definition>static Task current</definition>
        <argsstring>()</argsstring>
        <name>current</name>
        <briefdescription>
<para>Get the currently running <ref refid="classpros_1_1Task" kindref="compound">Task</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="202" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1a070827d25e8a07d2124578dcbd638dd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>static std::uint32_t notify_take</definition>
        <argsstring>(bool clear_on_exit, std::uint32_t timeout)</argsstring>
        <name>notify_take</name>
        <param>
          <type>bool</type>
          <declname>clear_on_exit</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits for a notification to be nonzero. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clear_on_exit</parametername>
</parameternamelist>
<parameterdescription>
<para>If true (1), then the notification value is cleared. If false (0), then the notification value is decremented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the amount of time to be spent waiting for a notification to occur.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the task&apos;s notification value before it is decremented or cleared </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="337" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1afd19e4a13c12c607998bcfc56768ddbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void delay</definition>
        <argsstring>(const std::uint32_t milliseconds)</argsstring>
        <name>delay</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Delays a task for a given number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not the best method to have a task execute code at predefined intervals, as the delay time is measured from when the delay is requested. To delay cyclically, use <ref refid="namespacepros_1_1c_1a151eaf730a10d101bff15013a76b9aa8" kindref="member">task_delay_until()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait (1000 milliseconds per second) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="359" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1afcfc4faff77d7ca1f4c080d1e8c508fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void delay_until</definition>
        <argsstring>(std::uint32_t *const prev_time, const std::uint32_t delta)</argsstring>
        <name>delay_until</name>
        <param>
          <type>std::uint32_t *const</type>
          <declname>prev_time</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Delays a task until a specified time. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by periodic tasks to ensure a constant execution frequency.</para>
<para>The task will be woken up at the time *prev_time + delta, and *prev_time will be updated to reflect the time at which the task will unblock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev_time</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the location storing the setpoint time. This should typically be initialized to the return value from <ref refid="namespacepros_1_1c_1aa247cd38039665b7ac4b0d0920b83c80" kindref="member">pros::millis()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait (1000 milliseconds per second) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="374" column="13"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Task_1ac7509321b5f36585f28da108d330b9ad" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>static std::uint32_t get_count</definition>
        <argsstring>()</argsstring>
        <name>get_count</name>
        <briefdescription>
<para>Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>A task that has been deleted, but not yet reaped by the idle task will also be included in the count. Tasks recently created may take one context switch to be counted.</para>
<para><simplesect kind="return"><para>The number of tasks that are currently being managed by the kernel. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="384" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pros/rtos.hpp" line="38" column="11" bodyfile="pros/rtos.hpp" bodystart="38" bodyend="388"/>
    <listofallmembers>
      <member refid="classpros_1_1Task_1a1d372f751d498ee7dc15b08700b70547" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>create</name></member>
      <member refid="classpros_1_1Task_1a7eedd9988858633a57fd34b6059b07da" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>create</name></member>
      <member refid="classpros_1_1Task_1a6bc440ea23792294f5f41f00b3e4b5cd" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>current</name></member>
      <member refid="classpros_1_1Task_1afd19e4a13c12c607998bcfc56768ddbc" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>delay</name></member>
      <member refid="classpros_1_1Task_1afcfc4faff77d7ca1f4c080d1e8c508fa" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>delay_until</name></member>
      <member refid="classpros_1_1Task_1ac7509321b5f36585f28da108d330b9ad" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>get_count</name></member>
      <member refid="classpros_1_1Task_1aa37ab6a2f004bfa2c956115231072736" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>get_name</name></member>
      <member refid="classpros_1_1Task_1a27921c9f94fc881b2a042320d8504731" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>get_priority</name></member>
      <member refid="classpros_1_1Task_1a200ea249e657b61dd6a31fe60cbfe7e5" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>get_state</name></member>
      <member refid="classpros_1_1Task_1a6c7abfff648dad193674fc432ad4840d" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>join</name></member>
      <member refid="classpros_1_1Task_1a3673829895566e7151ddbb6cdca82d99" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>notify</name></member>
      <member refid="classpros_1_1Task_1a6b470af6702dc8031d6de86419c97b54" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>notify_clear</name></member>
      <member refid="classpros_1_1Task_1a8416442a23f42ca38044c9b2dec99316" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>notify_ext</name></member>
      <member refid="classpros_1_1Task_1a070827d25e8a07d2124578dcbd638dd0" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>notify_take</name></member>
      <member refid="classpros_1_1Task_1af68d7f3aeaf718187f2a74d80b1a669f" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>operator task_t</name></member>
      <member refid="classpros_1_1Task_1a6511e9f551c6e751f3b553f6235e3080" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>operator=</name></member>
      <member refid="classpros_1_1Task_1a1fcb45e5d2428352eb36b487d1d4eea3" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>remove</name></member>
      <member refid="classpros_1_1Task_1a41de8150eff044a237990c271d57ea27" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>resume</name></member>
      <member refid="classpros_1_1Task_1a685ad82d9352c7fe58deb1506ab6ab86" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>set_priority</name></member>
      <member refid="classpros_1_1Task_1a3605b58fb45d69d498721bc2f2a14b1c" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>suspend</name></member>
      <member refid="classpros_1_1Task_1a56cc089e11e076028d73369e1ba36e30" prot="private" virt="non-virtual"><scope>pros::Task</scope><name>task</name></member>
      <member refid="classpros_1_1Task_1af76b26c5282f35f6a25b9bd022c953cf" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>Task</name></member>
      <member refid="classpros_1_1Task_1a8d6642f2de80d6445619fe395568085d" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>Task</name></member>
      <member refid="classpros_1_1Task_1aa1ffe37a99acadd8b2b750e9a9f0bf14" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>Task</name></member>
      <member refid="classpros_1_1Task_1acbd0c9af4689e81baec06af05a16d29f" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>Task</name></member>
      <member refid="classpros_1_1Task_1a966220f76c100aa2fbfdb221d032ddd9" prot="public" virt="non-virtual"><scope>pros::Task</scope><name>Task</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
