<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacepros_1_1screen" kind="namespace" language="C++">
    <compoundname>pros::screen</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepros_1_1screen_1acf5d93452112748c9480e355a6b9d84d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_pen</definition>
        <argsstring>(const std::uint32_t color)</argsstring>
        <name>set_pen</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Screen Graphical Display Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to display shapes on the v5 screen <linebreak/>
 Set the pen color for subsequent graphics operations</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> pen color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="62" column="19" declfile="pros/screen.hpp" declline="62" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1aba559f124030115ae1e1bcd5d7ab12ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_eraser</definition>
        <argsstring>(const std::uint32_t color)</argsstring>
        <name>set_eraser</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the eraser color for erasing and the current background. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> background color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="77" column="19" declfile="pros/screen.hpp" declline="77" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a16f5bad9cbd8aaf1de2f747bf4c88139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::get_pen</definition>
        <argsstring>()</argsstring>
        <name>get_pen</name>
        <briefdescription>
<para>Get the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> current pen color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="90" column="19" declfile="pros/screen.hpp" declline="90" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1ac589639dcad1320da01239fa2ee91895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::get_eraser</definition>
        <argsstring>()</argsstring>
        <name>get_eraser</name>
        <briefdescription>
<para>Get the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> current eraser color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="103" column="19" declfile="pros/screen.hpp" declline="103" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1addc37523f02666234b4f87dd5683f2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase</definition>
        <argsstring>()</argsstring>
        <name>erase</name>
        <briefdescription>
<para>Clear display with eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="115" column="19" declfile="pros/screen.hpp" declline="115" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1ada1288989c095a51803f3c3ec32f63de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::scroll</definition>
        <argsstring>(const std::int16_t start_line, const std::int16_t lines)</argsstring>
        <name>scroll</name>
        <param>
          <type>const std::int16_t</type>
          <declname>start_line</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines on the display upwards. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line from which scrolling will start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of lines to scroll up</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="130" column="19" declfile="pros/screen.hpp" declline="130" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a54598658b4962091f0dd30474d3c579f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::scroll_area</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1, std::int16_t lines)</argsstring>
        <name>scroll_area</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>std::int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines within a region on the display. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function behaves in the same way as <computeroutput>screen_scroll</computeroutput>, except that you specify a rectangular region within which to scroll lines instead of a start line.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the first corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the second corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of lines to scroll upwards</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="152" column="19" declfile="pros/screen.hpp" declline="152" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1ac8b195fde29a483de7fe34156067a92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::copy_area</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1, uint32_t *buf, const std::int32_t stride)</argsstring>
        <name>copy_area</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Copy a screen region (designated by a rectangle) from an off-screen buffer to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the first corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the second corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer containing screen data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer width in pixels, such that image size is stride-padding</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="173" column="19" declfile="pros/screen.hpp" declline="173" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a5d4493bbada5ff871a44461f0bc71a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_pixel</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y)</argsstring>
        <name>draw_pixel</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Draw a single pixel on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the pixel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="187" column="19" declfile="pros/screen.hpp" declline="187" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1ad0a321bd81d028d75feec7f6c1c13e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_pixel</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y)</argsstring>
        <name>erase_pixel</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Erase a pixel from the screen (Sets the location) </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the erased</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="201" column="19" declfile="pros/screen.hpp" declline="201" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1ae3bef1694428c775fd6dce977cbfa87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_line</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>draw_line</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a line on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="216" column="19" declfile="pros/screen.hpp" declline="216" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a22c2c2ac7ffe36b2946052170c526e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_line</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>erase_line</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a line on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="231" column="19" declfile="pros/screen.hpp" declline="231" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a02af0ec1e3430efbb5b66c4cfe92b735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>draw_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a rectangle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="246" column="19" declfile="pros/screen.hpp" declline="246" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a22199222d41fd80c81799fafe3fbec4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>erase_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a rectangle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="261" column="19" declfile="pros/screen.hpp" declline="261" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a596ee2c64e8d5cb8abcdab741490b884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::fill_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>fill_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Fill a rectangular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="277" column="19" declfile="pros/screen.hpp" declline="277" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a53c5922a466814315bf0c0150838b799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>draw_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Draw a circle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="292" column="19" declfile="pros/screen.hpp" declline="292" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a3ab31a7257cb0d6d0fb776703b17ede3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>erase_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Erase a circle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="307" column="19" declfile="pros/screen.hpp" declline="307" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a7037d11afb655cb5e2d7547d94c5f91a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::fill_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>fill_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Fill a circular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="323" column="19" declfile="pros/screen.hpp" declline="323" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a934a573ccd12290a30af83fbd7ba1140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pros::screen::print</definition>
        <argsstring>(pros::text_format_e_t txt_fmt, const std::int16_t line, const char *text, Params... args)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">pros::text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Screen Text Display Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to display text on the v5 screen <linebreak/>
 Print a formatted string to the screen, overwrite available for printing at location too.</para>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line number on which to print </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="344" column="10" bodyfile="pros/screen.hpp" bodystart="344" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1abca8d131b3c02dc5806c15e3f3f32bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pros::screen::print</definition>
        <argsstring>(pros::text_format_e_t txt_fmt, const std::int16_t x, const std::int16_t y, const char *text, Params... args)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">pros::text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="349" column="10" bodyfile="pros/screen.hpp" bodystart="349" bodyend="351"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a4e473df306276304a64218f5cb1afad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>screen_touch_status_s_t</type>
        <definition>screen_touch_status_s_t pros::screen::touch_status</definition>
        <argsstring>()</argsstring>
        <name>touch_status</name>
        <briefdescription>
<para>Screen Touch Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to access <linebreak/>
 information about screen touches <linebreak/>
 Gets the touch status of the last touch of the screen.</para>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> last_touch_e_t enum specifier that indicates the last touch status of the screen (E_TOUCH_EVENT_RELEASE, E_TOUCH_EVENT_PRESS, or E_TOUCH_EVENT_PRESS_AND_HOLD). <ref refid="structThis" kindref="compound">This</ref> will be released by default if no action was taken. If an error occured, the screen_touch_status_s_t will have its last_touch_e_t enum specifier set to E_TOUCH_ERR, and other values set to -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="368" column="29" declfile="pros/screen.hpp" declline="368" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1screen_1a8493a48e858cba5e4aa28f6889a79f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::touch_callback</definition>
        <argsstring>(touch_event_cb_fn_t cb, last_touch_e_t event_type)</argsstring>
        <name>touch_callback</name>
        <param>
          <type><ref refid="group__c-screen_1ga48080ef3890c1cc5698a1fbc59587d18" kindref="member">touch_event_cb_fn_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="group__c-screen_1ga8b8f74db7628fd14444f3da9505d333e" kindref="member">last_touch_e_t</ref></type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
<para>Assigns a callback function to be called when a certain touch event happens. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer to callback when event type happens </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Touch event that will trigger the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="383" column="19" declfile="pros/screen.hpp" declline="383" declcolumn="19"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pros/screen.hpp" line="26" column="16"/>
  </compounddef>
</doxygen>
