<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="apix_8h" kind="file" language="C++">
    <compoundname>apix.h</compoundname>
    <includes refid="api_8h" local="yes">api.h</includes>
    <includes local="yes">display/lvgl.h</includes>
    <includes refid="serial_8h" local="yes">pros/serial.h</includes>
    <includedby refid="kapi_8h" local="yes">pros/include/kapi.h</includedby>
    <incdepgraph>
      <node id="159">
        <label>stdbool.h</label>
      </node>
      <node id="170">
        <label>pros/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>display/lvgl.h</label>
      </node>
      <node id="161">
        <label>stdint.h</label>
      </node>
      <node id="163">
        <label>stdlib.h</label>
      </node>
      <node id="157">
        <label>errno.h</label>
      </node>
      <node id="155">
        <label>pros/include/pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="156" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
      </node>
      <node id="160">
        <label>stddef.h</label>
      </node>
      <node id="167">
        <label>pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="168">
        <label>pros/llemu.h</label>
        <link refid="llemu_8h"/>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
      </node>
      <node id="164">
        <label>unistd.h</label>
      </node>
      <node id="165">
        <label>pros/adi.h</label>
        <link refid="adi_8h"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="156">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="157" relation="include">
        </childnode>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
        <childnode refid="163" relation="include">
        </childnode>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
      </node>
      <node id="158">
        <label>math.h</label>
      </node>
      <node id="173">
        <label>pros/vision.h</label>
        <link refid="vision_8h"/>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="171">
        <label>pros/motors.h</label>
        <link refid="motors_8h"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>pros/serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>pros/colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="172">
        <label>pros/rtos.h</label>
        <link refid="rtos_8h"/>
        <childnode refid="159" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
      </node>
      <node id="162">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="176">
        <label>pros/include/kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="175">
        <label>pros/include/pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="176" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="apix_8h_1a597a3aaaad99225156c5940db91ed7e7" prot="public" static="no">
        <name>SERCTL_ACTIVATE</name>
        <initializer>10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to pass into serctl or fdctl that activates the stream identifier.</para><para>When used with serctl, the extra argument must be the little endian representation of the stream identifier (e.g. &quot;sout&quot; -&gt; 0x74756f73)</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial">https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial</ulink> to learn more. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="468" column="9" bodyfile="pros/include/pros/apix.h" bodystart="468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1aa07c3d6750babcc306ece8dd1b18ec26" prot="public" static="no">
        <name>SERCTL_DEACTIVATE</name>
        <initializer>11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to pass into serctl or fdctl that deactivates the stream identifier.</para><para>When used with serctl, the extra argument must be the little endian representation of the stream identifier (e.g. &quot;sout&quot; -&gt; 0x74756f73)</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial">https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial</ulink> to learn more. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="480" column="9" bodyfile="pros/include/pros/apix.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1a487ad68591182ba67ceb987f59f31fab" prot="public" static="no">
        <name>SERCTL_BLKWRITE</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to pass into fdctl that enables blocking writes for the file</para><para>The extra argument is not used with this action, provide any value (e.g. NULL) instead</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial">https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial</ulink> to learn more. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="491" column="9" bodyfile="pros/include/pros/apix.h" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1a48765184fb0f8084d9cebf9dcbc27da7" prot="public" static="no">
        <name>SERCTL_NOBLKWRITE</name>
        <initializer>13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to pass into fdctl that makes writes non-blocking for the file</para><para>The extra argument is not used with this action, provide any value (e.g. NULL) instead</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial">https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial</ulink> to learn more. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="502" column="9" bodyfile="pros/include/pros/apix.h" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1a20c46bffd0ef8939413f671a5ac92252" prot="public" static="no">
        <name>SERCTL_ENABLE_COBS</name>
        <initializer>14</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to pass into serctl that enables advanced stream multiplexing capabilities</para><para>The extra argument is not used with this action, provide any value (e.g. NULL) instead</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial">https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial</ulink> to learn more. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="514" column="9" bodyfile="pros/include/pros/apix.h" bodystart="514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1a9a50f0ab303c00138f09df10358b01c4" prot="public" static="no">
        <name>SERCTL_DISABLE_COBS</name>
        <initializer>15</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to pass into serctl that disables advanced stream multiplexing capabilities</para><para>The extra argument is not used with this action, provide any value (e.g. NULL) instead</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial">https://pros.cs.purdue.edu/v5/tutorials/topical/filesystem.html#serial</ulink> to learn more. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="526" column="9" bodyfile="pros/include/pros/apix.h" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1ad7e4ecbf8e36a784cdf4d245cd3c7d1d" prot="public" static="no">
        <name>DEVCTL_FIONREAD</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to check if there is data available from the Generic Serial Device</para><para>The extra argument is not used with this action, provide any value (e.g. NULL) instead </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="535" column="9" bodyfile="pros/include/pros/apix.h" bodystart="535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1a0089c4b06b9b75f4995256ca740f8ee2" prot="public" static="no">
        <name>DEVCTL_FIONWRITE</name>
        <initializer>18</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to check if there is space available in the Generic Serial Device&apos;s output buffer</para><para>The extra argument is not used with this action, provide any value (e.g. NULL) instead </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="544" column="9" bodyfile="pros/include/pros/apix.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="apix_8h_1a5ac3b151b46b5bfce1ec424b5fdc773b" prot="public" static="no">
        <name>DEVCTL_SET_BAUDRATE</name>
        <initializer>17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Action macro to set the Generic Serial Device&apos;s baudrate.</para><para>The extra argument is the baudrate. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="551" column="9" bodyfile="pros/include/pros/apix.h" bodystart="551" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45" prot="public" static="no">
        <name>v5_device_e</name>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45a929153c5f75689b1d957d06074b5fae8" prot="public">
          <name>E_DEVICE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45a467b42f234e0a690ffe8cb36136afd8a" prot="public">
          <name>E_DEVICE_MOTOR</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45a3eb6fb1ce8dc100664a443aab43a8a45" prot="public">
          <name>E_DEVICE_IMU</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45a42aa9d24679cd762cb25dea691bac391" prot="public">
          <name>E_DEVICE_RADIO</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45a32cb9f019c5d7a71a891efd00382f223" prot="public">
          <name>E_DEVICE_VISION</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45aaf0a34b25623b86363823c284133b1e1" prot="public">
          <name>E_DEVICE_ADI</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45ae9028479515ca4bf8d2eb125d2bdeacc" prot="public">
          <name>E_DEVICE_GENERIC</name>
          <initializer>= 129</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45a4a089975a8d1abaaf4c4bf0c35512cd3" prot="public">
          <name>E_DEVICE_UNDEFINED</name>
          <initializer>= 255</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Device Registration </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="369" column="1" bodyfile="pros/include/pros/apix.h" bodystart="369" bodyend="378"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* queue_t</definition>
        <argsstring></argsstring>
        <name>queue_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RTOS FACILITIES See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html">https://pros.cs.purdue.edu/v5/extended/multitasking.html</ulink> to learn more </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="46" column="1" bodyfile="pros/include/pros/apix.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* sem_t</definition>
        <argsstring></argsstring>
        <name>sem_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="47" column="1" bodyfile="pros/include/pros/apix.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="apix_8h_1a14eb6a35899083db8feb00eae4db826c" prot="public" static="no">
        <type>enum <ref refid="apix_8h_1aaba853cd2f7eed658c07dafd7cc41a45" kindref="member">v5_device_e</ref></type>
        <definition>typedef enum v5_device_e  v5_device_e_t</definition>
        <argsstring></argsstring>
        <name>v5_device_e_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Device Registration </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="378" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="apix_8h_1a038d6c9efb0a2295b0f2a55242b509f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool task_abort_delay</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_abort_delay</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unblocks a task in the Blocked state (e.g. waiting for a delay, on a semaphore, etc.).</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#abort_delay">https://pros.cs.purdue.edu/v5/extended/multitasking.html#abort_delay</ulink> for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1ac20573527d51718ab1f1189e69a5cd32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_notify_when_deleting</definition>
        <argsstring>(task_t target_task, task_t task_to_notify, uint32_t value, notify_action_e_t notify_action)</argsstring>
        <name>task_notify_when_deleting</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>target_task</declname>
        </param>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task_to_notify</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570" kindref="member">notify_action_e_t</ref></type>
          <declname>notify_action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Notify a task when a target task is being deleted.</para><para>This function will configure the PROS kernel to call task_notify_ext(task_to_notify, value, action, NULL) when target_task is deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target_task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task being watched for deletion </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task_to_notify</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to notify when target_task is deleted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to supply to task_notify_ext </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notify_action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to supply to task_notify_ext </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1ab32c3cf41f7dbde49dfac10c279347f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
        <definition>mutex_t mutex_recursive_create</definition>
        <argsstring>(void)</argsstring>
        <name>mutex_recursive_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a recursive mutex which can be locked recursively by the owner.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes">https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes</ulink> for details.</para><para><simplesect kind="return"><para>A newly created recursive mutex. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a67f8421ccecb58c807762494efe10c3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mutex_recursive_take</definition>
        <argsstring>(mutex_t mutex, uint32_t timeout)</argsstring>
        <name>mutex_recursive_take</name>
        <param>
          <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes a recursive mutex.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes">https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex handle created by mutex_recursive_create </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of time to wait before timing out</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the mutex was obtained, 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1aaf82d93cd652b6173372970018fdc02d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mutex_recursive_give</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_recursive_give</name>
        <param>
          <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gives a recursive mutex.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes">https://pros.cs.purdue.edu/v5/extended/multitasking.html#recursive_mutexes</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex handle created by mutex_recursive_create</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the mutex was obtained, 0 otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a34a373877e556e8f6829a49eddb08673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t mutex_get_owner</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_get_owner</name>
        <param>
          <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a handle to the current owner of a mutex.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra">https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex handle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the current task that owns the mutex, or NULL if the mutex isn&apos;t owned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a382f9b5dc6ba96dcecffdbd7f41d29ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
        <definition>sem_t sem_create</definition>
        <argsstring>(uint32_t max_count, uint32_t init_count)</argsstring>
        <name>sem_create</name>
        <param>
          <type>uint32_t</type>
          <declname>max_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>init_count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a counting sempahore.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores">https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum count value that can be reached. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial count value assigned to the new semaphore.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created semaphore. If an error occurred, NULL will be returned and errno can be checked for hints as to why sem_create failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a0dfcd8007428b4249931d0d78157490b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void sem_delete</definition>
        <argsstring>(sem_t sem)</argsstring>
        <name>sem_delete</name>
        <param>
          <type><ref refid="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deletes a semaphore (or binary semaphore)</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#semaphores">https://pros.cs.purdue.edu/v5/extended/multitasking.html#semaphores</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a83c9a6c93e3bfce8f36e3f32a6dc8c4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
        <definition>sem_t sem_binary_create</definition>
        <argsstring>(void)</argsstring>
        <name>sem_binary_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a binary semaphore.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking#.htmlbinary_semaphores">https://pros.cs.purdue.edu/v5/extended/multitasking#.htmlbinary_semaphores</ulink> for details.</para><para><simplesect kind="return"><para>A newly created semaphore. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1aee36a9729a21b6ad0de78985a16c4f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sem_wait</definition>
        <argsstring>(sem_t sem, uint32_t timeout)</argsstring>
        <name>sem_wait</name>
        <param>
          <type><ref refid="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Waits for the semaphore&apos;s value to be greater than 0. If the value is already greater than 0, this function immediately returns.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores">https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore to wait on </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait before the semaphore&apos;s becomes available. A timeout of 0 can be used to poll the sempahore. TIMEOUT_MAX can be used to block indefinitely.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the semaphore was successfully take, false otherwise. If false is returned, then errno is set with a hint about why the sempahore couldn&apos;t be taken. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1aa2048694c50246f193a40b7e00ed1756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool sem_post</definition>
        <argsstring>(sem_t sem)</argsstring>
        <name>sem_post</name>
        <param>
          <type><ref refid="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increments a semaphore&apos;s value.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores">https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore to post</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the value was incremented, false otherwise. If false is returned, then errno is set with a hint about why the semaphore couldn&apos;t be taken. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a5848486405814316a909912fa87f88dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t sem_get_count</definition>
        <argsstring>(sem_t sem)</argsstring>
        <name>sem_get_count</name>
        <param>
          <type><ref refid="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the current value of the semaphore.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra">https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>A semaphore handle</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current value of the semaphore (e.g. the number of resources available) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a552456842226c0ccf95e78907a3d6b2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
        <definition>queue_t queue_create</definition>
        <argsstring>(uint32_t length, uint32_t item_size)</argsstring>
        <name>queue_create</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>item_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a queue.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of items that the queue can contain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes each item in the queue will require.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to a newly created queue, or NULL if the queue cannot be created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1abf9a0689dac56d9110f8484463eae5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool queue_prepend</definition>
        <argsstring>(queue_t queue, const void *item, uint32_t timeout)</argsstring>
        <name>queue_prepend</name>
        <param>
          <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Posts an item to the front of a queue. The item is queued by copy, not by reference.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the item that will be placed on the queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the item was preprended, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a4519896ea7f4a5d2b3726fd172926a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool queue_append</definition>
        <argsstring>(queue_t queue, const void *item, uint32_t timeout)</argsstring>
        <name>queue_append</name>
        <param>
          <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Posts an item to the end of a queue. The item is queued by copy, not by reference.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the item that will be placed on the queue. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the item was preprended, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1abb333bbc086fdac6213b34a2e019dde3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool queue_peek</definition>
        <argsstring>(queue_t queue, void *const buffer, uint32_t timeout)</argsstring>
        <name>queue_peek</name>
        <param>
          <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Receive an item from a queue without removing the item from the queue.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer to which the received item will be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an item was copied into the buffer, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1aca6420b7d656b9559a7d366eb58b8e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool queue_recv</definition>
        <argsstring>(queue_t queue, void *const buffer, uint32_t timeout)</argsstring>
        <name>queue_recv</name>
        <param>
          <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Receive an item from the queue.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer to which the received item will be copied </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an item was copied into the buffer, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1add6f8fb018cef82d19fb85425de0e0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t queue_get_waiting</definition>
        <argsstring>(const queue_t queue)</argsstring>
        <name>queue_get_waiting</name>
        <param>
          <type>const <ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of messages stored in a queue.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of messages available in the queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1ab6a0fede293e948f2a5b43a44238aab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t queue_get_available</definition>
        <argsstring>(const queue_t queue)</argsstring>
        <name>queue_get_available</name>
        <param>
          <type>const <ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the number of spaces left in a queue.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of spaces available in the queue. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="338" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a087fa58218ad877e85bcc2fe20b87595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void queue_delete</definition>
        <argsstring>(queue_t queue)</argsstring>
        <name>queue_delete</name>
        <param>
          <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a queue.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue handle to delete </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1ae6146a3577b65ec02e78d0d9498db7e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void queue_reset</definition>
        <argsstring>(queue_t queue)</argsstring>
        <name>queue_reset</name>
        <param>
          <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets a queue to an empty state</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue handle to reset </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1afdda25e2647e8606131e35ced80de099" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int registry_bind_port</definition>
        <argsstring>(uint8_t port, v5_device_e_t device_type)</argsstring>
        <name>registry_bind_port</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="apix_8h_1a14eb6a35899083db8feb00eae4db826c" kindref="member">v5_device_e_t</ref></type>
          <declname>device_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="399" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a0092551f3eff99f31535a657d2832a86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int registry_unbind_port</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>registry_unbind_port</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a962daefd6f45a8def6ff00802a23fbff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t serctl</definition>
        <argsstring>(const uint32_t action, void *const extra_arg)</argsstring>
        <name>serctl</name>
        <param>
          <type>const uint32_t</type>
          <declname>action</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>extra_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Filesystem Control settings of the serial driver.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to perform on the serial driver. See the SERCTL_* macros for details on the different actions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument to pass in based on the action </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="apix_8h_1a8287028141d5265105a25d899280a8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t fdctl</definition>
        <argsstring>(int file, const uint32_t action, void *const extra_arg)</argsstring>
        <name>fdctl</name>
        <param>
          <type>int</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>action</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>extra_arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Control settings of the microSD card driver.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to perform on the microSD card driver. See the USDCTL_* macros for details on the different actions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument to pass in based on the action Control settings of the way the file&apos;s driver treats the file</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid file descriptor number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to perform on the file&apos;s driver. See the <emphasis>CTL_</emphasis> macros for details on the different actions. Note that the action passed in must match the correct driver (e.g. don&apos;t perform a SERCTL_* action on a microSD card file) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument to pass in based on the action </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/apix.h" line="456" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>PROS Extended API header</para><para>Contains additional declarations for use by advaned users of PROS. These functions do not typically have as much error handling or require deeper knowledge of real time operating systems.</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/extended/api.html">https://pros.cs.purdue.edu/v5/extended/api.html</ulink> to learn more.</para><para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para><para>Copyright (c) 2017-2020, Purdue University ACM SIGBots. All rights reserved.</para><para>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>    </detaileddescription>
    <location file="pros/include/pros/apix.h"/>
  </compounddef>
</doxygen>
