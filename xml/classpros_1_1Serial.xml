<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1Serial" kind="class" language="C++" prot="public">
    <compoundname>pros::Serial</compoundname>
    <includes refid="serial_8hpp" local="yes">serial.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpros_1_1Serial_1a16b806c98fffb4fd7235419ef22ac101" prot="private" static="no" mutable="no">
        <type>const std::uint8_t</type>
        <definition>const std::uint8_t _port</definition>
        <argsstring></argsstring>
        <name>_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="221" column="20" bodyfile="pros/serial.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1Serial_1aaaa8797c93e7c2cc67cab525db7500e1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Serial</definition>
        <argsstring>(std::uint8_t port, std::int32_t baudrate)</argsstring>
        <name>Serial</name>
        <param>
          <type>std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>std::int32_t</type>
          <declname>baudrate</declname>
        </param>
        <briefdescription>
<para>Creates a <ref refid="classpros_1_1Serial" kindref="compound">Serial</ref> object for the given port and specifications. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>The baudrate to run the port at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="41" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1ae3a4d83e68ba8d52ee5b6325b7ebdc8c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Serial</definition>
        <argsstring>(std::uint8_t port)</argsstring>
        <name>Serial</name>
        <param>
          <type>std::uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="43" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1ab1abb2da4d95668bc4676f3bfe6d9823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_baudrate</definition>
        <argsstring>(std::int32_t baudrate) const</argsstring>
        <name>set_baudrate</name>
        <param>
          <type>std::int32_t</type>
          <declname>baudrate</declname>
        </param>
        <briefdescription>
<para><ref refid="classpros_1_1Serial" kindref="compound">Serial</ref> communication functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to communicate using UART over RS485 <linebreak/>
 Sets the baudrate for the serial port to operate at.</para>
<para>This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>The baudrate to operate at</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="65" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1ac9bc8885aae50a580b81c4aa7ba4d0c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t flush</definition>
        <argsstring>() const</argsstring>
        <name>flush</name>
        <briefdescription>
<para>Clears the internal input and output FIFO buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be useful to reset state and remove old, potentially unneeded data from the input FIFO buffer or to cancel sending any data in the output FIFO buffer.</para>
<para><simplesect kind="note"><para>This function does not cause the data in the output buffer to be written, it simply clears the internal buffers. Unlike stdout, generic serial does not use buffered IO (the FIFO buffers are written as soon as possible).</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="87" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1a7c8834e366baf9d952e02acc6207d30a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_read_avail</definition>
        <argsstring>() const</argsstring>
        <name>get_read_avail</name>
        <briefdescription>
<para>Returns the number of bytes available to be read in the the port&apos;s FIFO input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function does not actually read any bytes, is simply returns the number of bytes available to be read.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><simplesect kind="return"><para>The number of bytes avaliable to be read or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="104" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1a0e5d59953d04d311664fcf1350ce811a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_write_free</definition>
        <argsstring>() const</argsstring>
        <name>get_write_free</name>
        <briefdescription>
<para>Returns the number of bytes free in the port&apos;s FIFO output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function does not actually write any bytes, is simply returns the number of bytes free in the port&apos;s buffer.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><simplesect kind="return"><para>The number of bytes free or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="120" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1a4b1f34f89e0f448750a682c1fd957556" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t get_port</definition>
        <argsstring>() const</argsstring>
        <name>get_port</name>
        <briefdescription>
<para>Gets the port number of the serial port. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The serial port&apos;s port number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="127" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1a381db98d8d974e958591b4372db01def" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t peek_byte</definition>
        <argsstring>() const</argsstring>
        <name>peek_byte</name>
        <briefdescription>
<para>Reads the next byte avaliable in the port&apos;s input buffer without removing it. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><simplesect kind="return"><para>The next byte avaliable to be read, -1 if none are available, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="140" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1aa1aab0fd9f25fdad8cd00b298ff2d696" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t read_byte</definition>
        <argsstring>() const</argsstring>
        <name>read_byte</name>
        <briefdescription>
<para>Reads the next byte avaliable in the port&apos;s input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><simplesect kind="return"><para>The next byte avaliable to be read, -1 if none are available, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="153" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1ac445067dd822a3e075ed904782334e89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t read</definition>
        <argsstring>(std::uint8_t *buffer, std::int32_t length) const</argsstring>
        <name>read</name>
        <param>
          <type>std::uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::int32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Reads up to the next length bytes from the port&apos;s input buffer and places them in the user supplied buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will only return bytes that are currently avaliable to be read and will not block waiting for any to arrive.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The location to place the data read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="175" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1a39d1bd8d3f51282397ecd816c6ef11d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t write_byte</definition>
        <argsstring>(std::uint8_t buffer) const</argsstring>
        <name>write_byte</name>
        <param>
          <type>std::uint8_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Write the given byte to the port&apos;s output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Data in the port&apos;s output buffer is written to the serial port as soon as possible on a FIFO basis and can not be done manually by the user.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port. EIO - Serious internal write error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="195" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Serial_1ad2230964ecffe14e7a57aa3078be9cce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t write</definition>
        <argsstring>(std::uint8_t *buffer, std::int32_t length) const</argsstring>
        <name>write</name>
        <param>
          <type>std::uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::int32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Writes up to length bytes from the user supplied buffer to the port&apos;s output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Data in the port&apos;s output buffer is written to the serial port as soon as possible on a FIFO basis and can not be done manually by the user.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port. EIO - Serious internal write error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.hpp" line="218" column="22"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pros/serial.hpp" line="26" column="13" bodyfile="pros/serial.hpp" bodystart="26" bodyend="222"/>
    <listofallmembers>
      <member refid="classpros_1_1Serial_1a16b806c98fffb4fd7235419ef22ac101" prot="private" virt="non-virtual"><scope>pros::Serial</scope><name>_port</name></member>
      <member refid="classpros_1_1Serial_1ac9bc8885aae50a580b81c4aa7ba4d0c3" prot="public" virt="virtual"><scope>pros::Serial</scope><name>flush</name></member>
      <member refid="classpros_1_1Serial_1a4b1f34f89e0f448750a682c1fd957556" prot="public" virt="non-virtual"><scope>pros::Serial</scope><name>get_port</name></member>
      <member refid="classpros_1_1Serial_1a7c8834e366baf9d952e02acc6207d30a" prot="public" virt="virtual"><scope>pros::Serial</scope><name>get_read_avail</name></member>
      <member refid="classpros_1_1Serial_1a0e5d59953d04d311664fcf1350ce811a" prot="public" virt="virtual"><scope>pros::Serial</scope><name>get_write_free</name></member>
      <member refid="classpros_1_1Serial_1a381db98d8d974e958591b4372db01def" prot="public" virt="virtual"><scope>pros::Serial</scope><name>peek_byte</name></member>
      <member refid="classpros_1_1Serial_1ac445067dd822a3e075ed904782334e89" prot="public" virt="virtual"><scope>pros::Serial</scope><name>read</name></member>
      <member refid="classpros_1_1Serial_1aa1aab0fd9f25fdad8cd00b298ff2d696" prot="public" virt="virtual"><scope>pros::Serial</scope><name>read_byte</name></member>
      <member refid="classpros_1_1Serial_1aaaa8797c93e7c2cc67cab525db7500e1" prot="public" virt="non-virtual"><scope>pros::Serial</scope><name>Serial</name></member>
      <member refid="classpros_1_1Serial_1ae3a4d83e68ba8d52ee5b6325b7ebdc8c" prot="public" virt="non-virtual"><scope>pros::Serial</scope><name>Serial</name></member>
      <member refid="classpros_1_1Serial_1ab1abb2da4d95668bc4676f3bfe6d9823" prot="public" virt="virtual"><scope>pros::Serial</scope><name>set_baudrate</name></member>
      <member refid="classpros_1_1Serial_1ad2230964ecffe14e7a57aa3078be9cce" prot="public" virt="virtual"><scope>pros::Serial</scope><name>write</name></member>
      <member refid="classpros_1_1Serial_1a39d1bd8d3f51282397ecd816c6ef11d9" prot="public" virt="virtual"><scope>pros::Serial</scope><name>write_byte</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
