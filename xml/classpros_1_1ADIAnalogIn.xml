<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1ADIAnalogIn" kind="class" language="C++" prot="public">
    <compoundname>pros::ADIAnalogIn</compoundname>
    <basecompoundref refid="classpros_1_1ADIPort" prot="private" virt="non-virtual">ADIPort</basecompoundref>
    <derivedcompoundref refid="classpros_1_1ADIPotentiometer" prot="public" virt="non-virtual">ADIPotentiometer</derivedcompoundref>
    <includes refid="adi_8hpp" local="yes">adi.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1ADIAnalogIn_1a399da39531465667a539555d0afa953d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>ADIAnalogIn</definition>
        <argsstring>(std::uint8_t adi_port)</argsstring>
        <name>ADIAnalogIn</name>
        <param>
          <type>std::uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as an Analog Input. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="128" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIAnalogIn_1a2a26928e153eb08641528b46c1da1791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ADIAnalogIn</definition>
        <argsstring>(ext_adi_port_pair_t port_pair)</argsstring>
        <name>ADIAnalogIn</name>
        <param>
          <type><ref refid="namespacepros_1aa8b90563c470741ebd760aeacfd90599" kindref="member">ext_adi_port_pair_t</ref></type>
          <declname>port_pair</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port on an adi expander to act as an Analog Input. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair of the smart port number (from 1-22) and the ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIAnalogIn_1a2eb97b12f7be6fd44db629dcfe9a4fc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t calibrate</definition>
        <argsstring>() const</argsstring>
        <name>calibrate</name>
        <briefdescription>
<para>Calibrates the analog sensor on the specified port and returns the new calibration value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the <ref refid="classpros_1_1ADIAnalogIn_1a074cb99ddc5bcf9b461c204a5a5fad2c" kindref="member">pros::ADIAnalogIn::get_value_calibrated()</ref> and <ref refid="classpros_1_1ADIAnalogIn_1a2d4a70c5c23555ddf8ea24318d7a8731" kindref="member">pros::ADIAnalogIn::get_value_calibrated_HR()</ref> functions. These functions will return the difference between this value and the current sensor value when called.</para>
<para>Do not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as an analog input</para>
<para><simplesect kind="return"><para>The average sensor value computed by this function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="169" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIAnalogIn_1a074cb99ddc5bcf9b461c204a5a5fad2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value_calibrated</definition>
        <argsstring>() const</argsstring>
        <name>get_value_calibrated</name>
        <briefdescription>
<para>Gets the 12 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classpros_1_1ADIAnalogIn_1a2eb97b12f7be6fd44db629dcfe9a4fc4" kindref="member">pros::ADIAnalogIn::calibrate()</ref> function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use <ref refid="classpros_1_1ADIAnalogIn_1a2d4a70c5c23555ddf8ea24318d7a8731" kindref="member">pros::ADIAnalogIn::get_value_calibrated_HR()</ref> instead.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as an analog input</para>
<para><simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -4095 to 4095 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="186" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIAnalogIn_1a2d4a70c5c23555ddf8ea24318d7a8731" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value_calibrated_HR</definition>
        <argsstring>() const</argsstring>
        <name>get_value_calibrated_HR</name>
        <briefdescription>
<para>Gets the 16 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classpros_1_1ADIAnalogIn_1a2eb97b12f7be6fd44db629dcfe9a4fc4" kindref="member">pros::ADIAnalogIn::calibrate()</ref> function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.</para>
<para>The value returned actually has 16 bits of &quot;precision&quot;, even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as an analog input</para>
<para><simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -16384 to 16384 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="208" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIAnalogIn_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
<para>Gets the 12-bit value of the specified port. </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is undefined if the analog pin has been switched to a different mode.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as an analog input</para>
<para><simplesect kind="return"><para>The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="224" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>ADIPort</label>
        <link refid="classpros_1_1ADIPort"/>
      </node>
      <node id="1">
        <label>ADIAnalogIn</label>
        <link refid="classpros_1_1ADIAnalogIn"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>ADIPotentiometer</label>
        <link refid="classpros_1_1ADIPotentiometer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>ADIPort</label>
        <link refid="classpros_1_1ADIPort"/>
      </node>
      <node id="1">
        <label>ADIAnalogIn</label>
        <link refid="classpros_1_1ADIAnalogIn"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pros/adi.hpp" line="112" column="34" bodyfile="pros/adi.hpp" bodystart="112" bodyend="225"/>
    <listofallmembers>
      <member refid="classpros_1_1ADIAnalogIn_1a399da39531465667a539555d0afa953d" prot="public" virt="non-virtual"><scope>pros::ADIAnalogIn</scope><name>ADIAnalogIn</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a2a26928e153eb08641528b46c1da1791" prot="public" virt="non-virtual"><scope>pros::ADIAnalogIn</scope><name>ADIAnalogIn</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a2eb97b12f7be6fd44db629dcfe9a4fc4" prot="public" virt="non-virtual"><scope>pros::ADIAnalogIn</scope><name>calibrate</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" virt="non-virtual"><scope>pros::ADIAnalogIn</scope><name>get_value</name></member>
      <member refid="classpros_1_1ADIPort_1a60987c8e4946650cf9aa40f8e8345f01" prot="private" virt="non-virtual" ambiguityscope="pros::ADIPort::"><scope>pros::ADIAnalogIn</scope><name>get_value</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a074cb99ddc5bcf9b461c204a5a5fad2c" prot="public" virt="non-virtual"><scope>pros::ADIAnalogIn</scope><name>get_value_calibrated</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a2d4a70c5c23555ddf8ea24318d7a8731" prot="public" virt="non-virtual"><scope>pros::ADIAnalogIn</scope><name>get_value_calibrated_HR</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
