<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-motors" kind="group">
    <compoundname>cpp-motors</compoundname>
    <title>Motors C++ API</title>
    <innerfile refid="motors_8hpp">motors.hpp</innerfile>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-motors_1ga1e122f68ae9831149e1f271e49a2503b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor</definition>
        <argsstring>(const std::int8_t port, const pros::v5::MotorGears gearset=pros::v5::MotorGears::invalid, const pros::v5::MotorUnits encoder_units=pros::v5::MotorUnits::invalid)</argsstring>
        <name>Motor</name>
        <param>
          <type>const std::int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8d" kindref="member">pros::v5::MotorGears</ref></type>
          <declname>gearset</declname>
          <defval><ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8dafedb2d84cafe20862cb4399751a8a7e3" kindref="member">pros::v5::MotorGears::invalid</ref></defval>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ab231d92d02eadc905cd4fb268568d9b2" kindref="member">pros::v5::MotorUnits</ref></type>
          <declname>encoder_units</declname>
          <defval>pros::v5::MotorUnits::invalid</defval>
        </param>
        <briefdescription>
<para>Constructs a new <ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors. A reversed motor will reverse the input or output movement functions and movement related telemetry in order to produce consistant behavior with non-reversed motors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>= <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8da9f27410725ab8cc8854a2769c7a516b8" kindref="member">pros::v5::MotorGears::green</ref> Optional parameter for the gearset for the motor. Does not explicitly set the gearset if not specified or if the gearset is invalid</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoder_units</parametername>
</parameternamelist>
<parameterdescription>
<para>= pros::v5::MotorUnits::degrees Optional parameter for the encoder units of the motor Does not explicitly set the gearset if not specified or if the gearset is invalid</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Motor<sp/>first_motor(1);<sp/>//Creates<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>1<sp/>without<sp/>altering<sp/>gearset<sp/>or<sp/>encoder<sp/>units</highlight></codeline>
<codeline><highlight class="normal"><sp/>Motor<sp/>reversed_motor(-2);<sp/>//Creates<sp/>a<sp/>reversed<sp/>motor<sp/>on<sp/>port<sp/>1<sp/>port<sp/>1<sp/>without<sp/>altering<sp/>gearset<sp/>or<sp/>encoder<sp/>units</highlight></codeline>
<codeline><highlight class="normal"><sp/>Motor<sp/>blue_motor(3,<sp/>pros::v5::MotorGears::blue);<sp/>//Creates<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>3<sp/>with<sp/>blue<sp/>gear<sp/>set</highlight></codeline>
<codeline><highlight class="normal"><sp/>Motor<sp/>rotations_motor(4,<sp/>pros::v5::MotorGears::green,<sp/>pros::v5::MotorUnits::rotations);<sp/>port<sp/>4<sp/>w/<sp/>rotations</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga64bdbb18a2a6020c45dbaaad25d216b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Motor</definition>
        <argsstring>(const Device &amp;device)</argsstring>
        <name>Motor</name>
        <param>
          <type>const Device &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="77" column="1" bodyfile="pros/motors.hpp" bodystart="77" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga4dceeada7f369a3dd25a4944019e0631" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move</definition>
        <argsstring>(std::int32_t voltage) const</argsstring>
        <name>move</name>
        <reimplements refid="group__cpp-abstract-motor_1ga2affe67be5ec0f6c6ac406176777128c">move</reimplements>
        <param>
          <type>std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -127 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__c-motors_1gac76e46064191f91bf2546335caccf6b5" kindref="member">motor_move()</ref>.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>Motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move(master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="109" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga6f6ed2b95a6d2e4e2f2473017dc42eec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_absolute</definition>
        <argsstring>(const double position, const std::int32_t velocity) const</argsstring>
        <name>move_absolute</name>
        <reimplements refid="group__cpp-abstract-motor_1ga6d274aaeea2b1f0eacd4199a607c5460">move_absolute</reimplements>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the target absolute position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the position of the motor when initialized or the position when it was most recently reset with <ref refid="group__cpp-motor-configuration_1gaef47e9be34d06e6a1dc536454838f600" kindref="member">pros::Motor::set_zero_position()</ref>.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The absolute position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.tare_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="155" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga966302132cf4a74d3f2493b70764191b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_relative</definition>
        <argsstring>(const double position, const std::int32_t velocity) const</argsstring>
        <name>move_relative</name>
        <reimplements refid="group__cpp-abstract-motor_1ga570e69a0d12d8f7c2fa372cf3889d1e5">move_relative</reimplements>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the relative target position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the current position of the motor as given in <ref refid="group__c-motors_1ga113fbf1950304b3a56705722b283c3a1" kindref="member">pros::Motor::motor_get_position()</ref>. Providing 10.0 as the position parameter would result in the motor moving clockwise 10 units (counter clockwise if reversed), no matter what the current position is.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_relative(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_relative(100,<sp/>100);<sp/>//<sp/>Also<sp/>moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>205)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>195)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="196" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga589bce07656e7689a07ef4cef4e8152e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_velocity</definition>
        <argsstring>(const std::int32_t velocity) const</argsstring>
        <name>move_velocity</name>
        <reimplements refid="group__cpp-abstract-motor_1gaf9e6c6b881edf9a214f7beb9a65016e2">move_velocity</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the velocity for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This velocity corresponds to different actual speeds depending on the gearset used for the motor. This results in a range of +-100 for E_MOTOR_GEARSET_36, +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity is held with PID to ensure consistent speed, as opposed to setting the motor&apos;s voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from -+-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_velocity(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>100<sp/>RPM<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_velocity(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="228" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga3d490ebe9fc7bc4b1c80dad7e78a8cb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_voltage</definition>
        <argsstring>(const std::int32_t voltage) const</argsstring>
        <name>move_voltage</name>
        <reimplements refid="group__cpp-abstract-motor_1gaa624ba8db4d6f6bfef33a6310a962ec6">move_voltage</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the output voltage for the motor from -12000 to 12000 in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage value from -12000 to 12000</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_voltage(12000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>max<sp/>voltage<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_voltage(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="254" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga3ac7359521b822775fbdc3a708f9e687" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t brake</definition>
        <argsstring>(void) const</argsstring>
        <name>brake</name>
        <reimplements refid="group__cpp-abstract-motor_1gacd632653366f285fcadaeef24874f50b">brake</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Stops the motor using the currently configured brake mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets motor velocity to zero, which will cause it to act according to the set brake mode. If brake mode is set to MOTOR_BRAKE_HOLD, this function may behave differently than calling move_absolute(0) or motor_move_relative(0).</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal"><sp/>void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Motor<sp/>motor(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_voltage(12000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>max<sp/>voltage<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.brake();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="281" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga530807d30c58f7e098a65d14c039dc57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t modify_profiled_velocity</definition>
        <argsstring>(const std::int32_t velocity) const</argsstring>
        <name>modify_profiled_velocity</name>
        <reimplements refid="group__cpp-abstract-motor_1ga4969d7ec9d84d6abda496a684fbdfcfe">modify_profiled_velocity</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Changes the output velocity for a profiled movement (motor_move_absolute or motor_move_relative). </para>
        </briefdescription>
        <detaileddescription>
<para>This will have no effect if the motor is not following a profiled movement.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.modify_profiled_velocity(0);<sp/>//<sp/>Stop<sp/>the<sp/>motor<sp/>early</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="309" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1gaf80d06724728e5524b091097c801d14b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_target_position</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_target_position</name>
        <reimplements refid="group__cpp-abstract-motor_1ga270586ebcfe29081d91e1e1888c1cea5">get_target_position</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the target position set for the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is one of many <ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> functions that takes in an optional index parameter. This parameter can be ignored by most users but exists to give a shared base class for motors and motor groups</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor EOVERFLOW - The index is non 0</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The zero-indexed index of the motor to get the target position of. By default index is 0, and will return an error for a non-zero index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The target position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Target:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_target_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>100</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="340" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motors_1ga5a4983140113c80ed0f5f6302bb9edc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_target_velocity</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_target_velocity</name>
        <reimplements refid="group__cpp-abstract-motor_1gad432481d905cf4b1184e989fc6435223">get_target_velocity</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the velocity commanded to the motor by the user at the index specified. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is one of many <ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> functions that takes in an optional index parameter. This parameter can be ignored by most users but exists to give a shared base class for motors and motor groups</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor EOVERFLOW - The index is non 0</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The zero-indexed index of the motor to get the target position of. By default index is 0, and will return an error for a non-zero index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move_velocity(master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Velocity:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_target_velocity();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>value<sp/>of<sp/>E_CONTROLLER_ANALOG_LEFT_Y</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.hpp" line="375" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Additional example code for this module can be found in its <ref refid="motors" kindref="compound">Tutorial</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
