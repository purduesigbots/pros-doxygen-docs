<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1v5_1_1MotorGroup" kind="class" language="C++" prot="public">
    <compoundname>pros::v5::MotorGroup</compoundname>
    <basecompoundref refid="classpros_1_1v5_1_1AbstractMotor" prot="public" virt="virtual">AbstractMotor</basecompoundref>
    <includes refid="motor__group_8hpp" local="yes">motor_group.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Motor movement functions</header>
      <description><para>These functions allow programmers to make motors move </para>
</description>
      <memberdef kind="function" id="group__cpp-motor-group_1gad338fa6ea2f37d45d57763b176963445" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t operator=</definition>
        <argsstring>(std::int32_t voltage) const</argsstring>
        <name>operator=</name>
        <reimplements refid="group__cpp-abstract-motor_1ga36e8115bbea836c24d3eb5aec72cec1b">operator=</reimplements>
        <param>
          <type>std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-abstract-motor_1ga2affe67be5ec0f6c6ac406176777128c" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::MotorGroup<sp/>MotorGroup<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="120" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga4dceeada7f369a3dd25a4944019e0631" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move</definition>
        <argsstring>(std::int32_t voltage) const</argsstring>
        <name>move</name>
        <reimplements refid="group__cpp-abstract-motor_1ga2affe67be5ec0f6c6ac406176777128c">move</reimplements>
        <param>
          <type>std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -127 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__c-motors_1gac76e46064191f91bf2546335caccf6b5" kindref="member">motor_move()</ref>, or motorSet() from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::MotorGroup<sp/>MotorGroup<sp/>({1});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move(master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="151" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga6f6ed2b95a6d2e4e2f2473017dc42eec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_absolute</definition>
        <argsstring>(const double position, const std::int32_t velocity) const</argsstring>
        <name>move_absolute</name>
        <reimplements refid="group__cpp-abstract-motor_1ga6d274aaeea2b1f0eacd4199a607c5460">move_absolute</reimplements>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the target absolute position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the position of the motor when initialized or the position when it was most recently reset with <ref refid="group__cpp-motor-configuration_1gaef47e9be34d06e6a1dc536454838f600" kindref="member">pros::Motor::set_zero_position()</ref>.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The absolute position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.tare_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="196" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga966302132cf4a74d3f2493b70764191b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_relative</definition>
        <argsstring>(const double position, const std::int32_t velocity) const</argsstring>
        <name>move_relative</name>
        <reimplements refid="group__cpp-abstract-motor_1ga570e69a0d12d8f7c2fa372cf3889d1e5">move_relative</reimplements>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the relative target position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the current position of the motor as given in <ref refid="group__c-motors_1ga113fbf1950304b3a56705722b283c3a1" kindref="member">pros::Motor::motor_get_position()</ref>. Providing 10.0 as the position parameter would result in the motor moving clockwise 10 units, no matter what the current position is.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_relative(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_relative(100,<sp/>100);<sp/>//<sp/>Also<sp/>moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor.get_position()<sp/>&lt;<sp/>205)<sp/>&amp;&amp;<sp/>(motor.get_position()<sp/>&gt;<sp/>195)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="237" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga589bce07656e7689a07ef4cef4e8152e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_velocity</definition>
        <argsstring>(const std::int32_t velocity) const</argsstring>
        <name>move_velocity</name>
        <reimplements refid="group__cpp-abstract-motor_1gaf9e6c6b881edf9a214f7beb9a65016e2">move_velocity</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the velocity for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This velocity corresponds to different actual speeds depending on the gearset used for the motor. This results in a range of +-100 for E_MOTOR_GEARSET_36, +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity is held with PID to ensure consistent speed, as opposed to setting the motor&apos;s voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from -+-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_velocity(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>100<sp/>RPM<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_velocity(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="269" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga3d490ebe9fc7bc4b1c80dad7e78a8cb4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t move_voltage</definition>
        <argsstring>(const std::int32_t voltage) const</argsstring>
        <name>move_voltage</name>
        <reimplements refid="group__cpp-abstract-motor_1gaa624ba8db4d6f6bfef33a6310a962ec6">move_voltage</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the output voltage for the motor from -12000 to 12000 in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage value from -12000 to 12000</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_voltage(12000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>max<sp/>voltage<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_voltage(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="295" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga3ac7359521b822775fbdc3a708f9e687" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t brake</definition>
        <argsstring>(void) const</argsstring>
        <name>brake</name>
        <reimplements refid="group__cpp-abstract-motor_1gacd632653366f285fcadaeef24874f50b">brake</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-abstract-motor_1ga2affe67be5ec0f6c6ac406176777128c" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::MotorGroup<sp/>MotorGroup<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="297" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga530807d30c58f7e098a65d14c039dc57" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t modify_profiled_velocity</definition>
        <argsstring>(const std::int32_t velocity) const</argsstring>
        <name>modify_profiled_velocity</name>
        <reimplements refid="group__cpp-abstract-motor_1ga4969d7ec9d84d6abda496a684fbdfcfe">modify_profiled_velocity</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-abstract-motor_1ga2affe67be5ec0f6c6ac406176777128c" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::MotorGroup<sp/>MotorGroup<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="299" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga148fe7b4dff2c95e3e2c32dc08b304d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_target_position</definition>
        <argsstring>(const std::uint8_t index) const</argsstring>
        <name>get_target_position</name>
        <reimplements refid="group__cpp-abstract-motor_1ga270586ebcfe29081d91e1e1888c1cea5">get_target_position</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Gets the target position set for the motor by the user, with a parameter for the motor index. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the motor to get the target position of.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The target position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Target:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_target_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>100</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="323" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaca0311be741c4c1a58bbb71859774460" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_target_position_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_target_position_all</name>
        <reimplements refid="group__cpp-abstract-motor_1ga3372e3eeb8f9713158cf7533d9f22fdd">get_target_position_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-abstract-motor_1ga2affe67be5ec0f6c6ac406176777128c" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::MotorGroup<sp/>MotorGroup<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="324" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga5a4983140113c80ed0f5f6302bb9edc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_target_velocity</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_target_velocity</name>
        <reimplements refid="group__cpp-abstract-motor_1gad432481d905cf4b1184e989fc6435223">get_target_velocity</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the velocity commanded to the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move_velocity(master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Velocity:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_target_velocity();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>value<sp/>of<sp/>E_CONTROLLER_ANALOG_LEFT_Y</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="350" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga95eda9da6ae183d72c627ac02914d8ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_target_velocity_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_target_velocity_all</name>
        <reimplements refid="group__cpp-abstract-motor_1ga6712354fb8815453799295cf595dadb3">get_target_velocity_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -128 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__cpp-abstract-motor_1ga2affe67be5ec0f6c6ac406176777128c" kindref="member">pros::Motor::move()</ref>, or motorSet from the PROS 2 API.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::MotorGroup<sp/>MotorGroup<sp/>({1},<sp/>E_MOTOR_GEARSET_18);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="351" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor telemetry functions</header>
      <description><para>These functions allow programmers to collect telemetry from motors </para>
</description>
      <memberdef kind="function" id="group__cpp-motor-group_1gafd3c1ec0b15a106c72764070e884a243" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_actual_velocity</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_actual_velocity</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga77c649e1c8512e880729f18182116bbe">get_actual_velocity</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="381" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaf53bacb8a5e98fd0e08be4fe816b9c78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_actual_velocity_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_actual_velocity_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga438c6abbee42ff9c8f7e78760a598b72">get_actual_velocity_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="382" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaf5d053531ffaf773e3658cbc18defaab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_current_draw</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_current_draw</name>
        <reimplements refid="group__cpp-motor-telemetry_1gad4f59ac98c0207e4fd2d70781f308c89">get_current_draw</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the current drawn by the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s current in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Current<sp/>Draw:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_current_draw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="407" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gafc9eb0f2728134f647b86b4405fc9dae" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_current_draw_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_current_draw_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga7bd04f923910b767c00c46ddb9e7a04c">get_current_draw_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="408" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga313fcc0eff912e3c7a501516a49e54d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_direction</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_direction</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga7fedbc5979e60dc4abf68cb43ad7aeb0">get_direction</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the direction of movement for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 for moving in the positive direction, -1 for moving in the negative direction, and PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Direction:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_direction();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="433" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga00bd352bb0916ec99c250e4d91f081a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_direction_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_direction_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga1056fa3bf38bd7c6b7bd43ebfa990999">get_direction_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="434" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga0788cd4278262379f63def687c9621a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_efficiency</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_efficiency</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga30c1f2c5cef4e488faf1df295bf82ad1">get_efficiency</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the efficiency of the motor in percent. </para>
        </briefdescription>
        <detaileddescription>
<para>An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s efficiency in percent or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Efficiency:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_efficiency();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="463" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaae62e15d35c375a24533c4add1f8f0c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_efficiency_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_efficiency_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1gac29928ead5ce1c1b7feb83354fe25f1f">get_efficiency_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="464" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gac08a2eb37219772c9dc123fc5ff6cede" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_faults</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_faults</name>
        <reimplements refid="group__cpp-motor-telemetry_1gaa18b24c5db5590ea01b89bcb5eac211c">get_faults</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the faults experienced by the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_fault_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s faults.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Faults:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_faults();pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="492" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga2e4df2f10200a038351a4406194b57c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::uint32_t &gt;</type>
        <definition>std::vector&lt;std::uint32_t&gt; get_faults_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_faults_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga0ce7428e0087f7e1a1c11bcae4ec9020">get_faults_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="493" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaf3df6f79f5d52349e8934da9b72ab467" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t get_flags</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_flags</name>
        <reimplements refid="group__cpp-motor-telemetry_1gae86ff2f9e792299f74e168b711f7f7c0">get_flags</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the flags set by the motor&apos;s operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in pros::motor_flag_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s flags.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Faults:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_faults();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="521" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga1196eb575d750159a41244ad7a5c5158" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::uint32_t &gt;</type>
        <definition>std::vector&lt;std::uint32_t&gt; get_flags_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_flags_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1gae51d95442747f6a63dc569dd0a302e38">get_flags_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="522" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga053a57a839be6a4f0a4bee0840cad6b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_position</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_position</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga466b41cb785216638b51257d0950cad8">get_position</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the absolute position of the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s absolute position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Position:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="547" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaf8d36d6e6c7450dfe5c8c537a90646c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_position_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_position_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga719cdc008b41b3dd7946e3f113c582cb">get_position_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="548" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga1cefda03cd79f93d5ffecc8e338c991b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_power</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_power</name>
        <reimplements refid="group__cpp-motor-telemetry_1gaa08338d400876e155bb3b88ba9059f68">get_power</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the power drawn by the motor in Watts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s power draw in Watts or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Power:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_power();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="573" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga69ee95e7f2d0359f788a7b3badbe754b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_power_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_power_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga524b20db8715aa56014a501e7173366c">get_power_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="574" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga9dc566471016218eb475354297a5ffd8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_raw_position</definition>
        <argsstring>(std::uint32_t *const timestamp, const std::uint8_t index=0) const</argsstring>
        <name>get_raw_position</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga4c917fc7e8b3f92a5511923c8d8c9e35">get_raw_position</reimplements>
        <param>
          <type>std::uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the raw encoder count of the motor at a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw encoder count at the given timestamp or PROS_ERR if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::uint32_t<sp/>now<sp/>=<sp/>pros::millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Position:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_raw_position(&amp;now);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="604" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga24edad2423f67412ad9ba98a4c82dc31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_raw_position_all</definition>
        <argsstring>(std::uint32_t *const timestamp) const</argsstring>
        <name>get_raw_position_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1gabf650661a11b19e69b743a34a71b0027">get_raw_position_all</reimplements>
        <param>
          <type>std::uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="605" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaa333b80500626bd19fc8f19bc15a02b8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_temperature</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_temperature</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga3ed2e114d755fc8a24b6e42bdd5ea4bc">get_temperature</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the temperature of the motor in degrees Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s temperature in degrees Celsius or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Temperature:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_temperature();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="630" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gad7c6601004de4a794331ec71e1526ba3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_temperature_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_temperature_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1gabfc62ae07e7452f8af3ab62e78363c76">get_temperature_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="631" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga5d1344f260b9e9a694151e27dd90a4a0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>double get_torque</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_torque</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga7cca2d5eb09b2341b5afffbc26dae635">get_torque</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the torque generated by the motor in Newton Meters (Nm). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s torque in Nm or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Torque:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_torque();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="655" column="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga15b83c274ca69fc30c1fc53ec050b5bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; get_torque_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_torque_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1gaa4225a5f22a6b10a9b4c1532d395b4ab">get_torque_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="656" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga0857fec2fbc76a7a3b04a2dceb7a55a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_voltage</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_voltage</name>
        <reimplements refid="group__cpp-motor-telemetry_1gaeeec095b765765c43c22578dc44bd7b9">get_voltage</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the voltage delivered to the motor in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s voltage in mV or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Voltage:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_voltage();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="680" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga8b6089b5a1464c183258980321aaca47" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_voltage_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_voltage_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1gaf4f1030a9b7adc003bfe46325da6d2d6">get_voltage_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="681" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga08811b2a28240b216db28281175e58fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_over_current</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>is_over_current</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga75daf190cb506dbfe807c672fd61a9f1">is_over_current</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Checks if the motor is drawing over its current limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the motor&apos;s current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>the<sp/>motor<sp/>over<sp/>its<sp/>current<sp/>limit?:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_over_current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="707" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga2a8d6aa10076314d209b741215689e23" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; is_over_current_all</definition>
        <argsstring>(void) const</argsstring>
        <name>is_over_current_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga93ed616f0597a8367dc9e0419bdc78df">is_over_current_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="708" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gafe2d787550459907d7efd6cc7174a1cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_over_temp</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>is_over_temp</name>
        <reimplements refid="group__cpp-motor-telemetry_1gad6c9b66f689819d5a27af242623fcc37">is_over_temp</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the temperature limit flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the temperature limit is exceeded and 0 if the temperature is below the limit, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>the<sp/>motor<sp/>over<sp/>its<sp/>temperature<sp/>limit?:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_over_temp();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="733" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga92f61f573c53ca1f59b26b06696d31ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; is_over_temp_all</definition>
        <argsstring>(void) const</argsstring>
        <name>is_over_temp_all</name>
        <reimplements refid="group__cpp-motor-telemetry_1ga945be8a01f60dbc29247097c0aea81c1">is_over_temp_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor.get_actual_velocity());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="734" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor configuration functions</header>
      <description><para>These functions allow programmers to configure the behavior of motors </para>
</description>
      <memberdef kind="function" id="group__cpp-motor-group_1gadf652674fea330ff6bbfc9baff2e675f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacepros_1_1v5_1a4bbc51927291bf7b40f671bb83050356" kindref="member">MotorBrake</ref></type>
        <definition>MotorBrake get_brake_mode</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_brake_mode</name>
        <reimplements refid="group__cpp-motor-configuration_1gade22ea34dd96df6ab9854165830d39d1">get_brake_mode</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="761" column="12"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gadd375dd8056a2041c97b8417e7737da3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacepros_1_1v5_1a4bbc51927291bf7b40f671bb83050356" kindref="member">MotorBrake</ref> &gt;</type>
        <definition>std::vector&lt;MotorBrake&gt; get_brake_mode_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_brake_mode_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gab4364c7a9b4e20b94ab12b2f22246fdb">get_brake_mode_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="762" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gab00008e6352a854891e9a50bf7b6ef2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_current_limit</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_current_limit</name>
        <reimplements refid="group__cpp-motor-configuration_1ga6563b486ecfc73a5b35c5b30437979d3">get_current_limit</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 2500 mA.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s current limit in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Current<sp/>Limit:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_current_limit();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="787" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaf3b5722e5212806e17e09cd494f9257d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_current_limit_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_current_limit_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga15aac288a9d1fcf3f687c68fb2294e76">get_current_limit_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="788" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga3a47d55467ca4af2473d90af1db36fad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacepros_1_1v5_1ab231d92d02eadc905cd4fb268568d9b2" kindref="member">MotorUnits</ref></type>
        <definition>MotorUnits get_encoder_units</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_encoder_units</name>
        <reimplements refid="group__cpp-motor-configuration_1gafcb73293e651a8af5796054ae42a56bd">get_encoder_units</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the encoder units that were set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Units according to what is set for the motor or E_MOTOR_ENCODER_INVALID if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1,<sp/>E_MOTOR_GEARSET_06,<sp/>false,<sp/>E_MOTOR_ENCODER_COUNTS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Encoder<sp/>Units:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_encoder_units();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="808" column="12"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga5055ff527d1c4cf30164fbdae2f1560a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacepros_1_1v5_1ab231d92d02eadc905cd4fb268568d9b2" kindref="member">MotorUnits</ref> &gt;</type>
        <definition>std::vector&lt;MotorUnits&gt; get_encoder_units_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_encoder_units_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gae4e69deb0d1fe205ad9fa32f52e0335a">get_encoder_units_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="809" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gada5083bdc60916061ffa826b233a3ba9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8d" kindref="member">MotorGears</ref></type>
        <definition>MotorGears get_gearing</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_gearing</name>
        <reimplements refid="group__cpp-motor-configuration_1gafd5fce4147f0d9963068ec4223c7876f">get_gearing</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the gearset that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Gears according to what is set for the motor, or pros::Motor_Gears::invalid if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1,<sp/>E_MOTOR_GEARSET_06,<sp/>false,<sp/>E_MOTOR_ENCODER_COUNTS);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Gearing:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_gearing();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="829" column="12"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gae1f58609144579efead285d9880b959e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8d" kindref="member">MotorGears</ref> &gt;</type>
        <definition>std::vector&lt;MotorGears&gt; get_gearing_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_gearing_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga46a6d4b33d86527abe7a4987284edaec">get_gearing_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="830" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gabb8fbae09af6fc2c53b252cab49a824e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int8_t &gt;</type>
        <definition>std::vector&lt;std::int8_t&gt; get_port_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_port_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gadbc5b5c32118443c8774c7f68b1c51f2">get_port_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets returns a vector with all the port numbers in the motor group. </para>
        </briefdescription>
        <detaileddescription>
<para>(ALL THE PORTS WILL BE POSITIVE) Use get_ports if you want to get the information on reversal.</para>
<para><simplesect kind="return"><para>std::vector&lt;std::uint8_t&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="839" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga798ae5447a497e51951b95dac07ac68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_voltage_limit</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_voltage_limit</name>
        <reimplements refid="group__cpp-motor-configuration_1ga0c8735d6e1accc21e975f8ab8e0e9a70">get_voltage_limit</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the voltage limit set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Default value is 0V, which means that there is no software limitation imposed on the voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>The motor&apos;s voltage limit in V or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Motor<sp/>Voltage<sp/>Limit:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_voltage_limit();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="862" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga8c6ed4e656b519480604985a03c3725b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; get_voltage_limit_all</definition>
        <argsstring>(void) const</argsstring>
        <name>get_voltage_limit_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga5b86240615e21b03cbf7f6e1191bba76">get_voltage_limit_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="863" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga88841073df6383bee62f970541dc5b9c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_reversed</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>is_reversed</name>
        <reimplements refid="group__cpp-motor-configuration_1gab3c3c1ff5b5ebcf74a3d13ba8d73dede">is_reversed</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the operation direction of the motor as set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the motor has been reversed and 0 if the motor was not reversed, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>the<sp/>motor<sp/>reversed?<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_reversed();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;0&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="884" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga82538aeb3dbc63bca7f9f1f90bdb5ab2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>std::vector&lt;std::int32_t&gt; is_reversed_all</definition>
        <argsstring>(void) const</argsstring>
        <name>is_reversed_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gae521d5c43eb13a9d3b29f99ff80cee15">is_reversed_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="885" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gafb95b9ca6edbf9ac13e860909394085e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_brake_mode</definition>
        <argsstring>(const MotorBrake mode, const std::uint8_t index=0) const</argsstring>
        <name>set_brake_mode</name>
        <reimplements refid="group__cpp-motor-configuration_1gab3c69370324f5fa215bbc9d4d6e9f41f">set_brake_mode</reimplements>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a4bbc51927291bf7b40f671bb83050356" kindref="member">MotorBrake</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets one of Motor_Brake to the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Works with the C enum and the C++ enum class.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The Motor_Brake to set for the motor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="910" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga1df8e0da3792c8475d3b1bd21924f3f6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_brake_mode</definition>
        <argsstring>(const pros::motor_brake_mode_e_t mode, const std::uint8_t index=0) const</argsstring>
        <name>set_brake_mode</name>
        <reimplements refid="group__cpp-motor-configuration_1gaea2665b2059ac4f0009160a97a102e83">set_brake_mode</reimplements>
        <param>
          <type>const pros::motor_brake_mode_e_t</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="911" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga3512ed634c47aae498bef221973c32f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_brake_mode_all</definition>
        <argsstring>(const MotorBrake mode) const</argsstring>
        <name>set_brake_mode_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga817e7922f8bd29d6686bce19ae6b73f7">set_brake_mode_all</reimplements>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a4bbc51927291bf7b40f671bb83050356" kindref="member">MotorBrake</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="912" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga966b7d1c4fac6aa7371ca961675e909b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_brake_mode_all</definition>
        <argsstring>(const pros::motor_brake_mode_e_t mode) const</argsstring>
        <name>set_brake_mode_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gac93fc14ee73c629a40257228f6290252">set_brake_mode_all</reimplements>
        <param>
          <type>const pros::motor_brake_mode_e_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="913" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga8aad53c0ac8af0b5af38b95aef627d53" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_current_limit</definition>
        <argsstring>(const std::int32_t limit, const std::uint8_t index=0) const</argsstring>
        <name>set_current_limit</name>
        <reimplements refid="group__cpp-motor-configuration_1gaae38590659cdc1d30468d94d467ff757">set_current_limit</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new current limit in mA</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">motor.set_current_limit(1000);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor<sp/>=<sp/>controller_get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>reduce<sp/>its<sp/>output<sp/>at<sp/>1000<sp/>mA<sp/>instead<sp/>of<sp/>the<sp/>default<sp/>2500<sp/>mA</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="942" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gabbbab97ee782806164d4bab7bc150447" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_current_limit_all</definition>
        <argsstring>(const std::int32_t limit) const</argsstring>
        <name>set_current_limit_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gaca95a81f1a66dd884cc6315b02cc3400">set_current_limit_all</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="943" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gacc80f1d0fc7d8fc309f8a03782d2a0ca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_encoder_units</definition>
        <argsstring>(const MotorUnits units, const std::uint8_t index=0) const</argsstring>
        <name>set_encoder_units</name>
        <reimplements refid="group__cpp-motor-configuration_1ga5ce52a70e74b5cc2369629e8cfa4ef17">set_encoder_units</reimplements>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ab231d92d02eadc905cd4fb268568d9b2" kindref="member">MotorUnits</ref></type>
          <declname>units</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets one of Motor_Units for the motor encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>Works with the C enum and the C++ enum class.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>units</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_encoder_units(E_MOTOR_ENCODER_DEGREES);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Encoder<sp/>Units:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_encoder_units();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="967" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga99e5f206ed2d44297b4dac9f6782c45b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_encoder_units</definition>
        <argsstring>(const pros::motor_encoder_units_e_t units, const std::uint8_t index=0) const</argsstring>
        <name>set_encoder_units</name>
        <reimplements refid="group__cpp-motor-configuration_1ga3a722463eaf12facff45ee3f0ee6e6d6">set_encoder_units</reimplements>
        <param>
          <type>const pros::motor_encoder_units_e_t</type>
          <declname>units</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="968" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga9a9f925242c3bb9a131ea6502d5e089f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_encoder_units_all</definition>
        <argsstring>(const MotorUnits units) const</argsstring>
        <name>set_encoder_units_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga719c9c45eef9bb83006aa7a49e303dbe">set_encoder_units_all</reimplements>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ab231d92d02eadc905cd4fb268568d9b2" kindref="member">MotorUnits</ref></type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="969" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga77c808b80dd6bda3097a58250c660ef3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_encoder_units_all</definition>
        <argsstring>(const pros::motor_encoder_units_e_t units) const</argsstring>
        <name>set_encoder_units_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gaf013a53abbf17d411c3e5bedc21b3239">set_encoder_units_all</reimplements>
        <param>
          <type>const pros::motor_encoder_units_e_t</type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="970" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gab439888fea5c3ed84ebbc2fc2e59719f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_gearing</definition>
        <argsstring>(const MotorGears gearset, const std::uint8_t index=0) const</argsstring>
        <name>set_gearing</name>
        <reimplements refid="group__cpp-motor-configuration_1ga67ec9c9563ae2be426f8eae8b4762c5b">set_gearing</reimplements>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8d" kindref="member">MotorGears</ref></type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets one of the gear cartridge (red, green, blue) for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Usable with the C++ enum class and the C enum.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_gearing(E_MOTOR_GEARSET_06);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Gearset:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_gearing();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="994" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga1f5b46e976df878204b0d6e8c307e4ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_gearing</definition>
        <argsstring>(const pros::motor_gearset_e_t gearset, const std::uint8_t index=0) const</argsstring>
        <name>set_gearing</name>
        <reimplements refid="group__cpp-motor-configuration_1gade6d7d4eaff9e6980ac031a4004f2bee">set_gearing</reimplements>
        <param>
          <type>const pros::motor_gearset_e_t</type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="995" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gafdf31ec9f0881bb4b62f5965486891a3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_gearing_all</definition>
        <argsstring>(const MotorGears gearset) const</argsstring>
        <name>set_gearing_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga47b3d925f7e68794028a8676e0730c73">set_gearing_all</reimplements>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8d" kindref="member">MotorGears</ref></type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="996" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaf14e216a5e5a4a081fc40781086711c2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_gearing_all</definition>
        <argsstring>(const pros::motor_gearset_e_t gearset) const</argsstring>
        <name>set_gearing_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gaab3a51c5b14e52fa9c1175bdd7ff6b02">set_gearing_all</reimplements>
        <param>
          <type>const pros::motor_gearset_e_t</type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="997" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gac0f2e82f2189a9ecd8a093f24b0aa482" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_reversed</definition>
        <argsstring>(const bool reverse, const std::uint8_t index=0)</argsstring>
        <name>set_reversed</name>
        <reimplements refid="group__cpp-motor-configuration_1ga5ea389bffe1e9a6185ed6b84d0f72eb8">set_reversed</reimplements>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the reverse flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This will invert its movements and the values returned for its position.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>True reverses the motor, false is default</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_reversed(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Is<sp/>this<sp/>motor<sp/>reversed?<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.is_reversed();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1023" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga6c66d9fc7507bb188d80670176a45f80" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_reversed_all</definition>
        <argsstring>(const bool reverse)</argsstring>
        <name>set_reversed_all</name>
        <reimplements refid="group__cpp-motor-configuration_1gae5fd7b1f0b63e66d04ec63c6ba65d212">set_reversed_all</reimplements>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1024" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga26abd01e8510f3c62c5d0eff7f9708a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_voltage_limit</definition>
        <argsstring>(const std::int32_t limit, const std::uint8_t index=0) const</argsstring>
        <name>set_voltage_limit</name>
        <reimplements refid="group__cpp-motor-configuration_1ga799423364a866e61678b00e31f5db590">set_voltage_limit</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the voltage limit for the motor in Volts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage limit in Volts</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_voltage_limit(10000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor<sp/>=<sp/>master.get_analog(E_CONTROLLER_ANALOG_LEFT_Y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>not<sp/>output<sp/>more<sp/>than<sp/>10<sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1054" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga929a8dd819a0a9c0c8dd56c1bd13d459" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_voltage_limit_all</definition>
        <argsstring>(const std::int32_t limit) const</argsstring>
        <name>set_voltage_limit_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga0b31dce13a5183f5837eaa42f54a934d">set_voltage_limit_all</reimplements>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1055" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga61f0f94aa4680c4d17708d0dcfbbf06a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_zero_position</definition>
        <argsstring>(const double position, const std::uint8_t index=0) const</argsstring>
        <name>set_zero_position</name>
        <reimplements refid="group__cpp-motor-configuration_1gaef47e9be34d06e6a1dc536454838f600">set_zero_position</reimplements>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the position for the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be the future reference point for the motor&apos;s &quot;absolute&quot; position.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The new reference position in its encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_zero_position(80);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>80<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1086" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gae58fdf485731e60b4a0624ceea40c8fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_zero_position_all</definition>
        <argsstring>(const double position) const</argsstring>
        <name>set_zero_position_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga0ad12cb55da3c56f7fdd9999cc02c7d3">set_zero_position_all</reimplements>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1087" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga34dd566945ba585c9ddc7ea4eec5cf45" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t tare_position</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>tare_position</name>
        <reimplements refid="group__cpp-motor-configuration_1ga7e0ff8c8dc55252157fe4f8347dcd4cb">tare_position</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the &quot;absolute&quot; zero position of the motor to its current position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.tare_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.move_absolute(100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1111" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gab0fa2fe74ab0c7da760c252e7c7f7a71" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t tare_position_all</definition>
        <argsstring>(void) const</argsstring>
        <name>tare_position_all</name>
        <reimplements refid="group__cpp-motor-configuration_1ga8add269f5b6158f6d84d97a3dacbffca">tare_position_all</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1112" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gaea6e734c75989d4f96734d5c70d39d5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int8_t</type>
        <definition>std::int8_t size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <reimplements refid="group__cpp-motor-configuration_1gae47f39cb9d71df51bb3e3b8189d1740c">size</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the number of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::int8_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1119" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga58fa63da3d1dcbc00dd616bbff0ac16e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int8_t</type>
        <definition>std::int8_t get_port</definition>
        <argsstring>(const std::uint8_t index=0) const</argsstring>
        <name>get_port</name>
        <reimplements refid="group__cpp-motor-configuration_1ga0beec8f9f9323683e07493e076dba649">get_port</reimplements>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="return"><para>One of Motor_Brake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_brake_mode(pros::E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Brake<sp/>Mode:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_brake_mode();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1120" column="13"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gab244261fee2f43ccf660e81159478e5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void operator+=</definition>
        <argsstring>(MotorGroup &amp;)</argsstring>
        <name>operator+=</name>
        <param>
          <type><ref refid="classpros_1_1v5_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Appends the other motor group reference to this motor group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1126" column="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga824610f7b75010e540f69c8ebc4db3c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void append</definition>
        <argsstring>(MotorGroup &amp;)</argsstring>
        <name>append</name>
        <param>
          <type><ref refid="classpros_1_1v5_1_1MotorGroup" kindref="compound">MotorGroup</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Appends the other motor group reference to this motor group. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1132" column="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1ga62f3c8a7e1902ae2cb2f4121fe5800eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void erase_port</definition>
        <argsstring>(std::int8_t port)</argsstring>
        <name>erase_port</name>
        <param>
          <type>std::int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Removes the port (and it&apos;s reversed ) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1139" column="6"/>
      </memberdef>
      <memberdef kind="friend" id="group__cpp-motor-group_1ga54691276bd59f42e4f69676ed40e0a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, pros::MotorGroup &amp;motor)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classpros_1_1v5_1_1MotorGroup" kindref="compound">pros::MotorGroup</ref> &amp;</type>
          <declname>motor</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format: <ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> [port: (motor port), brake mode: (brake mode), current draw: (current draw), current limit: (current limit), direction: (direction), efficiency: (efficiency), encoder units: (encoder units), gearing: (gearing), is over temp: (over temp), position: (position), reversed: (reversed boolean), temperature: (temperature), torque: (torque), voltage: (voltage)] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1151" column="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="group__cpp-motor-group_1gade3d5afddf0961ac868c51e39335ec29" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::int8_t &gt;</type>
        <definition>std::vector&lt;std::int8_t&gt; _ports</definition>
        <argsstring></argsstring>
        <name>_ports</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1154" column="13" bodyfile="pros/motor_group.hpp" bodystart="1154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__cpp-motor-group_1ga07ee9da7c8a60505543b6416ad4896dc" prot="private" static="no" mutable="yes">
        <type><ref refid="classpros_1_1rtos_1_1Mutex" kindref="compound">pros::Mutex</ref></type>
        <definition>pros::Mutex _MotorGroup_mutex</definition>
        <argsstring></argsstring>
        <name>_MotorGroup_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="1155" column="21" bodyfile="pros/motor_group.hpp" bodystart="1155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__cpp-motor-group_1gaf1c28572f855c4f172dbf560d005d35b" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>MotorGroup</definition>
        <argsstring>(const std::initializer_list&lt; std::int8_t &gt;, const pros::v5::MotorGears gearset=pros::v5::MotorGears::green, const pros::v5::MotorUnits encoder_units=pros::v5::MotorUnits::degrees)</argsstring>
        <name>MotorGroup</name>
        <param>
          <type>const std::initializer_list&lt; std::int8_t &gt;</type>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8d" kindref="member">pros::v5::MotorGears</ref></type>
          <declname>gearset</declname>
          <defval><ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8da9f27410725ab8cc8854a2769c7a516b8" kindref="member">pros::v5::MotorGears::green</ref></defval>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ab231d92d02eadc905cd4fb268568d9b2" kindref="member">pros::v5::MotorUnits</ref></type>
          <declname>encoder_units</declname>
          <defval>pros::v5::MotorUnits::degrees</defval>
        </param>
        <briefdescription>
<para>Constructs a new <ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ports</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing the V5 port numbers from 1 to 21, or from -21 to -1 for reversed motors. A reversed motor will reverse the input or output movement functions and movement related telemetry in order to produce consistant behavior with non-reversed motors</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>= <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8da9f27410725ab8cc8854a2769c7a516b8" kindref="member">pros::v5::MotorGears::green</ref> Optional parameter for the gearset for the motors. set to <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8da9f27410725ab8cc8854a2769c7a516b8" kindref="member">pros::v5::MotorGears::green</ref> if not specifed.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encoder_units</parametername>
</parameternamelist>
<parameterdescription>
<para>= pros::v5::MotorUnits::degrees Optional parameter for the encoder units of the motors set to pros::v5::MotorUnits::degrees if not specified by the user</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MotorGroup<sp/>first_motor_group({1,<sp/>-2});<sp/>//Creates<sp/>a<sp/>motorgroup<sp/>with<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>1<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>and<sp/>a<sp/>reversed<sp/>motor<sp/>on<sp/>port<sp/>2<sp/>with<sp/>green<sp/>gearset<sp/>and<sp/>degrees<sp/>as<sp/>the<sp/>encoder<sp/>units</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">MotorGroup<sp/>second_motor_group({3,<sp/>4},<sp/>pros::v5::MotorUnits::blue);<sp/>//Creates<sp/>a<sp/>motorgroup<sp/>with<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>1<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>and<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>4<sp/>with<sp/>blue<sp/>gearset<sp/>and<sp/>degrees<sp/>as<sp/>the<sp/>encoder<sp/>units</highlight></codeline>
<codeline><highlight class="normal">MotorGroup<sp/>third_motor_group({-5,<sp/>-6},<sp/>pros::v5::MotorUnits::blue,<sp/>pros::v5::MotorGears);<sp/>//Creates<sp/>a<sp/>motorgroup<sp/>with<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>1<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>and<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>4<sp/>with<sp/>blue<sp/>gearset<sp/>and<sp/>degrees<sp/>as<sp/>the<sp/>encoder<sp/>units</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="81" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gab4c65b212768e191e450b2ed272ea68f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>MotorGroup</definition>
        <argsstring>(const std::vector&lt; std::int8_t &gt; &amp;ports, const pros::v5::MotorGears gearset=pros::v5::MotorGears::green, const pros::v5::MotorUnits encoder_units=pros::v5::MotorUnits::degrees)</argsstring>
        <name>MotorGroup</name>
        <param>
          <type>const std::vector&lt; std::int8_t &gt; &amp;</type>
          <declname>ports</declname>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8d" kindref="member">pros::v5::MotorGears</ref></type>
          <declname>gearset</declname>
          <defval><ref refid="namespacepros_1_1v5_1a3bad47afb79fa112f199d2c5f54eec8da9f27410725ab8cc8854a2769c7a516b8" kindref="member">pros::v5::MotorGears::green</ref></defval>
        </param>
        <param>
          <type>const <ref refid="namespacepros_1_1v5_1ab231d92d02eadc905cd4fb268568d9b2" kindref="member">pros::v5::MotorUnits</ref></type>
          <declname>encoder_units</declname>
          <defval>pros::v5::MotorUnits::degrees</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="83" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-group_1gacb0cb20babfd98922883ad2f57a20469" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t operator=</definition>
        <argsstring>(const std::int32_t)</argsstring>
        <name>operator=</name>
        <param>
          <type>const std::int32_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motor_group.hpp" line="85" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>MotorGroup</label>
        <link refid="classpros_1_1v5_1_1MotorGroup"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>AbstractMotor</label>
        <link refid="classpros_1_1v5_1_1AbstractMotor"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>MotorGroup</label>
        <link refid="classpros_1_1v5_1_1MotorGroup"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>AbstractMotor</label>
        <link refid="classpros_1_1v5_1_1AbstractMotor"/>
      </node>
    </collaborationgraph>
    <location file="pros/motor_group.hpp" line="38" column="46" bodyfile="pros/motor_group.hpp" bodystart="38" bodyend="1156"/>
    <listofallmembers>
      <member refid="group__cpp-motor-group_1ga07ee9da7c8a60505543b6416ad4896dc" prot="private" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>_MotorGroup_mutex</name></member>
      <member refid="group__cpp-motor-group_1gade3d5afddf0961ac868c51e39335ec29" prot="private" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>_ports</name></member>
      <member refid="group__cpp-motor-group_1ga824610f7b75010e540f69c8ebc4db3c3" prot="public" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>append</name></member>
      <member refid="group__cpp-motor-group_1ga3ac7359521b822775fbdc3a708f9e687" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>brake</name></member>
      <member refid="group__cpp-motor-group_1ga62f3c8a7e1902ae2cb2f4121fe5800eb" prot="public" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>erase_port</name></member>
      <member refid="group__cpp-motor-group_1gafd3c1ec0b15a106c72764070e884a243" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_actual_velocity</name></member>
      <member refid="group__cpp-motor-group_1gaf53bacb8a5e98fd0e08be4fe816b9c78" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_actual_velocity_all</name></member>
      <member refid="group__cpp-motor-group_1gadf652674fea330ff6bbfc9baff2e675f" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_brake_mode</name></member>
      <member refid="group__cpp-motor-group_1gadd375dd8056a2041c97b8417e7737da3" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_brake_mode_all</name></member>
      <member refid="group__cpp-motor-group_1gaf5d053531ffaf773e3658cbc18defaab" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_current_draw</name></member>
      <member refid="group__cpp-motor-group_1gafc9eb0f2728134f647b86b4405fc9dae" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_current_draw_all</name></member>
      <member refid="group__cpp-motor-group_1gab00008e6352a854891e9a50bf7b6ef2d" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_current_limit</name></member>
      <member refid="group__cpp-motor-group_1gaf3b5722e5212806e17e09cd494f9257d" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_current_limit_all</name></member>
      <member refid="group__cpp-motor-group_1ga313fcc0eff912e3c7a501516a49e54d8" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_direction</name></member>
      <member refid="group__cpp-motor-group_1ga00bd352bb0916ec99c250e4d91f081a3" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_direction_all</name></member>
      <member refid="group__cpp-motor-group_1ga0788cd4278262379f63def687c9621a5" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_efficiency</name></member>
      <member refid="group__cpp-motor-group_1gaae62e15d35c375a24533c4add1f8f0c7" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_efficiency_all</name></member>
      <member refid="group__cpp-motor-group_1ga3a47d55467ca4af2473d90af1db36fad" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_encoder_units</name></member>
      <member refid="group__cpp-motor-group_1ga5055ff527d1c4cf30164fbdae2f1560a" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_encoder_units_all</name></member>
      <member refid="group__cpp-motor-group_1gac08a2eb37219772c9dc123fc5ff6cede" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_faults</name></member>
      <member refid="group__cpp-motor-group_1ga2e4df2f10200a038351a4406194b57c3" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_faults_all</name></member>
      <member refid="group__cpp-motor-group_1gaf3df6f79f5d52349e8934da9b72ab467" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_flags</name></member>
      <member refid="group__cpp-motor-group_1ga1196eb575d750159a41244ad7a5c5158" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_flags_all</name></member>
      <member refid="group__cpp-motor-group_1gada5083bdc60916061ffa826b233a3ba9" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_gearing</name></member>
      <member refid="group__cpp-motor-group_1gae1f58609144579efead285d9880b959e" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_gearing_all</name></member>
      <member refid="group__cpp-motor-group_1ga58fa63da3d1dcbc00dd616bbff0ac16e" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_port</name></member>
      <member refid="group__cpp-motor-group_1gabb8fbae09af6fc2c53b252cab49a824e" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_port_all</name></member>
      <member refid="group__cpp-motor-group_1ga053a57a839be6a4f0a4bee0840cad6b4" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_position</name></member>
      <member refid="group__cpp-motor-group_1gaf8d36d6e6c7450dfe5c8c537a90646c5" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_position_all</name></member>
      <member refid="group__cpp-motor-group_1ga1cefda03cd79f93d5ffecc8e338c991b" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_power</name></member>
      <member refid="group__cpp-motor-group_1ga69ee95e7f2d0359f788a7b3badbe754b" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_power_all</name></member>
      <member refid="group__cpp-motor-group_1ga9dc566471016218eb475354297a5ffd8" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_raw_position</name></member>
      <member refid="group__cpp-motor-group_1ga24edad2423f67412ad9ba98a4c82dc31" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_raw_position_all</name></member>
      <member refid="group__cpp-motor-group_1ga148fe7b4dff2c95e3e2c32dc08b304d7" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_target_position</name></member>
      <member refid="group__cpp-motor-group_1gaca0311be741c4c1a58bbb71859774460" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_target_position_all</name></member>
      <member refid="group__cpp-motor-group_1ga5a4983140113c80ed0f5f6302bb9edc7" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_target_velocity</name></member>
      <member refid="group__cpp-motor-group_1ga95eda9da6ae183d72c627ac02914d8ed" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_target_velocity_all</name></member>
      <member refid="group__cpp-motor-group_1gaa333b80500626bd19fc8f19bc15a02b8" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_temperature</name></member>
      <member refid="group__cpp-motor-group_1gad7c6601004de4a794331ec71e1526ba3" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_temperature_all</name></member>
      <member refid="group__cpp-motor-group_1ga5d1344f260b9e9a694151e27dd90a4a0" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_torque</name></member>
      <member refid="group__cpp-motor-group_1ga15b83c274ca69fc30c1fc53ec050b5bb" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_torque_all</name></member>
      <member refid="group__cpp-motor-group_1ga0857fec2fbc76a7a3b04a2dceb7a55a8" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_voltage</name></member>
      <member refid="group__cpp-motor-group_1ga8b6089b5a1464c183258980321aaca47" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_voltage_all</name></member>
      <member refid="group__cpp-motor-group_1ga798ae5447a497e51951b95dac07ac68f" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_voltage_limit</name></member>
      <member refid="group__cpp-motor-group_1ga8c6ed4e656b519480604985a03c3725b" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>get_voltage_limit_all</name></member>
      <member refid="group__cpp-motor-group_1ga08811b2a28240b216db28281175e58fe" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>is_over_current</name></member>
      <member refid="group__cpp-motor-group_1ga2a8d6aa10076314d209b741215689e23" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>is_over_current_all</name></member>
      <member refid="group__cpp-motor-group_1gafe2d787550459907d7efd6cc7174a1cc" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>is_over_temp</name></member>
      <member refid="group__cpp-motor-group_1ga92f61f573c53ca1f59b26b06696d31ff" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>is_over_temp_all</name></member>
      <member refid="group__cpp-motor-group_1ga88841073df6383bee62f970541dc5b9c" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>is_reversed</name></member>
      <member refid="group__cpp-motor-group_1ga82538aeb3dbc63bca7f9f1f90bdb5ab2" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>is_reversed_all</name></member>
      <member refid="group__cpp-motor-group_1ga530807d30c58f7e098a65d14c039dc57" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>modify_profiled_velocity</name></member>
      <member refid="group__cpp-motor-group_1gaf1c28572f855c4f172dbf560d005d35b" prot="public" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>MotorGroup</name></member>
      <member refid="group__cpp-motor-group_1gab4c65b212768e191e450b2ed272ea68f" prot="public" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>MotorGroup</name></member>
      <member refid="group__cpp-motor-group_1ga4dceeada7f369a3dd25a4944019e0631" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>move</name></member>
      <member refid="group__cpp-motor-group_1ga6f6ed2b95a6d2e4e2f2473017dc42eec" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>move_absolute</name></member>
      <member refid="group__cpp-motor-group_1ga966302132cf4a74d3f2493b70764191b" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>move_relative</name></member>
      <member refid="group__cpp-motor-group_1ga589bce07656e7689a07ef4cef4e8152e" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>move_velocity</name></member>
      <member refid="group__cpp-motor-group_1ga3d490ebe9fc7bc4b1c80dad7e78a8cb4" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>move_voltage</name></member>
      <member refid="group__cpp-motor-group_1gab244261fee2f43ccf660e81159478e5d" prot="public" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>operator+=</name></member>
      <member refid="group__cpp-motor-group_1ga54691276bd59f42e4f69676ed40e0a0a" prot="public" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>operator&lt;&lt;</name></member>
      <member refid="group__cpp-motor-group_1gacb0cb20babfd98922883ad2f57a20469" prot="public" virt="non-virtual"><scope>pros::v5::MotorGroup</scope><name>operator=</name></member>
      <member refid="group__cpp-motor-group_1gad338fa6ea2f37d45d57763b176963445" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>operator=</name></member>
      <member refid="group__cpp-motor-group_1gafb95b9ca6edbf9ac13e860909394085e" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_brake_mode</name></member>
      <member refid="group__cpp-motor-group_1ga1df8e0da3792c8475d3b1bd21924f3f6" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_brake_mode</name></member>
      <member refid="group__cpp-motor-group_1ga3512ed634c47aae498bef221973c32f0" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_brake_mode_all</name></member>
      <member refid="group__cpp-motor-group_1ga966b7d1c4fac6aa7371ca961675e909b" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_brake_mode_all</name></member>
      <member refid="group__cpp-motor-group_1ga8aad53c0ac8af0b5af38b95aef627d53" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_current_limit</name></member>
      <member refid="group__cpp-motor-group_1gabbbab97ee782806164d4bab7bc150447" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_current_limit_all</name></member>
      <member refid="group__cpp-motor-group_1gacc80f1d0fc7d8fc309f8a03782d2a0ca" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_encoder_units</name></member>
      <member refid="group__cpp-motor-group_1ga99e5f206ed2d44297b4dac9f6782c45b" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_encoder_units</name></member>
      <member refid="group__cpp-motor-group_1ga9a9f925242c3bb9a131ea6502d5e089f" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_encoder_units_all</name></member>
      <member refid="group__cpp-motor-group_1ga77c808b80dd6bda3097a58250c660ef3" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_encoder_units_all</name></member>
      <member refid="group__cpp-motor-group_1gab439888fea5c3ed84ebbc2fc2e59719f" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_gearing</name></member>
      <member refid="group__cpp-motor-group_1ga1f5b46e976df878204b0d6e8c307e4ab" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_gearing</name></member>
      <member refid="group__cpp-motor-group_1gafdf31ec9f0881bb4b62f5965486891a3" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_gearing_all</name></member>
      <member refid="group__cpp-motor-group_1gaf14e216a5e5a4a081fc40781086711c2" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_gearing_all</name></member>
      <member refid="group__cpp-motor-group_1gac0f2e82f2189a9ecd8a093f24b0aa482" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_reversed</name></member>
      <member refid="group__cpp-motor-group_1ga6c66d9fc7507bb188d80670176a45f80" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_reversed_all</name></member>
      <member refid="group__cpp-motor-group_1ga26abd01e8510f3c62c5d0eff7f9708a1" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_voltage_limit</name></member>
      <member refid="group__cpp-motor-group_1ga929a8dd819a0a9c0c8dd56c1bd13d459" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_voltage_limit_all</name></member>
      <member refid="group__cpp-motor-group_1ga61f0f94aa4680c4d17708d0dcfbbf06a" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_zero_position</name></member>
      <member refid="group__cpp-motor-group_1gae58fdf485731e60b4a0624ceea40c8fa" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>set_zero_position_all</name></member>
      <member refid="group__cpp-motor-group_1gaea6e734c75989d4f96734d5c70d39d5b" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>size</name></member>
      <member refid="group__cpp-motor-group_1ga34dd566945ba585c9ddc7ea4eec5cf45" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>tare_position</name></member>
      <member refid="group__cpp-motor-group_1gab0fa2fe74ab0c7da760c252e7c7f7a71" prot="public" virt="virtual"><scope>pros::v5::MotorGroup</scope><name>tare_position_all</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
