<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="vision_8h" kind="file" language="C++">
    <compoundname>vision.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">pros/include/api.h</includedby>
    <includedby refid="vision_8hpp" local="yes">pros/include/pros/vision.hpp</includedby>
    <incdepgraph>
      <node id="232">
        <label>stdint.h</label>
      </node>
      <node id="231">
        <label>pros/include/pros/vision.h</label>
        <link refid="vision_8h"/>
        <childnode refid="232" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="235">
        <label>pros/include/kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="238">
        <label>pros/include/pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="236">
        <label>pros/include/pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="235" relation="include">
        </childnode>
      </node>
      <node id="234">
        <label>pros/include/api.h</label>
        <link refid="api_8h"/>
        <childnode refid="235" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
        <childnode refid="238" relation="include">
        </childnode>
      </node>
      <node id="233">
        <label>pros/include/pros/vision.h</label>
        <link refid="vision_8h"/>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="239" relation="include">
        </childnode>
      </node>
      <node id="239">
        <label>pros/include/pros/vision.hpp</label>
        <link refid="vision_8hpp"/>
      </node>
      <node id="237">
        <label>pros/include/main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="vision_8h_1abe53b5e2ba20b09f7f5c7173021d02f0" prot="public" static="no">
        <name>VISION_OBJECT_ERR_SIG</name>
        <initializer>255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="23" column="9" bodyfile="pros/include/pros/vision.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vision_8h_1a7dd7d66361f62ce2ca94e21bb4779962" prot="public" static="no">
        <name>VISION_FOV_WIDTH</name>
        <initializer>316</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="25" column="9" bodyfile="pros/include/pros/vision.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="vision_8h_1a8e72354ed1150786745094bbd1c0ae00" prot="public" static="no">
        <name>VISION_FOV_HEIGHT</name>
        <initializer>212</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="26" column="9" bodyfile="pros/include/pros/vision.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="vision_8h_1a23584b6ec115e81fd6c715c462683970" prot="public" static="no">
        <name>vision_object_type</name>
        <enumvalue id="vision_8h_1a23584b6ec115e81fd6c715c462683970a8ce71cf51da913d1ea77a4b732890778" prot="public">
          <name>E_VISION_OBJECT_NORMAL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vision_8h_1a23584b6ec115e81fd6c715c462683970a44bed4e1e753397aae03dc37b8e55983" prot="public">
          <name>E_VISION_OBJECT_COLOR_CODE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vision_8h_1a23584b6ec115e81fd6c715c462683970a9502bdf4e794b257cdc86c23374ffcbc" prot="public">
          <name>E_VISION_OBJECT_LINE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the different types of objects that can be detected by the Vision Sensor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="38" column="1" bodyfile="pros/include/pros/vision.h" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="enum" id="vision_8h_1aef7c8269b3fb0dfbf4e597b2d8dd7af5" prot="public" static="no">
        <name>vision_zero</name>
        <enumvalue id="vision_8h_1aef7c8269b3fb0dfbf4e597b2d8dd7af5a0ff244c5f3e9771f962986e25b00ff3d" prot="public">
          <name>E_VISION_ZERO_TOPLEFT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="vision_8h_1aef7c8269b3fb0dfbf4e597b2d8dd7af5ac4bfba95a9c18805da897280e18387c1" prot="public">
          <name>E_VISION_ZERO_CENTER</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="93" column="1" bodyfile="pros/include/pros/vision.h" bodystart="93" bodyend="96"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="vision_8h_1aead17814e0309d449090f68d4104981f" prot="public" static="no">
        <type>enum <ref refid="vision_8h_1a23584b6ec115e81fd6c715c462683970" kindref="member">vision_object_type</ref></type>
        <definition>typedef enum vision_object_type  vision_object_type_e_t</definition>
        <argsstring></argsstring>
        <name>vision_object_type_e_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This enumeration defines the different types of objects that can be detected by the Vision Sensor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="vision_8h_1a71f2011a47e95558bb534b05c16c7f2b" prot="public" static="no">
        <type>uint16_t</type>
        <definition>typedef uint16_t vision_color_code_t</definition>
        <argsstring></argsstring>
        <name>vision_color_code_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Color codes are just signatures with multiple IDs and a different type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="65" column="1" bodyfile="pros/include/pros/vision.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="vision_8h_1a2e8bc1c48f8aab12275bfc1868fbbad6" prot="public" static="no">
        <type>enum <ref refid="vision_8h_1aef7c8269b3fb0dfbf4e597b2d8dd7af5" kindref="member">vision_zero</ref></type>
        <definition>typedef enum vision_zero  vision_zero_e_t</definition>
        <argsstring></argsstring>
        <name>vision_zero_e_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="96" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>vision_signature_s_t</definition>
        <argsstring></argsstring>
        <name>vision_signature_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="60" column="1" bodyfile="pros/include/pros/vision.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="vision_8h_1ae619120558539c13e53b5a6f42fb4375" prot="public" static="no" mutable="no">
        <type></type>
        <definition>vision_object_s_t</definition>
        <argsstring></argsstring>
        <name>vision_object_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="91" column="1" bodyfile="pros/include/pros/vision.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="vision_8h_1ae55a6efc231c3cf6ab009c08ae920a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>struct __attribute__</definition>
        <argsstring>((__packed__)) vision_signature</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(__packed__)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This structure contains the parameters used by the Vision Sensor to detect objects.</para><para>This structure contains a descriptor of an object detected by the Vision Sensor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="225" column="1" bodyfile="pros/include/pros/vision.h" bodystart="48" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a92834afc57fa21039a4221608e01e592" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_clear_led</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_clear_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a452a6732e27d1496360f69b84af7609f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t vision_signature_from_utility</definition>
        <argsstring>(const int32_t id, const int32_t u_min, const int32_t u_max, const int32_t u_mean, const int32_t v_min, const int32_t v_max, const int32_t v_mean, const float range, const int32_t type)</argsstring>
        <name>vision_signature_from_utility</name>
        <param>
          <type>const int32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_mean</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_mean</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a signature from the vision sensor utility</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on U axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on U axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on U axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on V axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on V axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on V axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_signature_s_t that can be set using vision_set_signature </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a675146281c6f575b3b95e1b20fb16a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1a71f2011a47e95558bb534b05c16c7f2b" kindref="member">vision_color_code_t</ref></type>
        <definition>vision_color_code_t vision_create_color_code</definition>
        <argsstring>(uint8_t port, const uint32_t sig_id1, const uint32_t sig_id2, const uint32_t sig_id3, const uint32_t sig_id4, const uint32_t sig_id5)</argsstring>
        <name>vision_create_color_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id1</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id2</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id3</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id4</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id5</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a color code that represents a combination of the given signature IDs. If fewer than 5 signatures are to be a part of the color code, pass 0 for the additional function parameters.</para><para>This function uses the following values of errno when an error state is reached: EINVAL - Fewer than two signatures have been provided or one of the signatures is out of its [1-7] range (or 0 when omitted).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first signature id [1-7] to add to the color code </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second signature id [1-7] to add to the color code </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third signature id [1-7] to add to the color code </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id4</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth signature id [1-7] to add to the color code </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id5</parametername>
</parameternamelist>
<parameterdescription>
<para>The fifth signature id [1-7] to add to the color code</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_color_code_t object containing the color code information. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a89cf079d79ec4b805b2baec609e810ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref></type>
        <definition>vision_object_s_t vision_get_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id)</argsstring>
        <name>vision_get_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the nth largest object according to size_id.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EHOSTDOWN - Reading the vision sensor failed for an unknown reason.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vision_object_s_t object corresponding to the given size id, or PROS_ERR if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1ae7d3f64f0a84d842e1c07c83cbbc1318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref></type>
        <definition>vision_object_s_t vision_get_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id)</argsstring>
        <name>vision_get_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the nth largest object of the given signature according to size_id.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - sig_id is outside the range [1-8] EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID [1-7] for which an object will be returned.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vision_object_s_t object corresponding to the given signature and size_id, or PROS_ERR if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1acd5c817b31e522688e6f661246a374f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref></type>
        <definition>vision_object_s_t vision_get_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code)</argsstring>
        <name>vision_get_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const <ref refid="vision_8h_1a71f2011a47e95558bb534b05c16c7f2b" kindref="member">vision_color_code_t</ref></type>
          <declname>color_code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the nth largest object of the given color code according to size_id.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the vision sensor failed for an unknown reason.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which an object will be returned</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vision_object_s_t object corresponding to the given color code and size_id, or PROS_ERR if an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1af23dbc1294b67885665c7c1e81780a1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_get_exposure</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the exposure parameter of the Vision Sensor. See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current exposure setting from [0,150], PROS_ERR if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1ac50ece961223bd8ff99f513543d2323c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_get_object_count</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_object_count</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the number of objects currently detected by the Vision Sensor.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of objects detected on the specified vision sensor. Returns PROS_ERR if the port was invalid or an error occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a21a5a2aa09cf4d16021120ce0325eac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_get_white_balance</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the white balance parameter of the Vision Sensor.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current RGB white balance setting of the sensor </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a2fc1d334e9d0a312a5d07378d4a95f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_print_signature</definition>
        <argsstring>(const vision_signature_s_t sig)</argsstring>
        <name>vision_print_signature</name>
        <param>
          <type>const <ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref></type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the contents of the signature as an initializer list to the terminal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature for which the contents will be printed</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a5091bfb5dadeb9a5a854c13d684f3f23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_read_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads up to object_count object descriptors into object_arr.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1adfb6fcb835556086acfa82b23c3c6683" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_read_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads up to object_count object descriptors into object_arr.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID [1-7] for which objects will be returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a4b4978438d0d0e0173a05122ea7b205e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_read_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const <ref refid="vision_8h_1a71f2011a47e95558bb534b05c16c7f2b" kindref="member">vision_color_code_t</ref></type>
          <declname>color_code</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reads up to object_count object descriptors into object_arr.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which objects will be returned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a4e530910b0cf333cfaad20509ed88c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t vision_get_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id)</argsstring>
        <name>vision_get_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the object detection signature with the given id number.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to read</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_signature_s_t containing information about the signature. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a16cf475074058c13bba0fcea12906d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_set_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id, vision_signature_s_t *const signature_ptr)</argsstring>
        <name>vision_set_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref> *const</type>
          <declname>signature_ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores the supplied object detection signature onto the vision sensor.</para><para>NOTE: This saves the signature in volatile memory, and the signature will be lost as soon as the sensor is powered down.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to store into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signature_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the signature to save</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a842a2758f2cf0964a91e376061380122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_set_auto_white_balance</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_auto_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables/disables auto white-balancing on the Vision Sensor.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - enable was not 0 or 1</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass 0 to disable, 1 to enable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1aa16405c90b21955c47960d814c9f8ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_set_exposure</definition>
        <argsstring>(uint8_t port, const uint8_t exposure)</argsstring>
        <name>vision_set_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the exposure parameter of the Vision Sensor. See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The new exposure setting from [0,150]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a115ef040c736971c180c812932d97dc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_set_led</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the vision sensor LED color, overriding the automatic behavior.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>An RGB code to set the LED to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="491" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1afe156ff40f90b71ef5bb1ce49d056d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_set_white_balance</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the white balance parameter of the Vision Sensor.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>The new RGB white balance setting of the sensor</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="509" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a17ba398060da4cff1dda541fde50773c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_set_zero_point</definition>
        <argsstring>(uint8_t port, vision_zero_e_t zero_point)</argsstring>
        <name>vision_set_zero_point</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1a2e8bc1c48f8aab12275bfc1868fbbad6" kindref="member">vision_zero_e_t</ref></type>
          <declname>zero_point</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the (0,0) coordinate for the Field of View.</para><para>This will affect the coordinates returned for each request for a vision_object_s_t from the sensor, so it is recommended that this function only be used to configure the sensor at the beginning of its use.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="vision_8h_1a446d8d1600570e573eb7afa9f0377e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t vision_set_wifi_mode</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_wifi_mode</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the Wi-Fi mode of the Vision sensor</para><para>This functions uses the following values of errno when an error state is reached: ENXIO - The given port is not within the range of V5 ports (1-21) EACCESS - Anothe resources is currently trying to access the port</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Disable Wi-Fi on the Vision sensor if 0, enable otherwise (e.g. 1)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.h" line="549" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for the VEX Vision Sensor-related functions.</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html</ulink> to learn more.</para><para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para><para>Copyright (c) 2017-2020, Purdue University ACM SIGBots. All rights reserved.</para><para>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>    </detaileddescription>
    <location file="pros/include/pros/vision.h"/>
  </compounddef>
</doxygen>
