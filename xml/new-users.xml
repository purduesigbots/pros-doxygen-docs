<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="new-users" kind="page">
    <compoundname>new-users</compoundname>
    <title>PROS First Time Users Guide</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The most important characteristic of PROS to note when getting started is that PROS is just standard C or C++ programming. Anything that works in standard C/C++ will work as a part of a PROS project, and similarly the errors given for code that doesn&apos;t work will match errors given for any similar C/C++ code. Learning C/C++ is essential for using PROS.</para>
<sect2 id="new-users_1autotoc_md14">
<title>I&apos;ve never used PROS or written C/C++ code before, how do I start?</title>
<para>If you have not used PROS or done non-VEX C/C++ code development before, we recommend that you check out C tutorials on the following topics:</para>
<para><itemizedlist>
<listitem><para><ulink url="http://www.studytonight.com/c/user-defined-functions-in-c.php">Functions</ulink>. C is a language that heavily emphasizes functions, and knowing how they work is essential to using PROS. The <ulink url="../api/index.html">PROS API</ulink> is a set of functions, so any time that you want to interact with a sensor or motor, you&apos;re using functions.</para>
</listitem><listitem><para><ulink url="https://www.tutorialspoint.com/cprogramming/c_header_files.htm">Header Files</ulink>. The PROS template (the set of files automatically created when you start a PROS project) contains a couple of header files, and it&apos;s recommended that you make additional header files as you develop your code. Header files contain the declarations for functions and global variables (among other things), which is why the <ulink url="../api/index.html">PROS API</ulink> can be found in <computeroutput>include/pros/api.h</computeroutput>. Knowing what code should go in a header file (<computeroutput>.h</computeroutput>, <computeroutput>.hpp</computeroutput>) or a source file (<computeroutput>.c</computeroutput>, <computeroutput>.cpp</computeroutput>) can be difficult to determine at first, but it is a very useful skill to learn.</para>
</listitem><listitem><para><ulink url="https://www.codingunit.com/printf-format-specifiers-format-conversions-and-formatted-output">printf()</ulink>. At some point when developing PROS code, you will likely want to get some feedback on what the value of a variable is. This is not an exact replacement for a full debugging utility by any means, but is the standard method for troubleshooting issues in most languages and can be used for viewing sensor values or your own variables&apos; values. The output from these <computeroutput>printf()</computeroutput> statements can be viewed in the terminal by running <computeroutput>pros terminal</computeroutput>.</para>
</listitem><listitem><para><ulink url="../tutorials/topical/multitasking.html">Tasks</ulink>. One common mistake that new PROS users make is forgetting to include a <computeroutput><ref refid="rtos_8h_1ab8c5a8048d5576a33d7f79b95a2fa0dd" kindref="member">delay()</ref></computeroutput> statement in their tasks (this includes <computeroutput><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol()</ref></computeroutput> too), starving the processor of resources and preventing the PROS kernel from running properly. Every infinite loop, like the one in <computeroutput><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol()</ref></computeroutput>, needs to have a delay statement. We recommend at least 2ms.</para>
</listitem></itemizedlist>
</para>
<para>And then for additional C tutorial topics, visit <ulink url="https://www.cprogramming.com/tutorial/c-tutorial.html">CProgramming.com</ulink> or <ulink url="http://www.studytonight.com/c/overview-of-c.php">StudyTonight</ulink>. A good video tutorial series (as opposed to the previous text-based tutorials) can be found on <ulink url="https://youtu.be/nXvy5900m3M">YouTube</ulink>.</para>
</sect2>
<sect2 id="new-users_1autotoc_md15">
<title>I know C/C++, now how do I use PROS?</title>
<para>The PROS tutorials are designed to show the application of C/C++ programming to a PROS project. The <ulink url="../tutorials/walkthrough/clawbot.html">Programming the Clawbot</ulink> tutorial is a great place to start, as it goes through every step of putting together a sample PROS project. Once you are ready to branch out and create your own custom project, looking through the following tutorials is recommended:</para>
<para><itemizedlist>
<listitem><para><ulink url="../tutorials/general/project-structure.html">PROS Project Structure</ulink></para>
</listitem><listitem><para><ulink url="../tutorials/walkthrough/uploading.html">Uploading Code</ulink></para>
</listitem><listitem><para><ulink url="../tutorials/general/debugging.html">Debugging</ulink></para>
</listitem><listitem><para><ulink url="./faq.html">Coding FAQs</ulink></para>
</listitem></itemizedlist>
</para>
<para>And then you can find tutorials for specific subjects from <ulink url="../tutorials/topical/adi.html">the ADI</ulink> to <ulink url="../tutorials/topical/multitasking.html">tasks and multithreading</ulink> as well.</para>
<para>VEX U team QUEEN has also created a series of YouTube videos about C++, object-oriented programming, and other relevant programming topics in the context of VEX robots; you can find it <ulink url="https://www.youtube.com/playlist?list=PLxt0dHFRDpQhy24IL1wAniVq3xf8N7QAV">here</ulink>.</para>
</sect2>
<sect2 id="new-users_1autotoc_md16">
<title>How do I share my code with other people?</title>
<para>In order to track changes to your code, as well as to help share your code with other people, you can use a version control system like Git in conjunction with a service like <ulink url="https://github.com">GitHub</ulink>. If you want to share smaller parts of your code with other people in order to get help (e.g. through the software channel on Discord), you can use something like <ulink url="https://gist.github.com">GitHub Gists</ulink> or <ulink url="https://pastebin.com">Pastebin</ulink>.</para>
<para>For more information on how to use Git, including the Git CLI tools and setting up a respository on GitHub, check out the <ulink url="https://help.github.com">GitHub help pages</ulink>. </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
