<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="misc_8hpp" kind="file" language="C++">
    <compoundname>misc.hpp</compoundname>
    <includes refid="misc_8h" local="yes">pros/misc.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">string</includes>
    <includedby refid="device_8hpp" local="yes">pros/device.hpp</includedby>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>pros/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="1">
        <label>pros/misc.hpp</label>
        <link refid="misc_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="7">
        <label>pros/distance.hpp</label>
        <link refid="distance_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>pros/gps.hpp</label>
        <link refid="gps_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pros/link.hpp</label>
        <link refid="link_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>pros/serial.hpp</label>
        <link refid="serial_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pros/optical.hpp</label>
        <link refid="optical_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pros/rotation.hpp</label>
        <link refid="rotation_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pros/motor_group.hpp</label>
        <link refid="motor__group_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pros/motors.hpp</label>
        <link refid="motors_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pros/vision.hpp</label>
        <link refid="vision_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>pros/abstract_motor.hpp</label>
        <link refid="abstract__motor_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pros/imu.hpp</label>
        <link refid="imu_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
      <node id="2">
        <label>pros/device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pros/misc.hpp</label>
        <link refid="misc_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classpros_1_1v5_1_1Controller" prot="public">pros::v5::Controller</innerclass>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1v5">pros::v5</innernamespace>
    <innernamespace refid="namespacepros_1_1battery">pros::battery</innernamespace>
    <innernamespace refid="namespacepros_1_1competition">pros::competition</innernamespace>
    <innernamespace refid="namespacepros_1_1usd">pros::usd</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-misc_1ga42876357c2ed5a047a535aca84f4458e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::battery::get_capacity</definition>
        <argsstring>(void)</argsstring>
        <name>get_capacity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current voltage of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current voltage of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Level:<sp/>%.2f\n&quot;,<sp/>get_capacity());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="429" column="8" declfile="pros/misc.hpp" declline="429" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gad0f092e6341126d68ae15d41b5dba352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::battery::get_current</definition>
        <argsstring>(void)</argsstring>
        <name>get_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current current of the battery in milliamps, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current current of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Current:<sp/>%d\n&quot;,<sp/>get_current());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="447" column="9" declfile="pros/misc.hpp" declline="447" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga33d1a503808ed06148a1884e3ccf88ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::battery::get_temperature</definition>
        <argsstring>(void)</argsstring>
        <name>get_temperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current temperature of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current temperature of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery&apos;s<sp/>Temperature:<sp/>%.2f\n&quot;,<sp/>get_temperature());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="465" column="8" declfile="pros/misc.hpp" declline="465" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga2c325b346f66c15ca7e5a844a66b20d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::battery::get_voltage</definition>
        <argsstring>(void)</argsstring>
        <name>get_voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current capacity of the battery in millivolts, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current capacity of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery&apos;s<sp/>Voltage:<sp/>%d\n&quot;,<sp/>get_voltage());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="483" column="9" declfile="pros/misc.hpp" declline="483" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1competition_1ad75e0e06e0817959c08798358eaa8ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::get_status</definition>
        <argsstring>(void)</argsstring>
        <name>get_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current status of the competition control. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The competition control status as a mask of bits with COMPETITION_{ENABLED,AUTONOMOUS,CONNECTED}.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>status_display_task(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(!is_connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pros::lcd::print(0,<sp/>&quot;V5<sp/>Brain<sp/>is<sp/>not<sp/>connected!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>if(is_autonomous())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pros::lcd::print(0,<sp/>&quot;V5<sp/>Brain<sp/>is<sp/>in<sp/>autonomous<sp/>mode!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>if(!is_disabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>pros::lcd::print(0,<sp/>&quot;V5<sp/>Brain<sp/>is<sp/>disabled!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="508" column="14" declfile="pros/misc.hpp" declline="508" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1competition_1a88353a4f8e5e283558ee6504c54283af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_autonomous</definition>
        <argsstring>(void)</argsstring>
        <name>is_autonomous</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="509" column="14" declfile="pros/misc.hpp" declline="509" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1competition_1aaf36367a2369390657f6bc4285f68c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_connected</definition>
        <argsstring>(void)</argsstring>
        <name>is_connected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="510" column="14" declfile="pros/misc.hpp" declline="510" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1competition_1a2d4f4555af4c45f7f82ea75e1223899b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_disabled</definition>
        <argsstring>(void)</argsstring>
        <name>is_disabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="511" column="14" declfile="pros/misc.hpp" declline="511" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1competition_1a77ec6eff4e9e69e51e088367bb111755" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_field_control</definition>
        <argsstring>(void)</argsstring>
        <name>is_field_control</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="512" column="14" declfile="pros/misc.hpp" declline="512" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1competition_1ac7d91899cf95d4c1951aa3a5fbfd65fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_competition_switch</definition>
        <argsstring>(void)</argsstring>
        <name>is_competition_switch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="513" column="14" declfile="pros/misc.hpp" declline="513" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1usd_1a2d7eecbe50533c0d753e82470dc2e6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::usd::is_installed</definition>
        <argsstring>(void)</argsstring>
        <name>is_installed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the SD card is installed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if the SD card is installed, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;%i&quot;,<sp/>is_installed());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="529" column="14" declfile="pros/misc.hpp" declline="529" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1usd_1acffd319feb1e7f689445b2e0837018d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::usd::list_files</definition>
        <argsstring>(const char *path, char *buffer, std::int32_t len)</argsstring>
        <name>list_files</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::int32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Lists the files in a directory specified by the path Puts the list of file names (NOT DIRECTORIES) into the buffer seperated by newlines. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached:</para>
<para>EIO - Hard error occured in the low level disk I/O layer EINVAL - file or directory is invalid, or length is invalid EBUSY - THe physical drinve cannot work ENOENT - cannot find the path or file EINVAL - the path name format is invalid EACCES - Access denied or directory full EEXIST - Access denied EROFS - SD card is write protected ENXIO - drive number is invalid or not a FAT32 drive ENOBUFS - drive has no work area ENFILE - too many open files</para>
<para><simplesect kind="note"><para>use a path of &quot;\&quot; to list the files in the main directory NOT &quot;/usd/&quot; DO NOT PREPEND YOUR PATHS WITH &quot;/usd/&quot;</para>
</simplesect>
<simplesect kind="return"><para>1 on success or PROS_ERR on failure setting errno</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/>char*<sp/>test<sp/>=<sp/>(char*)<sp/>malloc(128);</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::usd::list_files(&quot;/&quot;,<sp/>test,<sp/>128);</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/>printf(&quot;%s\n&quot;,<sp/>test);<sp/>//Prints<sp/>the<sp/>file<sp/>names<sp/>in<sp/>the<sp/>root<sp/>directory<sp/>seperated<sp/>by<sp/>newlines</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::list_files(&quot;/test&quot;,<sp/>test,<sp/>128);</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/>printf(&quot;%s\n&quot;,<sp/>test);<sp/>//Prints<sp/>the<sp/>names<sp/>of<sp/>files<sp/>in<sp/>the<sp/>folder<sp/>named<sp/>test<sp/>seperated<sp/>by<sp/>newlines</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::delay(100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="571" column="14" declfile="pros/misc.hpp" declline="571" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for miscellaneous functions pertaining to the controller, battery, and competition control.</para>
<para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2023, Purdue University ACM SIGBots. All rights reservered.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/misc.hpp"/>
  </compounddef>
</doxygen>
