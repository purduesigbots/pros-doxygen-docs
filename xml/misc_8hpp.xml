<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="misc_8hpp" kind="file" language="C++">
    <compoundname>misc.hpp</compoundname>
    <includes refid="misc_8h" local="yes">pros/misc.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">string</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>pros/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>cstdint</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="1">
        <label>pros/misc.hpp</label>
        <link refid="misc_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="8">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="6">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pros/optical.hpp</label>
        <link refid="optical_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pros/optical.h</label>
        <link refid="optical_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
      <node id="1">
        <label>pros/misc.hpp</label>
        <link refid="misc_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classpros_1_1v5_1_1Controller" prot="public">pros::v5::Controller</innerclass>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1v5">pros::v5</innernamespace>
    <innernamespace refid="namespacepros_1_1battery">pros::battery</innernamespace>
    <innernamespace refid="namespacepros_1_1competition">pros::competition</innernamespace>
    <innernamespace refid="namespacepros_1_1usd">pros::usd</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-misc_1ga42876357c2ed5a047a535aca84f4458e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::battery::get_capacity</definition>
        <argsstring>(void)</argsstring>
        <name>get_capacity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current voltage of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current voltage of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Level:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_capacity();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="445" column="8" declfile="pros/misc.hpp" declline="445" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gad0f092e6341126d68ae15d41b5dba352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::battery::get_current</definition>
        <argsstring>(void)</argsstring>
        <name>get_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current current of the battery in milliamps, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current current of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Current:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_current();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="463" column="9" declfile="pros/misc.hpp" declline="463" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga33d1a503808ed06148a1884e3ccf88ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::battery::get_temperature</definition>
        <argsstring>(void)</argsstring>
        <name>get_temperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current temperature of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current temperature of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Temperature:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_temperature();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="481" column="8" declfile="pros/misc.hpp" declline="481" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga2c325b346f66c15ca7e5a844a66b20d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::battery::get_voltage</definition>
        <argsstring>(void)</argsstring>
        <name>get_voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current capacity of the battery in millivolts, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current capacity of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Voltage:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_voltage();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="499" column="9" declfile="pros/misc.hpp" declline="499" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gad75e0e06e0817959c08798358eaa8ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::get_status</definition>
        <argsstring>(void)</argsstring>
        <name>get_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current status of the competition control. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The competition control status as a mask of bits with COMPETITION_{ENABLED,AUTONOMOUS,CONNECTED}.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pros::competition::get_status()<sp/>&amp;<sp/>COMPETITION_CONNECTED<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="525" column="14" declfile="pros/misc.hpp" declline="525" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga88353a4f8e5e283558ee6504c54283af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_autonomous</definition>
        <argsstring>(void)</argsstring>
        <name>is_autonomous</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is in autonomous mode, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!pros::competition::is_autonomous())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Wait<sp/>to<sp/>do<sp/>anything<sp/>until<sp/>autonomous<sp/>starts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(pros::competition::is_autonomous())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>whatever<sp/>code<sp/>is<sp/>desired<sp/>to<sp/>just<sp/>execute<sp/>in<sp/>autonomous</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Task<sp/>my_task<sp/>(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="547" column="14" declfile="pros/misc.hpp" declline="547" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gaaf36367a2369390657f6bc4285f68c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_connected</definition>
        <argsstring>(void)</argsstring>
        <name>is_connected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is connected to competition control, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pros::competition::is_connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="562" column="14" declfile="pros/misc.hpp" declline="562" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga2d4f4555af4c45f7f82ea75e1223899b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_disabled</definition>
        <argsstring>(void)</argsstring>
        <name>is_disabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is disabled, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!pros::competition::is_disabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>competition<sp/>tasks<sp/>(like<sp/>Lift<sp/>Control<sp/>or<sp/>similar)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Task<sp/>my_task<sp/>(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="580" column="14" declfile="pros/misc.hpp" declline="580" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga2d7eecbe50533c0d753e82470dc2e6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::usd::is_installed</definition>
        <argsstring>(void)</argsstring>
        <name>is_installed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the SD card is installed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if the SD card is installed, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>pros::usd::is_installed()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="602" column="14" declfile="pros/misc.hpp" declline="602" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for miscellaneous functions pertaining to the controller, battery, and competition control.</para>
<para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html">https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html</ulink> to learn more.</para>
<para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2022, Purdue University ACM SIGBots. All rights reservered.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/misc.hpp"/>
  </compounddef>
</doxygen>
