<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="rtos_8h" kind="file" language="C++">
    <compoundname>rtos.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">pros/include/api.h</includedby>
    <includedby refid="rtos_8hpp" local="yes">pros/include/pros/rtos.hpp</includedby>
    <incdepgraph>
      <node id="203">
        <label>stdbool.h</label>
      </node>
      <node id="204">
        <label>stdint.h</label>
      </node>
      <node id="202">
        <label>pros/include/pros/rtos.h</label>
        <link refid="rtos_8h"/>
        <childnode refid="203" relation="include">
        </childnode>
        <childnode refid="204" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="211">
        <label>pros/include/pros/rtos.hpp</label>
        <link refid="rtos_8hpp"/>
      </node>
      <node id="207">
        <label>pros/include/kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="210">
        <label>pros/include/pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="208">
        <label>pros/include/pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="207" relation="include">
        </childnode>
      </node>
      <node id="206">
        <label>pros/include/api.h</label>
        <link refid="api_8h"/>
        <childnode refid="207" relation="include">
        </childnode>
        <childnode refid="208" relation="include">
        </childnode>
        <childnode refid="209" relation="include">
        </childnode>
        <childnode refid="210" relation="include">
        </childnode>
      </node>
      <node id="205">
        <label>pros/include/pros/rtos.h</label>
        <link refid="rtos_8h"/>
        <childnode refid="206" relation="include">
        </childnode>
        <childnode refid="211" relation="include">
        </childnode>
      </node>
      <node id="209">
        <label>pros/include/main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="rtos_8h_1a87892f18571e88eba7fbe758759cac05" prot="public" static="no">
        <name>TASK_PRIORITY_MAX</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="33" column="9" bodyfile="pros/include/pros/rtos.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rtos_8h_1ae35baef65db45cef90a74266acb31b10" prot="public" static="no">
        <name>TASK_PRIORITY_MIN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="37" column="9" bodyfile="pros/include/pros/rtos.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rtos_8h_1a3082a7e8f15691441dba683711bb823f" prot="public" static="no">
        <name>TASK_PRIORITY_DEFAULT</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="41" column="9" bodyfile="pros/include/pros/rtos.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rtos_8h_1a9ffb33b9e3714ca949d9f45dde3cbf8f" prot="public" static="no">
        <name>TASK_STACK_DEPTH_DEFAULT</name>
        <initializer>0x2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="46" column="9" bodyfile="pros/include/pros/rtos.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rtos_8h_1afa551bbf9a2333b9241b2e99530a8767" prot="public" static="no">
        <name>TASK_STACK_DEPTH_MIN</name>
        <initializer>0x200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="50" column="9" bodyfile="pros/include/pros/rtos.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rtos_8h_1a6d22565b4bdfe36c8f8a0a376e565460" prot="public" static="no">
        <name>TASK_NAME_MAX_LEN</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="53" column="9" bodyfile="pros/include/pros/rtos.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rtos_8h_1a9146d5b264ff64b573607d62fc479c3f" prot="public" static="no">
        <name>TIMEOUT_MAX</name>
        <initializer>((uint32_t)0xffffffffUL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="56" column="9" bodyfile="pros/include/pros/rtos.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rtos_8h_1ad028cb03c935557184a71a6c53915065" prot="public" static="no">
        <name>CURRENT_TASK</name>
        <initializer>((<ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref>)NULL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Refers to the current task handle </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="114" column="10" bodyfile="pros/include/pros/rtos.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="rtos_8h_1a23d5ffd47ed255206f177fe9d891335b" prot="public" static="no">
        <name>task_state_e_t</name>
        <enumvalue id="rtos_8h_1a23d5ffd47ed255206f177fe9d891335ba3b7873566c73fb17191451f641f3f564" prot="public">
          <name>E_TASK_STATE_RUNNING</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a23d5ffd47ed255206f177fe9d891335ba7a9b05db250161908d541259cc9b6c08" prot="public">
          <name>E_TASK_STATE_READY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a23d5ffd47ed255206f177fe9d891335ba833a2009d6613fe7f3357551c525e953" prot="public">
          <name>E_TASK_STATE_BLOCKED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a23d5ffd47ed255206f177fe9d891335ba1c6ab831f17838fb926088f3353cb13c" prot="public">
          <name>E_TASK_STATE_SUSPENDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a23d5ffd47ed255206f177fe9d891335ba521c1585b4d885ca38cc463d74d1fa4d" prot="public">
          <name>E_TASK_STATE_DELETED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a23d5ffd47ed255206f177fe9d891335ba4b91d8b231764bb6556618bdb78c34a0" prot="public">
          <name>E_TASK_STATE_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="61" column="1" bodyfile="pros/include/pros/rtos.h" bodystart="61" bodyend="68"/>
      </memberdef>
      <memberdef kind="enum" id="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570" prot="public" static="no">
        <name>notify_action_e_t</name>
        <enumvalue id="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570a8ef04ba61995d97d82fd7bf1ff4d772f" prot="public">
          <name>E_NOTIFY_ACTION_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570adc1fa6911e0d71db6404d3c8b7276e02" prot="public">
          <name>E_NOTIFY_ACTION_BITS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570ab9b6a7e40e7b9553e8b1782b2c0bc155" prot="public">
          <name>E_NOTIFY_ACTION_INCR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570a11be52cd9271cd1504f7555b73e5bd89" prot="public">
          <name>E_NOTIFY_ACTION_OWRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570a735b4ce042c8998c9432449b5f7efdc5" prot="public">
          <name>E_NOTIFY_ACTION_NO_OWRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="70" column="1" bodyfile="pros/include/pros/rtos.h" bodystart="70" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* task_t</definition>
        <argsstring></argsstring>
        <name>task_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="58" column="1" bodyfile="pros/include/pros/rtos.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rtos_8h_1aece0aa29b1f1538115228d2197239f98" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* task_fn_t) (void *)</definition>
        <argsstring>)(void *)</argsstring>
        <name>task_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="59" column="1" bodyfile="pros/include/pros/rtos.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* mutex_t</definition>
        <argsstring></argsstring>
        <name>mutex_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="106" column="1" bodyfile="pros/include/pros/rtos.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rtos_8h_1acd8d13c328bebdf9eddea27ff9448c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t millis</definition>
        <argsstring>(void)</argsstring>
        <name>millis</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the number of milliseconds since PROS initialized.</para><para><simplesect kind="return"><para>The number of milliseconds since PROS initialized </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a2e3ed8f26b8c1edcff493bc583f0a76a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t task_create</definition>
        <argsstring>(task_fn_t function, void *const parameters, uint32_t prio, const uint16_t stack_depth, const char *const name)</argsstring>
        <name>task_create</name>
        <param>
          <type><ref refid="rtos_8h_1aece0aa29b1f1538115228d2197239f98" kindref="member">task_fn_t</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>stack_depth</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new task and add it to the list of tasks that are ready to run.</para><para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the task entry function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that will be used as a parameter for the task being created. This memory should not typically come from stack, but rather from dynamically (i.e., malloc&apos;d) or statically allocated memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of words (i.e. 4 * stack_depth) available on the task&apos;s stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle by which the newly created task can be referenced. If an error occurred, NULL will be returned and errno can be checked for hints as to why task_create failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1acf328f16126485ade810e438db996180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_delete</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_delete</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Removes a task from the RTOS real time kernel&apos;s management. The task being deleted will be removed from all ready, blocked, suspended and event lists.</para><para>Memory dynamically allocated by the task is not automatically freed, and should be freed before the task is deleted.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the task to be deleted. Passing NULL will cause the calling task to be deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a3658dea4dcc916f72d05bd6a05bf3d19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_delay</definition>
        <argsstring>(const uint32_t milliseconds)</argsstring>
        <name>task_delay</name>
        <param>
          <type>const uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delays a task for a given number of milliseconds.</para><para>This is not the best method to have a task execute code at predefined intervals, as the delay time is measured from when the delay is requested. To delay cyclically, use <ref refid="rtos_8h_1a61c8ccf83a0dc79fc0e9fde5e87a0329" kindref="member">task_delay_until()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait (1000 milliseconds per second) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1ab8c5a8048d5576a33d7f79b95a2fa0dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void delay</definition>
        <argsstring>(const uint32_t milliseconds)</argsstring>
        <name>delay</name>
        <param>
          <type>const uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a61c8ccf83a0dc79fc0e9fde5e87a0329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_delay_until</definition>
        <argsstring>(uint32_t *const prev_time, const uint32_t delta)</argsstring>
        <name>task_delay_until</name>
        <param>
          <type>uint32_t *const</type>
          <declname>prev_time</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delays a task until a specified time. This function can be used by periodic tasks to ensure a constant execution frequency.</para><para>The task will be woken up at the time *prev_time + delta, and *prev_time will be updated to reflect the time at which the task will unblock.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev_time</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the location storing the setpoint time. This should typically be initialized to the return value of <ref refid="rtos_8h_1acd8d13c328bebdf9eddea27ff9448c2d" kindref="member">millis()</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait (1000 milliseconds per second) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a8d6d1ffc897a069346a6a1ee5d3acf87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t task_get_priority</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_priority</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the priority of the specified task.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The priority of the task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1aa906731a0dbda5c2382ca7e3cc32cc97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_set_priority</definition>
        <argsstring>(task_t task, uint32_t prio)</argsstring>
        <name>task_set_priority</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the priority of the specified task.</para><para>If the specified task&apos;s state is available to be scheduled (e.g. not blocked) and new priority is higher than the currently running task, a context switch may occur.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The new priority of the task </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a5d094df87681d230ebffa2cee23d6f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1a23d5ffd47ed255206f177fe9d891335b" kindref="member">task_state_e_t</ref></type>
        <definition>task_state_e_t task_get_state</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_state</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the state of the specified task.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The state of the task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a50ab98e83c207eaab4c2b9eb56d9ba0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_suspend</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_suspend</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Suspends the specified task, making it ineligible to be scheduled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to suspend </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a58bdeeedfe2d98fa57721bb7dad16fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_resume</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_resume</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resumes the specified task, making it eligible to be scheduled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to resume </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a7c182e8b87526eb0e4b6ec5a4c858b4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t task_get_count</definition>
        <argsstring>(void)</argsstring>
        <name>task_get_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. A task that has been deleted, but not yet reaped by the idle task will also be included in the count. Tasks recently created may take one context switch to be counted.</para><para><simplesect kind="return"><para>The number of tasks that are currently being managed by the kernel. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a81e2f8aab432c811c9e4c0028d99b284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* task_get_name</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_name</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the name of the specified task.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to check</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the name of the task </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1aad54400367541c9cf7f4eaaec235a9e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t task_get_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>task_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a task handle from the specified name</para><para>The operation takes a relatively long time and should be used sparingly.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to query</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A task handle with a matching name, or NULL if none were found. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1ad8c64e24feaa08391eb61b62ea2cdbd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t task_get_current</definition>
        <argsstring>()</argsstring>
        <name>task_get_current</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the currently running task handle. This could be useful if a task wants to tell another task about itself.</para><para><simplesect kind="return"><para>The currently running task handle. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a19e1a0a068f9d5e8493065f6b7944a63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t task_notify</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_notify</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a simple notification to task and increments the notification counter.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to notify</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Always returns true. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a81b5dad7acaef5dd60486ab85af5d54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t task_notify_ext</definition>
        <argsstring>(task_t task, uint32_t value, notify_action_e_t action, uint32_t *prev_value)</argsstring>
        <name>task_notify_ext</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="rtos_8h_1a42ea99b5e5d38da0b98154609cf6c570" kindref="member">notify_action_e_t</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>prev_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a notification to a task, optionally performing some action. Will also retrieve the value of the notification in the target task before modifying the notification value.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to notify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value used in performing the action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to optionally perform on the receiving task&apos;s notification value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the previous value of the target task&apos;s notification, may be NULL</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dependent on the notification action. For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without needing to overwrite, 1 otherwise. For all other NOTIFY_ACTION values: always return 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1aabfb0111c671a56176bc83bb1437635b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t task_notify_take</definition>
        <argsstring>(bool clear_on_exit, uint32_t timeout)</argsstring>
        <name>task_notify_take</name>
        <param>
          <type>bool</type>
          <declname>clear_on_exit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Waits for a notification to be nonzero.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clear_on_exit</parametername>
</parameternamelist>
<parameterdescription>
<para>If true (1), then the notification value is cleared. If false (0), then the notification value is decremented. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the amount of time to be spent waiting for a notification to occur.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the task&apos;s notification value before it is decremented or cleared </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1ae8697be0d552a81063536c88c0358f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool task_notify_clear</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_notify_clear</name>
        <param>
          <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clears the notification for a task.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to clear</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if there was not a notification waiting, true if there was </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a475d096afa3abcc9a276ca9fa54bafdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
        <definition>mutex_t mutex_create</definition>
        <argsstring>(void)</argsstring>
        <name>mutex_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a mutex.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para><para><simplesect kind="return"><para>A handle to a newly created mutex. If an error occurred, NULL will be returned and errno can be checked for hints as to why mutex_create failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a14452e92345bc1bab69e27f35c38e0f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mutex_take</definition>
        <argsstring>(mutex_t mutex, uint32_t timeout)</argsstring>
        <name>mutex_take</name>
        <param>
          <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex to attempt to lock. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait before the mutex becomes available. A timeout of 0 can be used to poll the mutex. TIMEOUT_MAX can be used to block indefinitely.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully taken, false otherwise. If false is returned, then errno is set with a hint about why the the mutex couldn&apos;t be taken. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="rtos_8h_1a600f042859f15dee6c34b236670ac3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool mutex_give</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_give</name>
        <param>
          <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlocks a mutex.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>Mutex to unlock.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully returned, false otherwise. If false is returned, then errno is set with a hint about why the mutex couldn&apos;t be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.h" line="404" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains declarations for the PROS RTOS kernel for use by typical VEX programmers.</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html</ulink> to learn more.</para><para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para><para>Copyright (c) 2017-2020, Purdue University ACM SIGBots. All rights reserved.</para><para>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>    </detaileddescription>
    <location file="pros/include/pros/rtos.h"/>
  </compounddef>
</doxygen>
