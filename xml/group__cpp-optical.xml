<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-optical" kind="group">
    <compoundname>cpp-optical</compoundname>
    <title>VEX Optical Sensor C++ API</title>
    <innerfile refid="optical_8hpp">optical.hpp</innerfile>
    <innerclass refid="classpros_1_1v5_1_1Optical" prot="public">pros::v5::Optical</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-optical_1gaf3814072204ecc2ad420701c9bb03a95" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Optical</definition>
        <argsstring>(const std::uint8_t port)</argsstring>
        <name>Optical</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Creates an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="57" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1ga172acf14d922023251daa9276adfa4a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_hue</definition>
        <argsstring>()</argsstring>
        <name>get_hue</name>
        <briefdescription>
<para>Get the detected color hue. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Hue has a range of 0 to 359.999</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>hue value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Hue:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_hue()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="81" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1ga2625290e9ed8b33d335bb25a5349bb6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_saturation</definition>
        <argsstring>()</argsstring>
        <name>get_saturation</name>
        <briefdescription>
<para>Get the detected color saturation. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Saturation has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>saturation value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Saturation:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_saturation()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="105" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1gaf2f75b8f8506931a5651bb48d7a8c01b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_proximity</definition>
        <argsstring>()</argsstring>
        <name>get_proximity</name>
        <briefdescription>
<para>Get the detected color brightness. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Brightness has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>brightness value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Brightness:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_brightness()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_brightness();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment">/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>Get<sp/>the<sp/>detected<sp/>proximity<sp/>value</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>This<sp/>is<sp/>not<sp/>available<sp/>if<sp/>gestures<sp/>are<sp/>being<sp/>detected.<sp/>proximity<sp/>has</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>a<sp/>range<sp/>of<sp/>0<sp/>to<sp/>255.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>This<sp/>function<sp/>uses<sp/>the<sp/>following<sp/>values<sp/>of<sp/>errno<sp/>when<sp/>an<sp/>error<sp/>state<sp/>is</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>reached:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>ENXIO<sp/>-<sp/>The<sp/>given<sp/>value<sp/>is<sp/>not<sp/>within<sp/>the<sp/>range<sp/>of<sp/>V5<sp/>ports<sp/>(1-21).</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>ENODEV<sp/>-<sp/>The<sp/>port<sp/>cannot<sp/>be<sp/>configured<sp/>as<sp/>an<sp/>Optical<sp/>Sensor</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>\return<sp/>Proximity<sp/>value<sp/>if<sp/>the<sp/>operation<sp/>was<sp/>successful<sp/>or<sp/>PROS_ERR<sp/>if</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>the<sp/>operation<sp/>failed,<sp/>setting<sp/>errno.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>\b<sp/>Example:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>\code{.cpp}</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pros::Optical<sp/>optical(1);</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Proximity:<sp/>&quot;<sp/>&lt;&lt;<sp/>optical.get_proximity()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>}</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="152" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1ga502513388196d8d7e78d6d6d311e8cc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_led_pwm</definition>
        <argsstring>(uint8_t value)</argsstring>
        <name>set_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the pwm value of the White LED on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>value that ranges from 0 to 100</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>The Error code encountered or PROS_SUCCESS.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a9efe22aaead3a5e936b5df459de02eba" kindref="member">initialize</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.set_led_pwm(100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="174" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1ga2453d482804c781a8fd87bbc15b10097" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_led_pwm</definition>
        <argsstring>()</argsstring>
        <name>get_led_pwm</name>
        <briefdescription>
<para>Get the pwm value of the White LED on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>value that ranges from 0 to 100</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>LED pwm value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.set_led_pwm(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;LED<sp/>PWM:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_led_pwm()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="198" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1gae793476408af54601bb422474b82ca99" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>pros::c::optical_rgb_s_t</type>
        <definition>virtual pros::c::optical_rgb_s_t get_rgb</definition>
        <argsstring>()</argsstring>
        <name>get_rgb</name>
        <briefdescription>
<para>Get the processed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>rgb value if the operation was successful or an <ref refid="structoptical__rgb__s__t" kindref="compound">optical_rgb_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pros::c::optical_rgb_s_t<sp/>rgb<sp/>=<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_rgb();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Red:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rgb.red<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Green:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rgb.green<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Blue:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rgb.blue<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Brightness:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rgb.brightness<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">pros::delay</ref>(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="226" column="34"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1ga2b2249e566062cd26c3e5ea7201a327e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>pros::c::optical_raw_s_t</type>
        <definition>virtual pros::c::optical_raw_s_t get_raw</definition>
        <argsstring>()</argsstring>
        <name>get_raw</name>
        <briefdescription>
<para>Get the raw un-processed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>raw rgb value if the operation was successful or an <ref refid="structoptical__raw__s__t" kindref="compound">optical_raw_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="239" column="34"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1ga7970b59b09c9063a8a686cfcf9ffb5ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>pros::c::optical_direction_e_t</type>
        <definition>virtual pros::c::optical_direction_e_t get_gesture</definition>
        <argsstring>()</argsstring>
        <name>get_gesture</name>
        <briefdescription>
<para>Get the most recent gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Gestures will be cleared after 500mS 0 = no gesture 1 = up (towards cable) 2 = down 3 = right 4 = left</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>gesture value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Gesture:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_gesture()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">pros::delay</ref>(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="270" column="40"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1gac8c6d23954aedd8f0557c5b3793bf805" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>pros::c::optical_gesture_s_t</type>
        <definition>virtual pros::c::optical_gesture_s_t get_gesture_raw</definition>
        <argsstring>()</argsstring>
        <name>get_gesture_raw</name>
        <briefdescription>
<para>Get the most recent raw gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>gesture value if the operation was successful or an <ref refid="structoptical__gesture__s__t" kindref="compound">optical_gesture_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.enable_gesture();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pros::c::optical_gesture_s_t<sp/>gesture<sp/>=<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_gesture_raw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Gesture<sp/>raw<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Up<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.udata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Down<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.ddata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Left<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.ldata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Right<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.rdata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.type<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Count:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.count<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">pros::delay</ref>(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="303" column="38"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-optical_1ga6bad3c7e71be57013fa7f46d49f5612a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t disable_gesture</definition>
        <argsstring>()</argsstring>
        <name>disable_gesture</name>
        <briefdescription>
<para>Enable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.enable_gesture();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pros::c::optical_gesture_s_t<sp/>gesture<sp/>=<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>.get_gesture_raw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Gesture<sp/>raw<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Up<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.udata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Down<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.ddata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Left<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.ldata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Right<sp/>data:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.rdata<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Type:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.type<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Count:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.count<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>gesture.time<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">pros::delay</ref>(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::int32_t<sp/>enable_gesture();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment"></highlight></codeline>
<codeline><highlight class="comment">/**</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>Disable<sp/>gesture<sp/>detection<sp/>on<sp/>the<sp/>sensor</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>This<sp/>function<sp/>uses<sp/>the<sp/>following<sp/>values<sp/>of<sp/>errno<sp/>when<sp/>an<sp/>error<sp/>state<sp/>is</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>reached:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>ENXIO<sp/>-<sp/>The<sp/>given<sp/>value<sp/>is<sp/>not<sp/>within<sp/>the<sp/>range<sp/>of<sp/>V5<sp/>ports<sp/>(1-21).</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>ENODEV<sp/>-<sp/>The<sp/>port<sp/>cannot<sp/>be<sp/>configured<sp/>as<sp/>an<sp/>Optical<sp/>Sensor</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>\return<sp/>1<sp/>if<sp/>the<sp/>operation<sp/>is<sp/>successful<sp/>or<sp/>PROS_ERR<sp/>if<sp/>the<sp/>operation<sp/>failed,</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>setting<sp/>errno.</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>\b<sp/>Example:</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>\code{.cpp}</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pros::Optical<sp/>optical(1);</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>optical.enable_gesture();</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(optical.get_gesture()<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Gesture<sp/>detected!&quot;&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optical.disable_gesture();</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/>}</highlight></codeline>
<codeline><highlight class="comment"><sp/><sp/>*<sp/></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="363" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="">
      <memberdef kind="friend" id="group__cpp-optical_1ga8a798c2f3ccbd6cf118e408dba8aa61f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, pros::Optical &amp;optical)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref> &amp;</type>
          <declname>optical</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format(this below is all in one line with no new line): <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> [port: (port number), hue: (hue), saturation: (saturation), brightness: (brightness), proximity: (proximity), rgb: {red, green, blue}]</para>
<para><bold>Example:</bold> <programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref>(1);</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/><ref refid="namespacepros_1_1v5_1ad258d4c51629346fceac4679b3209ad9a4313277ed1d56c552d84008ff59b3d64" kindref="member">optical</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.hpp" line="379" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
