<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="misc_8h" kind="file" language="C++">
    <compoundname>misc.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <includedby refid="misc_8hpp" local="yes">pros/misc.hpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>pros/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="1">
        <label>pros/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pros/distance.hpp</label>
        <link refid="distance_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="4">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>pros/gps.hpp</label>
        <link refid="gps_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>pros/link.hpp</label>
        <link refid="link_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>pros/serial.hpp</label>
        <link refid="serial_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>pros/optical.hpp</label>
        <link refid="optical_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>pros/rotation.hpp</label>
        <link refid="rotation_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>pros/motors.hpp</label>
        <link refid="motors_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>pros/imu.hpp</label>
        <link refid="imu_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
      <node id="8">
        <label>pros/device.hpp</label>
        <link refid="device_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pros/misc.hpp</label>
        <link refid="misc_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="user-defined">
      <header>V5 Competition</header>
      <memberdef kind="define" id="group__c-misc_1gadefb84e79d34a20dc8dc91813f289323" prot="public" static="no">
        <name>COMPETITION_DISABLED</name>
        <initializer>(1 &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is disabled, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!competition_is_disabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Run<sp/>competition<sp/>tasks<sp/>(like<sp/>Lift<sp/>Control<sp/>or<sp/>similar)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="44" column="9" bodyfile="pros/misc.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-misc_1gab1963437a4b6f9561d57f7e7e44bc853" prot="public" static="no">
        <name>COMPETITION_AUTONOMOUS</name>
        <initializer>(1 &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is disabled, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!competition_is_disabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Run<sp/>competition<sp/>tasks<sp/>(like<sp/>Lift<sp/>Control<sp/>or<sp/>similar)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="45" column="9" bodyfile="pros/misc.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-misc_1gae54538bebc289953e9238c59788a9649" prot="public" static="no">
        <name>COMPETITION_CONNECTED</name>
        <initializer>(1 &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is disabled, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!competition_is_disabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Run<sp/>competition<sp/>tasks<sp/>(like<sp/>Lift<sp/>Control<sp/>or<sp/>similar)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="46" column="9" bodyfile="pros/misc.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-misc_1gaf3f09030b1285ede2e9a6182cbdf0133" prot="public" static="no">
        <name>competition_is_disabled</name>
        <param></param>
        <initializer>((competition_get_status() &amp; <ref refid="group__c-misc_1gadefb84e79d34a20dc8dc91813f289323" kindref="member">COMPETITION_DISABLED</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is disabled, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!competition_is_disabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Run<sp/>competition<sp/>tasks<sp/>(like<sp/>Lift<sp/>Control<sp/>or<sp/>similar)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="97" column="9" bodyfile="pros/misc.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-misc_1ga5601e15718be476d66ecaf2cdcbe061f" prot="public" static="no">
        <name>competition_is_connected</name>
        <param></param>
        <initializer>((competition_get_status() &amp; <ref refid="group__c-misc_1gae54538bebc289953e9238c59788a9649" kindref="member">COMPETITION_CONNECTED</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is connected to competition control, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(competition_is_connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="112" column="9" bodyfile="pros/misc.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-misc_1ga6bbebf8507344dd452503249813923c8" prot="public" static="no">
        <name>competition_is_autonomous</name>
        <param></param>
        <initializer>((competition_get_status() &amp; <ref refid="group__c-misc_1gab1963437a4b6f9561d57f7e7e44bc853" kindref="member">COMPETITION_AUTONOMOUS</ref>) != 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is in autonomous mode, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!competition_is_autonomous())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Wait<sp/>to<sp/>do<sp/>anything<sp/>until<sp/>autonomous<sp/>starts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(competition_is_autonomous())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>whatever<sp/>code<sp/>is<sp/>desired<sp/>to<sp/>just<sp/>execute<sp/>in<sp/>autonomous</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="134" column="9" bodyfile="pros/misc.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="misc_8h_1acceaccd4cf9a93ef86e8f21206a6645a" prot="public" static="no">
        <name>NUM_V5_PORTS</name>
        <initializer>(22)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="30" column="9" bodyfile="pros/misc.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-misc_1gafe0c8d912448e3987f5a588dc8881da4" prot="public" static="no">
        <name>CONTROLLER_PORT_MUTEX_TAKE</name>
        <param><defname>id</defname></param>
        <param><defname>port</defname></param>
        <initializer>	switch (id) {							\
		case E_CONTROLLER_MASTER:			\
			port = V5_PORT_CONTROLLER_1;	\
			break;							\
		case E_CONTROLLER_PARTNER:			\
			port = V5_PORT_CONTROLLER_2;	\
			break;							\
		default:							\
			errno = EINVAL;					\
			return <ref refid="error_8h_1a8748a4dfbe487cedaafa15f1ff7f2f38" kindref="member">PROS_ERR</ref>;				\
	}										\
	if (!internal_port_mutex_take(port)) {	\
		errno = EACCES;						\
		return <ref refid="error_8h_1a8748a4dfbe487cedaafa15f1ff7f2f38" kindref="member">PROS_ERR</ref>;					\
	}										\</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="245" column="9" bodyfile="pros/misc.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" prot="public" static="no" strong="no">
        <type></type>
        <name>controller_id_e_t</name>
        <enumvalue id="group__c-misc_1ggaf1323f00203099060d46f722b1fbd460a1c9d9311575877d185c44df1cadad226" prot="public">
          <name>E_CONTROLLER_MASTER</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The master controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1ggaf1323f00203099060d46f722b1fbd460a62d367ebc8ce395520d786f5c12614ac" prot="public">
          <name>E_CONTROLLER_PARTNER</name>
          <briefdescription>
<para>The partner controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="148" column="14" bodyfile="pros/misc.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="enum" id="group__c-misc_1ga8bdd0963e2bc0d4fbe03435eee8a5ca5" prot="public" static="no" strong="no">
        <type></type>
        <name>controller_analog_e_t</name>
        <enumvalue id="group__c-misc_1gga8bdd0963e2bc0d4fbe03435eee8a5ca5ac73153bd6a186402cb8fad10c069ec55" prot="public">
          <name>E_CONTROLLER_ANALOG_LEFT_X</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The horizontal axis of the controller’s left analog stick. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8bdd0963e2bc0d4fbe03435eee8a5ca5ac68939b7adc180b25b95367fd0098e99" prot="public">
          <name>E_CONTROLLER_ANALOG_LEFT_Y</name>
          <briefdescription>
<para>The vertical axis of the controller’s left analog stick. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8bdd0963e2bc0d4fbe03435eee8a5ca5a1881009d58a89b01179876a44a768774" prot="public">
          <name>E_CONTROLLER_ANALOG_RIGHT_X</name>
          <briefdescription>
<para>The horizontal axis of the controller’s right analog stick. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8bdd0963e2bc0d4fbe03435eee8a5ca5a3954a2f3b6de53400df445cc144a67ca" prot="public">
          <name>E_CONTROLLER_ANALOG_RIGHT_Y</name>
          <briefdescription>
<para>The vertical axis of the controller’s right analog stick. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="157" column="14" bodyfile="pros/misc.h" bodystart="157" bodyend="166"/>
      </memberdef>
      <memberdef kind="enum" id="group__c-misc_1ga8c380ff02828ee53954bc0ce274253ed" prot="public" static="no" strong="no">
        <type></type>
        <name>controller_digital_e_t</name>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda6152392f863b995bc682e6a7129dbdae" prot="public">
          <name>E_CONTROLLER_DIGITAL_L1</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>The first trigger on the left side of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253edab0b7af86329d2806c7e52b8396ca3a76" prot="public">
          <name>E_CONTROLLER_DIGITAL_L2</name>
          <briefdescription>
<para>The second trigger on the left side of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253edae3ae971723bd1d263b7661264df420fc" prot="public">
          <name>E_CONTROLLER_DIGITAL_R1</name>
          <briefdescription>
<para>The first trigger on the right side of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda982e210433ab2a7ba149c4008ad73851" prot="public">
          <name>E_CONTROLLER_DIGITAL_R2</name>
          <briefdescription>
<para>The second trigger on the right side of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda092df532483a0b27281748df9d226772" prot="public">
          <name>E_CONTROLLER_DIGITAL_UP</name>
          <briefdescription>
<para>The up arrow on the left arrow pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda4290d3c38ae937a54b8409c7567be50d" prot="public">
          <name>E_CONTROLLER_DIGITAL_DOWN</name>
          <briefdescription>
<para>The down arrow on the left arrow pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda83537ab72f80c74cb4c06a195b885b6c" prot="public">
          <name>E_CONTROLLER_DIGITAL_LEFT</name>
          <briefdescription>
<para>The left arrow on the left arrow pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda6311765554410202cc2c099695640d91" prot="public">
          <name>E_CONTROLLER_DIGITAL_RIGHT</name>
          <briefdescription>
<para>The right arrow on the left arrow pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda1ba98d2c4900c0ad3123f15090779fad" prot="public">
          <name>E_CONTROLLER_DIGITAL_X</name>
          <briefdescription>
<para>The ‘X’ button on the right button pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda3b8c6ebc62fb8133413bb7090814ed54" prot="public">
          <name>E_CONTROLLER_DIGITAL_B</name>
          <briefdescription>
<para>The ‘B’ button on the right button pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253eda89dfc687cc16e2e7b1ad022b47a698c4" prot="public">
          <name>E_CONTROLLER_DIGITAL_Y</name>
          <briefdescription>
<para>The ‘Y’ button on the right button pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-misc_1gga8c380ff02828ee53954bc0ce274253edabf8d8d50802f9417ba1f1512d2822f98" prot="public">
          <name>E_CONTROLLER_DIGITAL_A</name>
          <briefdescription>
<para>The ‘A’ button on the right button pad of the controller. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="171" column="14" bodyfile="pros/misc.h" bodystart="171" bodyend="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__c-misc_1ga53280163169348b8429c14c340a7c2b3" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* baked_date</definition>
        <argsstring></argsstring>
        <name>baked_date</name>
        <briefdescription>
<para>Date and Time <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="728" column="19" declfile="pros/misc.h" declline="728" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-misc_1ga33aa244a3bbfcc84286cfa8999805cf2" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* baked_time</definition>
        <argsstring></argsstring>
        <name>baked_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="729" column="19" declfile="pros/misc.h" declline="729" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__c-misc_1ga464d2c47de8b3b726b1e50c7538e4459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>competition_get_status</definition>
        <argsstring>(void)</argsstring>
        <name>competition_get_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current status of the competition control.</para>
<para><simplesect kind="return"><para>The competition control status as a mask of bits with COMPETITION_{ENABLED,AUTONOMOUS,CONNECTED}.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(competition_get_status()<sp/>&amp;<sp/>COMPETITION_CONNECTED<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="71" column="9" declfile="pros/misc.h" declline="71" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga1a381afe1cabb7c9b5dd5a734a5ee4a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_is_connected</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_is_connected</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Checks if the controller is connected. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the controller is connected, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(competition_is_connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="291" column="9" declfile="pros/misc.h" declline="291" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga1a7c4e6bcb39260bf7ce5b1a58638753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_analog</definition>
        <argsstring>(controller_id_e_t id, controller_analog_e_t channel)</argsstring>
        <name>controller_get_analog</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>controller_analog_e_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Gets the value of an analog channel (joystick) on a controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog channel to get. Must be one of ANALOG_LEFT_X, ANALOG_LEFT_Y, ANALOG_RIGHT_X, ANALOG_RIGHT_Y</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current reading of the analog channel: [-127, 127]. If the controller was not connected, then 0 is returned</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="323" column="9" declfile="pros/misc.h" declline="323" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga3708b3194feeb243710d0fa2079e57b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_battery_capacity</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_get_battery_capacity</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the battery capacity of the given controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The controller&apos;s battery capacity</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Capacity:<sp/>%d\n&quot;,<sp/>controller_get_battery_capacity(E_CONTROLLER_MASTER));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="347" column="9" declfile="pros/misc.h" declline="347" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga35f22987a76d5a3c9117755b0abc2548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_battery_level</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_get_battery_level</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the battery level of the given controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The controller&apos;s battery level</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Level:<sp/>%d\n&quot;,<sp/>controller_get_battery_level(E_CONTROLLER_MASTER));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="371" column="9" declfile="pros/misc.h" declline="371" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga764da856ff7fcb710b10daa1a2fe4519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_digital</definition>
        <argsstring>(controller_id_e_t id, controller_digital_e_t button)</argsstring>
        <name>controller_get_digital</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>controller_digital_e_t</type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Checks if a digital channel (button) on the controller is currently pressed. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button on the controller is pressed. If the controller was not connected, then 0 is returned</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(controller_get_digital(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_A))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_set(1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_set(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="408" column="9" declfile="pros/misc.h" declline="408" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1gac98088451005003975c19dda4e20a1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_digital_new_press</definition>
        <argsstring>(controller_id_e_t id, controller_digital_e_t button)</argsstring>
        <name>controller_get_digital_new_press</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>controller_digital_e_t</type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Returns a rising-edge case for a controller button press. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> A calls this function for buttons 1 and 2. <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.</para>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button on the controller is pressed and had not been pressed the last time this function was called, 0 otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(controller_get_digital_new_press(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_A))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Toggle<sp/>pneumatics<sp/>or<sp/>other<sp/>similar<sp/>actions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="450" column="9" declfile="pros/misc.h" declline="450" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga7bdcfd084f96b7eda87867de947997b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_print</definition>
        <argsstring>(controller_id_e_t id, uint8_t line, uint8_t col, const char *fmt,...)</argsstring>
        <name>controller_print</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Sets text to the controller LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number at which the text will be displayed [0-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number at which the text will be displayed [0-14] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string to print to the controller </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument list for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>print<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>text<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>controller_print(E_CONTROLLER_MASTER,<sp/>0,<sp/>0,<sp/>&quot;Counter:<sp/>%d&quot;,<sp/>count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="495" column="9" declfile="pros/misc.h" declline="495" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga9e301c0fb1fe773010f0f63c07f0ff30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_set_text</definition>
        <argsstring>(controller_id_e_t id, uint8_t line, uint8_t col, const char *str)</argsstring>
        <name>controller_set_text</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Sets text to the controller LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number at which the text will be displayed [0-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number at which the text will be displayed [0-14] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-formatted string to print to the controller</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>print<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>text<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controller_set_text(E_CONTROLLER_MASTER,<sp/>0,<sp/>0,<sp/>&quot;Example<sp/>text&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="538" column="9" declfile="pros/misc.h" declline="538" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga57f585f20ca272ce035390e9a7ba8cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_clear_line</definition>
        <argsstring>(controller_id_e_t id, uint8_t line)</argsstring>
        <name>controller_clear_line</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clears an individual line of the controller screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is currently in beta, so continuous, fast updates will not work well.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number to clear [0-2]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="565" column="9" declfile="pros/misc.h" declline="565" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga9ccf53b8954bc4033abebec9a79da0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_clear</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_clear</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Clears all of the lines on the controller screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>controller_set_text(E_CONTROLLER_MASTER,<sp/>0,<sp/>0,<sp/>&quot;Example&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>controller_clear_line(E_CONTROLLER_MASTER,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="596" column="9" declfile="pros/misc.h" declline="596" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga6a2fde9e8c3eec3dc88cb00235a1df7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_rumble</definition>
        <argsstring>(controller_id_e_t id, const char *rumble_pattern)</argsstring>
        <name>controller_rumble</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rumble_pattern</declname>
        </param>
        <briefdescription>
<para>Rumble the controller. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> rumble activation is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rumble_pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>A string consisting of the characters &apos;.&apos;, &apos;-&apos;, and &apos; &apos;, where dots are short rumbles, dashes are long rumbles, and spaces are pauses. Maximum supported length is 8 characters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>send<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>controller_rumble(E_CONTROLLER_MASTER,<sp/>&quot;.<sp/>-<sp/>.<sp/>-&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="636" column="9" declfile="pros/misc.h" declline="636" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga9d34cbe2b17dc9daec083fdaf8c10a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::battery_get_voltage</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current voltage of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current voltage of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery&apos;s<sp/>Voltage:<sp/>%d\n&quot;,<sp/>battery_get_voltage());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="654" column="9" declfile="pros/misc.h" declline="654" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga6cd34d4960ca5193d70626bc59094505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::battery_get_current</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current current of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current current of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Current:<sp/>%d\n&quot;,<sp/>battery_get_current());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="672" column="9" declfile="pros/misc.h" declline="672" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga79dd0288c3ac547c75c25e374087f91b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::battery_get_temperature</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_temperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current temperature of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current temperature of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery&apos;s<sp/>Temperature:<sp/>%d\n&quot;,<sp/>battery_get_temperature());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="690" column="8" declfile="pros/misc.h" declline="690" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1gaa5e755785c93c5cafe6b0d98695d7c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::battery_get_capacity</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_capacity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current capacity of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current capacity of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Level:<sp/>%d\n&quot;,<sp/>battery_get_capacity());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="708" column="8" declfile="pros/misc.h" declline="708" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1gafa370f223e76f68f27bdfed38724724e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::usd_is_installed</definition>
        <argsstring>(void)</argsstring>
        <name>usd_is_installed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the SD card is installed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if the SD card is installed, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;%i&quot;,<sp/>usd_is_installed());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="722" column="9" declfile="pros/misc.h" declline="722" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for miscellaneous functions pertaining to the controller, battery, and competition control.</para>
<para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html">https://pros.cs.purdue.edu/v5/tutorials/topical/controller.html</ulink> to learn more.</para>
<para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2023, Purdue University ACM SIGBots. All rights reservered.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/misc.h"/>
  </compounddef>
</doxygen>
