<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespacepros_1_1c" kind="namespace" language="C++">
    <compoundname>pros::c</compoundname>
      <sectiondef kind="user-defined">
      <header>RTOS Facilities</header>
      <description><para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html">https://pros.cs.purdue.edu/v5/extended/multitasking.html</ulink> to learn more </para>
</description>
      <memberdef kind="typedef" id="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* queue_t</definition>
        <argsstring></argsstring>
        <name>queue_t</name>
        <briefdescription>
<para>Unblocks a task in the Blocked state (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>waiting for a delay, on a semaphore, etc.).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to unblock</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the task was unblocked, false otherwise</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">task_t<sp/>task<sp/>=<sp/>task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
<codeline><highlight class="normal">task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>in<sp/>another<sp/>task<sp/>somewhere<sp/>else,<sp/>this<sp/>will<sp/>abort<sp/>the<sp/>task_delay<sp/>bove:</highlight></codeline>
<codeline><highlight class="normal">task_abort_delay(task);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="56" column="14" bodyfile="pros/apix.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__apix_1gabc53a59ab4c3c8f2d7660e63990be7a7" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* sem_t</definition>
        <argsstring></argsstring>
        <name>sem_t</name>
        <briefdescription>
<para>Unblocks a task in the Blocked state (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>waiting for a delay, on a semaphore, etc.).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to unblock</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the task was unblocked, false otherwise</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">task_t<sp/>task<sp/>=<sp/>task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
<codeline><highlight class="normal">task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>in<sp/>another<sp/>task<sp/>somewhere<sp/>else,<sp/>this<sp/>will<sp/>abort<sp/>the<sp/>task_delay<sp/>bove:</highlight></codeline>
<codeline><highlight class="normal">task_abort_delay(task);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="57" column="14" bodyfile="pros/apix.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gaeace1284e382f9a8cd7734a34965770a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::task_abort_delay</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_abort_delay</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Unblocks a task in the Blocked state (e.g. </para>
        </briefdescription>
        <detaileddescription>
<para>waiting for a delay, on a semaphore, etc.).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to unblock</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the task was unblocked, false otherwise</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">task_t<sp/>task<sp/>=<sp/>task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
<codeline><highlight class="normal">task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>in<sp/>another<sp/>task<sp/>somewhere<sp/>else,<sp/>this<sp/>will<sp/>abort<sp/>the<sp/>task_delay<sp/>bove:</highlight></codeline>
<codeline><highlight class="normal">task_abort_delay(task);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="77" column="6" declfile="pros/apix.h" declline="77" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga8e451f518ac641b2aba0dad90ba12a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_notify_when_deleting</definition>
        <argsstring>(task_t target_task, task_t task_to_notify, uint32_t value, notify_action_e_t notify_action)</argsstring>
        <name>task_notify_when_deleting</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>target_task</declname>
        </param>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task_to_notify</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="group__c-rtos_1ga42ea99b5e5d38da0b98154609cf6c570" kindref="member">notify_action_e_t</ref></type>
          <declname>notify_action</declname>
        </param>
        <briefdescription>
<para>Notify a task when a target task is being deleted. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target_task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task being watched for deletion </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>task_to_notify</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to notify when target_task is deleted </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to supply to task_notify_ext </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>notify_action</parametername>
</parameternamelist>
<parameterdescription>
<para>The action to supply to task_notify_ext</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">task_t<sp/>task_to_delete<sp/>=<sp/>task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
<codeline><highlight class="normal">task_t<sp/>task_to_notify<sp/>=<sp/>task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn2&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">task_notify_ext(task_to_notify,<sp/>0,<sp/>NOTIFY_ACTION_INCREMENT,<sp/>NULL);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">task_notify_when_deleting(task_to_delete,<sp/>task_get_current(),<sp/>0,<sp/>NOTIFY_ACTION_NONE);</highlight></codeline>
<codeline><highlight class="normal">task_delete(task_to_delete);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="104" column="6" declfile="pros/apix.h" declline="104" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga4eef1a2598a22cbf8000fe03633d0b13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
        <definition>mutex_t pros::c::mutex_recursive_create</definition>
        <argsstring>(void)</argsstring>
        <name>mutex_recursive_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a recursive mutex which can be locked recursively by the owner. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A newly created recursive mutex.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_recursive_create();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_recursive_take(mutex,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>critical<sp/>section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_recursive_give(mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="129" column="9" declfile="pros/apix.h" declline="129" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga960dac0c60f0f13331f14325d56d7506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::mutex_recursive_take</definition>
        <argsstring>(mutex_t mutex, uint32_t timeout)</argsstring>
        <name>mutex_recursive_take</name>
        <param>
          <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Takes a recursive mutex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex handle created by mutex_recursive_create </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>wait_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of time to wait before timing out</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the mutex was obtained, 0 otherwise</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_recursive_create();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_recursive_take(mutex,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>critical<sp/>section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_recursive_give(mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="158" column="6" declfile="pros/apix.h" declline="158" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga0366fbae5b45a13bb3d76ba963fde37b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::mutex_recursive_give</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_recursive_give</name>
        <param>
          <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Gives a recursive mutex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex handle created by mutex_recursive_create</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the mutex was obtained, 0 otherwise</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_recursive_create();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_recursive_take(mutex,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>critical<sp/>section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_recursive_give(mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="185" column="6" declfile="pros/apix.h" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga35e2514c392ad052f702c7c6a3ed5ae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t pros::c::mutex_get_owner</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_get_owner</name>
        <param>
          <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Returns a handle to the current owner of a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para>A mutex handle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the current task that owns the mutex, or NULL if the mutex isn&apos;t owned.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal"><sp/>mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>void<sp/>task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex_take(mutex,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>//<sp/>critical<sp/>section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>mutex_give(mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/>task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/>void<sp/>opcontrol(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(joystick_get_digital(1,<sp/>7,<sp/>JOY_UP))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task_t<sp/>owner<sp/>=<sp/>mutex_get_owner(mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(owner<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Mutex<sp/>is<sp/>owned<sp/>by<sp/>task<sp/>%s&quot;,<sp/>task_get_name(owner));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Mutex<sp/>is<sp/>not<sp/>owned&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="226" column="8" declfile="pros/apix.h" declline="226" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga5a6c741414670ea06a33a740e00a6fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apix_1gabc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
        <definition>sem_t pros::c::sem_create</definition>
        <argsstring>(uint32_t max_count, uint32_t init_count)</argsstring>
        <name>sem_create</name>
        <param>
          <type>uint32_t</type>
          <declname>max_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>init_count</declname>
        </param>
        <briefdescription>
<para>Creates a counting sempahore. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum count value that can be reached. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial count value assigned to the new semaphore.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created semaphore. If an error occurred, NULL will be returned and errno can be checked for hints as to why sem_create failed.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">//<sp/>Binary<sp/>semaphore<sp/>acts<sp/>as<sp/>a<sp/>mutex</highlight></codeline>
<codeline><highlight class="normal">sem_t<sp/>sem<sp/>=<sp/>sem_create(1,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sem_take(sem,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>critical<sp/>section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sem_give(sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="257" column="7" declfile="pros/apix.h" declline="257" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gab5d0d18da11c1a8787a22def530943ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::sem_delete</definition>
        <argsstring>(sem_t sem)</argsstring>
        <name>sem_delete</name>
        <param>
          <type><ref refid="group__apix_1gabc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Deletes a semaphore (or binary semaphore) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore to delete</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">//<sp/>Binary<sp/>semaphore<sp/>acts<sp/>as<sp/>a<sp/>mutex</highlight></codeline>
<codeline><highlight class="normal">sem_t<sp/>sem<sp/>=<sp/>sem_create(1,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sem_take(sem,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>critical<sp/>section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sem_give(sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol(void)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(joystick_get_digital(1,<sp/>7,<sp/>JOY_UP))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>honestly<sp/>this<sp/>is<sp/>a<sp/>bad<sp/>example<sp/>because<sp/>you<sp/>should<sp/>never<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>delete<sp/>a<sp/>semaphore<sp/>like<sp/>this</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sem_delete(sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="294" column="6" declfile="pros/apix.h" declline="294" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gab60398e0ab4ac65a8556dbf67907ad64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apix_1gabc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
        <definition>sem_t pros::c::sem_binary_create</definition>
        <argsstring>(void)</argsstring>
        <name>sem_binary_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a binary semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A newly created semaphore.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">//<sp/>Binary<sp/>semaphore<sp/>acts<sp/>as<sp/>a<sp/>mutex</highlight></codeline>
<codeline><highlight class="normal">sem_t<sp/>sem<sp/>=<sp/>sem_binary_create();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sem_take(sem,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>critical<sp/>section</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sem_give(sem);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">task_create(task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;task_fn&quot;);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="319" column="7" declfile="pros/apix.h" declline="319" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga29a092d6f1b15aed15a76a79b027ab89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::sem_wait</definition>
        <argsstring>(sem_t sem, uint32_t timeout)</argsstring>
        <name>sem_wait</name>
        <param>
          <type><ref refid="group__apix_1gabc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits for the semaphore&apos;s value to be greater than 0. </para>
        </briefdescription>
        <detaileddescription>
<para>If the value is already greater than 0, this function immediately returns.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores">https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore to wait on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait before the semaphore&apos;s becomes available. A timeout of 0 can be used to poll the sempahore. TIMEOUT_MAX can be used to block indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the semaphore was successfully take, false otherwise. If false is returned, then errno is set with a hint about why the sempahore couldn&apos;t be taken. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="339" column="6" declfile="pros/apix.h" declline="339" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga1224c0d9b29e68b15971b90d2fdb6f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::sem_post</definition>
        <argsstring>(sem_t sem)</argsstring>
        <name>sem_post</name>
        <param>
          <type><ref refid="group__apix_1gabc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Increments a semaphore&apos;s value. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores">https://pros.cs.purdue.edu/v5/tutorials/multitasking.html#semaphores</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>Semaphore to post</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the value was incremented, false otherwise. If false is returned, then errno is set with a hint about why the semaphore couldn&apos;t be taken. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="354" column="6" declfile="pros/apix.h" declline="354" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gae41c284e8d4047254e20c4d5f41a6d5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::sem_get_count</definition>
        <argsstring>(sem_t sem)</argsstring>
        <name>sem_get_count</name>
        <param>
          <type><ref refid="group__apix_1gabc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
          <declname>sem</declname>
        </param>
        <briefdescription>
<para>Returns the current value of the semaphore. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra">https://pros.cs.purdue.edu/v5/extended/multitasking.html#extra</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sem</parametername>
</parameternamelist>
<parameterdescription>
<para>A semaphore handle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current value of the semaphore (e.g. the number of resources available) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="368" column="10" declfile="pros/apix.h" declline="368" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gae60412052d83e6c9b62ff02398547518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
        <definition>queue_t pros::c::queue_create</definition>
        <argsstring>(uint32_t length, uint32_t item_size)</argsstring>
        <name>queue_create</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>item_size</declname>
        </param>
        <briefdescription>
<para>Creates a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of items that the queue can contain. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes each item in the queue will require.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to a newly created queue, or NULL if the queue cannot be created. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="384" column="9" declfile="pros/apix.h" declline="384" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gaf9cc8a3a8c3ce36dcd31ead2a0c3f4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::queue_prepend</definition>
        <argsstring>(queue_t queue, const void *item, uint32_t timeout)</argsstring>
        <name>queue_prepend</name>
        <param>
          <type><ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Posts an item to the front of a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The item is queued by copy, not by reference.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the item that will be placed on the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the item was preprended, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="404" column="6" declfile="pros/apix.h" declline="404" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gaa42af929135978ccfd393931ec464980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::queue_append</definition>
        <argsstring>(queue_t queue, const void *item, uint32_t timeout)</argsstring>
        <name>queue_append</name>
        <param>
          <type><ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Posts an item to the end of a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>The item is queued by copy, not by reference.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the item that will be placed on the queue. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait for space to become available. A timeout of 0 can be used to attempt to post without blocking. TIMEOUT_MAX can be used to block indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the item was preprended, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="424" column="6" declfile="pros/apix.h" declline="424" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gaf9b0095a2b8ba4e68b45cebb7105af34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::queue_peek</definition>
        <argsstring>(queue_t queue, void *const buffer, uint32_t timeout)</argsstring>
        <name>queue_peek</name>
        <param>
          <type><ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive an item from a queue without removing the item from the queue. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer to which the received item will be copied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. TIMEOUT_MAX can be used to block indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an item was copied into the buffer, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="442" column="6" declfile="pros/apix.h" declline="442" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga8f80179b408b88dcc17e472816fa89d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::queue_recv</definition>
        <argsstring>(queue_t queue, void *const buffer, uint32_t timeout)</argsstring>
        <name>queue_recv</name>
        <param>
          <type><ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receive an item from the queue. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer to which the received item will be copied </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum amount of time the task should block waiting for an item to receive should the queue be empty at the time of the call. <ref refid="group__apix_1ga8f80179b408b88dcc17e472816fa89d6" kindref="member">queue_recv()</ref> will return immediately if timeout is zero and the queue is empty.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if an item was copied into the buffer, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="462" column="6" declfile="pros/apix.h" declline="462" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga96ad85640c15b62c066ed406be70970b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::queue_get_waiting</definition>
        <argsstring>(const queue_t queue)</argsstring>
        <name>queue_get_waiting</name>
        <param>
          <type>const <ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Return the number of messages stored in a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of messages available in the queue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="475" column="10" declfile="pros/apix.h" declline="475" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga1b26a8014aaedc3b376c0a2ec3cfc42a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::queue_get_available</definition>
        <argsstring>(const queue_t queue)</argsstring>
        <name>queue_get_available</name>
        <param>
          <type>const <ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Return the number of spaces left in a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>The queue handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of spaces available in the queue. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="488" column="10" declfile="pros/apix.h" declline="488" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga9d976079962026303ca54ec5b6b56ee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::queue_delete</definition>
        <argsstring>(queue_t queue)</argsstring>
        <name>queue_delete</name>
        <param>
          <type><ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Delete a queue. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues">https://pros.cs.purdue.edu/v5/extended/multitasking.html#queues</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue handle to delete </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="499" column="6" declfile="pros/apix.h" declline="499" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga65b42a22f90764318ef6ed0f13eeda42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::queue_reset</definition>
        <argsstring>(queue_t queue)</argsstring>
        <name>queue_reset</name>
        <param>
          <type><ref refid="group__apix_1ga2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
          <declname>queue</declname>
        </param>
        <briefdescription>
<para>Resets a queue to an empty state. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>queue</parametername>
</parameternamelist>
<parameterdescription>
<para>Queue handle to reset </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="507" column="6" declfile="pros/apix.h" declline="507" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Device Registration</header>
      <memberdef kind="function" id="group__apix_1ga553905fad6df994d7e2ede7cf53b9f83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pros::c::registry_bind_port</definition>
        <argsstring>(uint8_t port, v5_device_e_t device_type)</argsstring>
        <name>registry_bind_port</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>v5_device_e_t</type>
          <declname>device_type</declname>
        </param>
        <briefdescription>
<para>Registers a device in the given zero-indexed port. </para>
        </briefdescription>
        <detaileddescription>
<para>Registers a device of the given type in the given port into the registry, if that type of device is detected to be plugged in to that port.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (0-20), or a a different device than specified is plugged in. EADDRINUSE - The port is already registered to another device.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port number to register the device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of device to register</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 upon success, PROS_ERR upon failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="533" column="5" declfile="pros/apix.h" declline="533" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gaac4da3ecf327e9d3b68283735650274f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pros::c::registry_unbind_port</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>registry_unbind_port</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Deregisters a devices from the given zero-indexed port. </para>
        </briefdescription>
        <detaileddescription>
<para>Removes the device registed in the given port, if there is one.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (0-20).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port number to deregister</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 upon success, PROS_ERR upon failure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="549" column="5" declfile="pros/apix.h" declline="549" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga0cd9577a7facb56ef145e9508849a395" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v5_device_e_t</type>
        <definition>v5_device_e_t pros::c::registry_get_bound_type</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>registry_get_bound_type</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the type of device registered to the zero-indexed port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (0-20).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 0-20</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The type of device that is registered into the port (NOT what is plugged in) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="564" column="15" declfile="pros/apix.h" declline="564" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gaf7b9f904f53cb888950c0e8752354937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v5_device_e_t</type>
        <definition>v5_device_e_t pros::c::registry_get_plugged_type</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>registry_get_plugged_type</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the type of the device plugged into the zero-indexed port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (0-20).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 0-20</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The type of device that is plugged into the port (NOT what is registered) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="579" column="15" declfile="pros/apix.h" declline="579" declcolumn="15"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Filesystem</header>
      <memberdef kind="function" id="group__apix_1ga16d6c8a8a74f8445db83bedbcb2f35bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serctl</definition>
        <argsstring>(const uint32_t action, void *const extra_arg)</argsstring>
        <name>serctl</name>
        <param>
          <type>const uint32_t</type>
          <declname>action</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>extra_arg</declname>
        </param>
        <briefdescription>
<para>Control settings of the serial driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to perform on the serial driver. See the SERCTL_* macros for details on the different actions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument to pass in based on the action </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="595" column="9" declfile="pros/apix.h" declline="595" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1ga01b62747fbed77dcd50879d4d557adfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::fdctl</definition>
        <argsstring>(int file, const uint32_t action, void *const extra_arg)</argsstring>
        <name>fdctl</name>
        <param>
          <type>int</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>action</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>extra_arg</declname>
        </param>
        <briefdescription>
<para>Control settings of the microSD card driver. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to perform on the microSD card driver. See the USDCTL_* macros for details on the different actions. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument to pass in based on the action Control settings of the way the file&apos;s driver treats the file</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A valid file descriptor number </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to perform on the file&apos;s driver. See the <emphasis>CTL_</emphasis> macros for details on the different actions. Note that the action passed in must match the correct driver (e.g. don&apos;t perform a SERCTL_* action on a microSD card file) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>extra_arg</parametername>
</parameternamelist>
<parameterdescription>
<para>An argument to pass in based on the action </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="622" column="9" declfile="pros/apix.h" declline="622" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gaad01c082a5899e0ab42abdda37d3d425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_reversed</definition>
        <argsstring>(int8_t port, const bool reverse)</argsstring>
        <name>motor_set_reversed</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Sets the reverse flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This will invert its movements and the values returned for its position.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>True reverses the motor, false is default</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_reversed(1,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Is<sp/>this<sp/>motor<sp/>reversed?<sp/>%d\n&quot;,<sp/>motor_is_reversed(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="650" column="9" declfile="pros/apix.h" declline="650" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__apix_1gad78caa8efd1b34a316037a036f1f2ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_reversed</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_is_reversed</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the operation direction of the motor as set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor has been reversed and 0 if the motor was not reversed, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Is<sp/>the<sp/>motor<sp/>reversed?<sp/>%d\n&quot;,<sp/>motor_is_reversed(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;Is<sp/>the<sp/>motor<sp/>reversed?<sp/>0&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/apix.h" line="674" column="9" declfile="pros/apix.h" declline="674" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value Reset Functions</header>
      <memberdef kind="function" id="group__c-imu_1ga7613cb8ad7dbe92244f862f038040077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_heading</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s heading to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_tare_heading(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="557" column="9" declfile="pros/imu.h" declline="557" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga33ea7dacd1ee92bc6bf011cb109cadd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s rotation to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_tare_rotation(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="587" column="9" declfile="pros/imu.h" declline="587" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga0ec5652dee78d7b6582436ca72753eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_pitch</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s pitch to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_tare_pitch(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="615" column="9" declfile="pros/imu.h" declline="615" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga1c0d6e494b558d012fc29c2e0f565d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_roll</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s roll to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_tare_roll(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="645" column="9" declfile="pros/imu.h" declline="645" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga8d220ae04071a4ac25be52108e561166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_yaw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s yaw to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_tare_yaw(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="675" column="9" declfile="pros/imu.h" declline="675" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gaee27c5a8ea8e51afee3c80e4ef3d1e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_euler</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Reset all 3 euler values of the Inertial Sensor to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_tare_euler(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="705" column="9" declfile="pros/imu.h" declline="705" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga5ae349cec6a99b52cf632267f1c2c332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets all 5 values of the Inertial Sensor to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_tare(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="735" column="9" declfile="pros/imu.h" declline="735" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value Set Functions</header>
      <memberdef kind="function" id="group__c-imu_1gab80487e184908fc841b2304f83ae39d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t imu_set_euler</definition>
        <argsstring>(uint8_t port, euler_s_t target)</argsstring>
        <name>imu_set_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="structeuler__s__t" kindref="compound">euler_s_t</ref></type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s euler values to target euler values. </para>
        </briefdescription>
        <detaileddescription>
<para>Will default to +/- 180 if target exceeds +/- 180.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>val<sp/>=<sp/>imu_set_euler(IMU_PORT,<sp/>{45,<sp/>60,<sp/>90});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>:<sp/>{gyro<sp/>vals:<sp/>%d}\n&quot;,<sp/>val);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Will default to +/- 180 if target exceeds +/- 180.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target euler values for the euler values to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_set_euler(IMU_PORT,<sp/>{45,45,45});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="440" column="9" declfile="pros/imu.h" declline="440" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga33890996b538599d7c635a895e3da8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_rotation</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s rotation to target value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the rotation value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_set_rotation(IMU_PORT,<sp/>45);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="807" column="9" declfile="pros/imu.h" declline="807" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga35127112436baa43237fc52c683a9e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_heading</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s heading to target value Target will default to 360 if above 360 and default to 0 if below 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the heading value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_set_heading(IMU_PORT,<sp/>45);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="840" column="9" declfile="pros/imu.h" declline="840" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga87a5b4f797d70c502fd862320ba733da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_pitch</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s pitch to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the pitch value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_set_pitch(IMU_PORT,<sp/>45);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="873" column="9" declfile="pros/imu.h" declline="873" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga52386f7153795d5be0acda3352600834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_roll</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s roll to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the roll value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>imu_set_roll(IMU_PORT,<sp/>45);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="906" column="9" declfile="pros/imu.h" declline="906" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gaee4fcba55ec253943b6396c8c1e24c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_yaw</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s yaw to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the yaw value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu_set_yaw(IMU_PORT,<sp/>45);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="938" column="9" declfile="pros/imu.h" declline="938" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor movement functions</header>
      <description><para>These functions allow programmers to make motors move </para>
</description>
      <memberdef kind="function" id="group__c-motors_1gac76e46064191f91bf2546335caccf6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move</definition>
        <argsstring>(int8_t port, int32_t voltage)</argsstring>
        <name>motor_move</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -127 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__c-motors_1gaa1412c80eedabb6cd86159d51184b283" kindref="member">motor_move_voltage()</ref>, or motorSet() from the PROS 2 API.</para>
<para><simplesect kind="note"><para>This function will not respect brake modes, and simply sets the voltage to the desired value.</para>
</simplesect>
<simplesect kind="note"><para>A negative port will negate the input voltage</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="82" column="9" declfile="pros/motors.h" declline="82" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaa5f42cf9767315e3bf2f465cf64faf80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_brake</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_brake</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Stops the motor using the currently configured brake mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets motor velocity to zero, which will cause it to act according to the set brake mode. If brake mode is set to MOTOR_BRAKE_HOLD, this function may behave differently than calling motor_move_absolute(port, 0) or motor_move_relative(port, 0).</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_move(1,<sp/>127);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>motor_break(1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="112" column="9" declfile="pros/motors.h" declline="112" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaeab0d89347dae23cfb25a0c3c4e8b55a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_absolute</definition>
        <argsstring>(int8_t port, double position, const int32_t velocity)</argsstring>
        <name>motor_move_absolute</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the target absolute position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the position of the motor when initialized or the position when it was most recently reset with <ref refid="namespacepros_1_1c_1a4aec20e889c09650f066f4e28048c19b" kindref="member">motor_set_zero_position()</ref>.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes. The example code shows how to block until a movement is finished.</para>
</simplesect>
<simplesect kind="note"><para>A negative port number will negate the target position</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The absolute position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>This<sp/>will<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_tare_position(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="161" column="9" declfile="pros/motors.h" declline="161" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gab51091352630168597e8e30bde079eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_relative</definition>
        <argsstring>(int8_t port, double position, const int32_t velocity)</argsstring>
        <name>motor_move_relative</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the relative target position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the current position of the motor as given in <ref refid="group__c-motors_1ga113fbf1950304b3a56705722b283c3a1" kindref="member">motor_get_position()</ref>. Providing 10.0 as the position parameter would result in the motor moving clockwise 10 units, no matter what the current position is.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes. The example code shows how to block until a movement is finished.</para>
</simplesect>
<simplesect kind="note"><para>A negative port will negate the target position</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_relative(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_relative(1,<sp/>100,<sp/>100);<sp/>//<sp/>Also<sp/>moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>205)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>195)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="208" column="9" declfile="pros/motors.h" declline="208" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaa33296eaa7d7bddef72e9606e72bcc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_velocity</definition>
        <argsstring>(int8_t port, const int32_t velocity)</argsstring>
        <name>motor_move_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the velocity for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This velocity corresponds to different actual speeds depending on the gearset used for the motor. This results in a range of +-100 for E_MOTOR_GEARSET_36, +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity is held with PID to ensure consistent speed, as opposed to setting the motor&apos;s voltage.</para>
<para><simplesect kind="note"><para>A negative port will negate the velocity</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_velocity(1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>100<sp/>RPM<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_velocity(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="244" column="9" declfile="pros/motors.h" declline="244" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaa1412c80eedabb6cd86159d51184b283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_voltage</definition>
        <argsstring>(int8_t port, const int32_t voltage)</argsstring>
        <name>motor_move_voltage</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the output voltage for the motor from -12000 to 12000 in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A negative port negates the voltage</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="note"><para>This function will not respect brake modes, and simply sets the voltage to the desired value.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage value from -12000 to 12000</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_voltage(1,<sp/>12000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>max<sp/>voltage<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_voltage(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="276" column="9" declfile="pros/motors.h" declline="276" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga8815309c8900190c036e43c223afc0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_modify_profiled_velocity</definition>
        <argsstring>(int8_t port, const int32_t velocity)</argsstring>
        <name>motor_modify_profiled_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Changes the output velocity for a profiled movement (motor_move_absolute or motor_move_relative). </para>
        </briefdescription>
        <detaileddescription>
<para>This will have no effect if the motor is not following a profiled movement.</para>
<para><simplesect kind="note"><para>A negative port negates the velocity</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_modify_profiled_velocity(1,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor<sp/>early</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="308" column="9" declfile="pros/motors.h" declline="308" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga1d612333c59cacac2b6daf8085605213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_target_position</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_target_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the target position set for the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A negative port negates the return value</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The target position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Target:<sp/>%d\n&quot;,<sp/>motor_get_target_position(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>100</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="335" column="8" declfile="pros/motors.h" declline="335" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga14476b124c9072efc14ad2cbcf6481ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_target_velocity</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_target_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the velocity commanded to the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A negative port negates the return value</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move_velocity(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Commanded<sp/>Velocity:<sp/>%d\n&quot;,<sp/>motor_get_target_velocity(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="364" column="9" declfile="pros/motors.h" declline="364" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor telemetry functions</header>
      <description><para>These functions allow programmers to collect telemetry from motors </para>
</description>
      <memberdef kind="function" id="group__c-motors_1ga2ad53ef4a029ef4860d840ba3fa27cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_actual_velocity</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_actual_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A negative port negates the return value</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor_get_actual_velocity(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="399" column="8" declfile="pros/motors.h" declline="399" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga42567d532e2ca7c25ea54c17ac3c7742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_current_draw</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_current_draw</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the current drawn by the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s current in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Draw:<sp/>%d\n&quot;,<sp/>motor_get_current_draw(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="426" column="9" declfile="pros/motors.h" declline="426" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga0f9c29ae5adda0f2d753b8e7c2af5c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_direction</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_direction</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the direction of movement for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A negative port number negates the return value.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 for moving in the positive direction, -1 for moving in the negative direction, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Direction:<sp/>%d\n&quot;,<sp/>motor_get_direction(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="455" column="9" declfile="pros/motors.h" declline="455" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga7a974a7c9626135e8fc19525623d3a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_efficiency</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_efficiency</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the efficiency of the motor in percent. </para>
        </briefdescription>
        <detaileddescription>
<para>An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s efficiency in percent or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Efficiency:<sp/>%d\n&quot;,<sp/>motor_get_efficiency(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="486" column="8" declfile="pros/motors.h" declline="486" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga155b9e37b6dba8e0530cc153cdb5c55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_over_current</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_is_over_current</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor is drawing over its current limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor&apos;s current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Limit<sp/>Hit?:<sp/>%d\n&quot;,<sp/>motor_is_over_current(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="513" column="9" declfile="pros/motors.h" declline="513" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gad47d180d2620885f1d2b3a1b0d867da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_over_temp</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_is_over_temp</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor&apos;s temperature is above its limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the temperature limit is exceeded and 0 if the the temperature is below the limit, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Temp<sp/>Limit:<sp/>%d\n&quot;,<sp/>motor_is_over_temp(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="540" column="9" declfile="pros/motors.h" declline="540" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Functions</header>
      <memberdef kind="function" id="group__c-optical_1ga50e6ba3fb0f21a6df917edd3f50de276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_hue</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_hue</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color hue. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Hue has a range of 0 to 359.999</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hue value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Hue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_hue(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="133" column="8" declfile="pros/optical.h" declline="133" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga35a880783281c7d2f7f20a52a46fa5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_saturation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_saturation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color saturation. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Saturation has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>saturation value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Saturation<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_saturation(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="163" column="8" declfile="pros/optical.h" declline="163" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gaa2221123c7b73a038c628050c5ebcb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_brightness</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_brightness</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color brightness. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Brightness has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>brightness value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_brightness(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="193" column="8" declfile="pros/optical.h" declline="193" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga84cf2173597ccd58a1f390c6d310e710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_proximity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_proximity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected proximity value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. proximity has a range of 0 to 255.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>poximity value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Proximity<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_proximity(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="223" column="9" declfile="pros/optical.h" declline="223" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga2028f86cc74a0e3b1f021743c03b5756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_set_led_pwm</definition>
        <argsstring>(uint8_t port, uint8_t value)</argsstring>
        <name>optical_set_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>value that ranges from 0 to 100</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_set_led_pwm(OPTICAL_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="252" column="9" declfile="pros/optical.h" declline="252" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga5b3af2f98629b5f6e569cd1c12547502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_led_pwm</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LED pwm value that ranges from 0 to 100 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;PWM<sp/>Value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_led_pwm(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="280" column="9" declfile="pros/optical.h" declline="280" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga118d9f2a59afb6ac81ba509e7f8f1b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__rgb__s__t" kindref="compound">optical_rgb_s_t</ref></type>
        <definition>optical_rgb_s_t pros::c::optical_get_rgb</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_rgb</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the processed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rgb value if the operation was successful or an <ref refid="structoptical__rgb__s__t" kindref="compound">optical_rgb_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_rgb_s_t<sp/>RGB_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RGB_values<sp/>=<sp/>optical_get_rgb(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.brightness);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="312" column="17" declfile="pros/optical.h" declline="312" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga8455ca417578452c577dc349b29d2708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__raw__s__t" kindref="compound">optical_raw_s_t</ref></type>
        <definition>optical_raw_s_t pros::c::optical_get_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the raw, unprocessed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>raw rgb value if the operation was successful or an <ref refid="structoptical__raw__s__t" kindref="compound">optical_raw_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_raw_s_t<sp/>raw_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>raw_values<sp/>=<sp/>optical_get_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Clear<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.clear);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="344" column="17" declfile="pros/optical.h" declline="344" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga1591d88e399ed3e534f3d3d8de99f02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_direction_e_t</type>
        <definition>optical_direction_e_t pros::c::optical_get_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Gestures will be cleared after 500mS</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_direction_e_t<sp/>gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gesture<sp/>=<sp/>optical_get_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Gesture<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>gesture);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="375" column="23" declfile="pros/optical.h" declline="375" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga61d526831891d514f499f73059c99ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__gesture__s__t" kindref="compound">optical_gesture_s_t</ref></type>
        <definition>optical_gesture_s_t pros::c::optical_get_gesture_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent raw gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or an <ref refid="structoptical__gesture__s__t" kindref="compound">optical_gesture_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_gesture_s_t<sp/>raw_gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>raw_gesture<sp/>=<sp/>optical_get_gesture_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Up<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.udata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Down<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ddata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Left<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ldata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Right<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.rdata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Type:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Count:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Time:<sp/>%lu<sp/>\n&quot;,<sp/>raw_gesture.time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="410" column="21" declfile="pros/optical.h" declline="410" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga847424925f023e834607165cffa44a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_enable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_enable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Enable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_enable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="437" column="9" declfile="pros/optical.h" declline="437" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga30b26632678e49f288b5e12fd353f3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_disable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_disable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Disable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_disable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="464" column="9" declfile="pros/optical.h" declline="464" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gad824e5dc94e77e8d6e7a62e59a97e560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_clear_led</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_clear_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_clear_led(VISION_PORT);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="177" column="9" declfile="pros/vision.h" declline="177" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga9a4161d557e410fff34c4f158aa229d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t pros::c::vision_signature_from_utility</definition>
        <argsstring>(const int32_t id, const int32_t u_min, const int32_t u_max, const int32_t u_mean, const int32_t v_min, const int32_t v_max, const int32_t v_mean, const float range, const int32_t type)</argsstring>
        <name>vision_signature_from_utility</name>
        <param>
          <type>const int32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_mean</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_mean</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a signature from the vision sensor utility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> that can be set using vision_set_signature</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/>values<sp/>acquired<sp/>from<sp/>the<sp/>vision<sp/>utility</highlight></codeline>
<codeline><highlight class="normal">vision_signature_s_t<sp/>RED_SIG<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_from_utility(EXAMPLE_SIG,<sp/>8973,<sp/>11143,<sp/>10058,<sp/>-2119,<sp/>-1053,<sp/>-1586,<sp/>5.4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">vision_set_signature(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>&amp;RED_SIG);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object<sp/>of<sp/>the<sp/>EXAMPLE_SIG<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="223" column="22" declfile="pros/vision.h" declline="223" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga33a33d487f771f21d08c3159e6763418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-vision_1ga9e389c1c0197cdfd70e4935c2d22ee18" kindref="member">vision_color_code_t</ref></type>
        <definition>vision_color_code_t pros::c::vision_create_color_code</definition>
        <argsstring>(uint8_t port, const uint32_t sig_id1, const uint32_t sig_id2, const uint32_t sig_id3, const uint32_t sig_id4, const uint32_t sig_id5)</argsstring>
        <name>vision_create_color_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id1</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id2</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id3</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id4</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id5</declname>
        </param>
        <briefdescription>
<para>Creates a color code that represents a combination of the given signature IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>If fewer than 5 signatures are to be a part of the color code, pass 0 for the additional function parameters.</para>
<para>This function uses the following values of errno when an error state is reached: EINVAL - Fewer than two signatures have been provided or one of the signatures is out of its [1-7] range (or 0 when omitted).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id4</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id5</parametername>
</parameternamelist>
<parameterdescription>
<para>The fifth signature id [1-7] to add to the color code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_color_code_t object containing the color code information.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="263" column="21" declfile="pros/vision.h" declline="263" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gad0b47d5910ba2a6e5d52629f2b93c3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::c::vision_get_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id)</argsstring>
        <name>vision_get_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EHOSTDOWN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given size id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_size(VISION_PORT,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="299" column="19" declfile="pros/vision.h" declline="299" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gae53aedc2122f3b4c53d5874fde408a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::c::vision_get_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id)</argsstring>
        <name>vision_get_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given signature according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - sig_id is outside the range [1-8] EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID [1-7] for which an object will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given signature and size_id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object<sp/>of<sp/>the<sp/>EXAMPLE_SIG<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="339" column="19" declfile="pros/vision.h" declline="339" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gaaf91323dda2e39bd1ef885f7a0c32b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::c::vision_get_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code)</argsstring>
        <name>vision_get_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const <ref refid="group__c-vision_1ga9e389c1c0197cdfd70e4935c2d22ee18" kindref="member">vision_color_code_t</ref></type>
          <declname>color_code</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given color code according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which an object will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given color code and size_id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_code(VISION_PORT,<sp/>0,<sp/>code1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="378" column="19" declfile="pros/vision.h" declline="378" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga6c463892ea46d1cfd4fb7d7e237a4db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_exposure</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the exposure parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current exposure setting from [0,150], PROS_ERR if an error occurred</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_exposure(VISION_PORT)<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_exposure(VISION_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="406" column="9" declfile="pros/vision.h" declline="406" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga5d6c54c6754717e256a6d59976976e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_object_count</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_object_count</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the number of objects currently detected by the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of objects detected on the specified vision sensor. Returns PROS_ERR if the port was invalid or an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Number<sp/>of<sp/>Objects<sp/>Detected:<sp/>%d\n&quot;,<sp/>vision_get_object_count(VISION_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="434" column="9" declfile="pros/vision.h" declline="434" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga698db4dbf0a04384a19d1a7496612d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_white_balance</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the white balance parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current RGB white balance setting of the sensor</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>VISION_WHITE<sp/>0xff</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_white_balance(VISION_PORT)<sp/>!=<sp/>VISION_WHITE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_white_balance(VISION_PORT,<sp/>VISION_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="460" column="9" declfile="pros/vision.h" declline="460" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga2f2007dafb30e5aafeb21d9acba05826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_print_signature</definition>
        <argsstring>(const vision_signature_s_t sig)</argsstring>
        <name>vision_print_signature</name>
        <param>
          <type>const <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Prints the contents of the signature as an initializer list to the terminal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature for which the contents will be printed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_print_signature(sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="481" column="9" declfile="pros/vision.h" declline="481" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga4ec230e74ab6348768a5156c9e5c5a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_size(VISION_PORT,<sp/>0,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>signature<sp/>of<sp/>the<sp/>largest<sp/>object<sp/>found</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="525" column="9" declfile="pros/vision.h" declline="525" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga0f38715b935eae0421d59e5102d98155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID [1-7] for which objects will be returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="573" column="9" declfile="pros/vision.h" declline="573" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga0363eec188a23e6d41e98449a323a091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const <ref refid="group__c-vision_1ga9e389c1c0197cdfd70e4935c2d22ee18" kindref="member">vision_color_code_t</ref></type>
          <declname>color_code</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which objects will be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_code(VISION_PORT,<sp/>0,<sp/>code1,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>signature<sp/>of<sp/>the<sp/>largest<sp/>object<sp/>found</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="622" column="9" declfile="pros/vision.h" declline="622" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga42e645bdac1e2eb230fd55205f37dd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t pros::c::vision_get_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id)</argsstring>
        <name>vision_get_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <briefdescription>
<para>Gets the object detection signature with the given id number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> containing information about the signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_print_signature(sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="646" column="22" declfile="pros/vision.h" declline="646" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga7812fb755e22f147e11ae29911149242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id, vision_signature_s_t *const signature_ptr)</argsstring>
        <name>vision_set_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <param>
          <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> *const</type>
          <declname>signature_ptr</declname>
        </param>
        <briefdescription>
<para>Stores the supplied object detection signature onto the vision sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This saves the signature in volatile memory, and the signature will be lost as soon as the sensor is powered down.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to store into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signature_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the signature to save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sig.range<sp/>=<sp/>10.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_signature(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>&amp;sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="675" column="9" declfile="pros/vision.h" declline="675" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga146e2f14c5a77f1a20fc64762910112c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_auto_white_balance</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_auto_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables/disables auto white-balancing on the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - enable was not 0 or 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass 0 to disable, 1 to enable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_auto_white_balance(VISION_PORT,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="703" column="9" declfile="pros/vision.h" declline="703" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga133b8ef84216367d5df385c2eb869ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_exposure</definition>
        <argsstring>(uint8_t port, const uint8_t exposure)</argsstring>
        <name>vision_set_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
<para>Sets the exposure parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The new exposure setting from [0,150]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_exposure(VISION_PORT)<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_exposure(VISION_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="733" column="9" declfile="pros/vision.h" declline="733" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga9a01d95432c9dcd138c11ff718b0b264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_led</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the vision sensor LED color, overriding the automatic behavior. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>An RGB code to set the LED to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_led(VISION_PORT,<sp/>COLOR_BLANCHED_ALMOND);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="760" column="9" declfile="pros/vision.h" declline="760" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gac3be7d132e62ab6b2bd20f564e9a5c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_white_balance</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the white balance parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>The new RGB white balance setting of the sensor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>VISION_WHITE<sp/>0xff</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_white_balance(VISION_PORT,<sp/>VISION_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="788" column="9" declfile="pros/vision.h" declline="788" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga00226eaa06fb4907a90ac188ec16a6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_zero_point</definition>
        <argsstring>(uint8_t port, vision_zero_e_t zero_point)</argsstring>
        <name>vision_set_zero_point</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>vision_zero_e_t</type>
          <declname>zero_point</declname>
        </param>
        <briefdescription>
<para>Sets the (0,0) coordinate for the Field of View. </para>
        </briefdescription>
        <detaileddescription>
<para>This will affect the coordinates returned for each request for a <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> from the sensor, so it is recommended that this function only be used to configure the sensor at the beginning of its use.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_zero_point(VISION_PORT,<sp/>E_VISION_ZERO_CENTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="819" column="9" declfile="pros/vision.h" declline="819" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga86efa93d00dc9646f726eea073068117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_wifi_mode</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_wifi_mode</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Sets the Wi-Fi mode of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions uses the following values of errno when an error state is reached: ENXIO - The given port is not within the range of V5 ports (1-21) EACCESS - Anothe resources is currently trying to access the port</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Disable Wi-Fi on the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> sensor if 0, enable otherwise (e.g. 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_wifi_mode(VISION_PORT,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="846" column="9" declfile="pros/vision.h" declline="846" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Screen Graphical Display Functions</header>
      <description><para>These functions allow programmers to display shapes on the <ref refid="namespacepros_1_1v5" kindref="compound">v5</ref> screen </para>
</description>
      <memberdef kind="function" id="group__c-screen_1gaeac8e37f4757bfb311cd8cc6874243f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_set_pen</definition>
        <argsstring>(uint32_t color)</argsstring>
        <name>screen_set_pen</name>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the pen color for subsequent graphics operations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The pen color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>print<sp/>in<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>iter++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="154" column="10" declfile="pros/screen.h" declline="154" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga35cdf0324b200ec8c55f5cd8a5e49869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_set_eraser</definition>
        <argsstring>(uint32_t color)</argsstring>
        <name>screen_set_eraser</name>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the eraser color for erasing and the current background. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The background color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_eraser(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>turn<sp/>the<sp/>screen<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_erase();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="183" column="10" declfile="pros/screen.h" declline="183" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga5c1c1ab2cb822b8a9b88d65c96baaeac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_get_pen</definition>
        <argsstring>(void)</argsstring>
        <name>screen_get_pen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current pen color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Should<sp/>print<sp/>number<sp/>equivalent<sp/>to<sp/>COLOR_RED<sp/>defined<sp/>in<sp/>colors.h.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>screen_get_pen());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="210" column="10" declfile="pros/screen.h" declline="210" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga339ca7e36849e25855e2a70df2520458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_get_eraser</definition>
        <argsstring>(void)</argsstring>
        <name>screen_get_eraser</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current eraser color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_eraser(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Should<sp/>print<sp/>number<sp/>equivalent<sp/>to<sp/>COLOR_RED<sp/>defined<sp/>in<sp/>colors.h.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>screen_get_eraser());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="237" column="10" declfile="pros/screen.h" declline="237" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gabb188a937e9bcb8fcc26ddf20209cbbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase</definition>
        <argsstring>(void)</argsstring>
        <name>screen_erase</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear display with eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_eraser(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>turn<sp/>the<sp/>screen<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_erase();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="263" column="10" declfile="pros/screen.h" declline="263" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga9d58e4ea8059aebbfb432c9255d974b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_scroll</definition>
        <argsstring>(int16_t start_line, int16_t lines)</argsstring>
        <name>screen_scroll</name>
        <param>
          <type>int16_t</type>
          <declname>start_line</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines on the display upwards. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line from which scrolling will start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll up</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>4,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Scroll<sp/>3<sp/>lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_scroll(4,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="287" column="10" declfile="pros/screen.h" declline="287" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gae7310746647aa0e71fc1e802487434d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_scroll_area</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t lines)</argsstring>
        <name>screen_scroll_area</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines within a region on the display. </para>
        </briefdescription>
        <detaileddescription>
<para>This function behaves in the same way as <computeroutput>screen_scroll</computeroutput>, except that you specify a rectangular region within which to scroll lines instead of a start line.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll upwards</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Scrolls<sp/>area<sp/>of<sp/>screen<sp/>upwards<sp/>slightly.<sp/>including<sp/>line<sp/>of<sp/>text</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_scroll_area(0,0,<sp/>400,<sp/>200,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="318" column="10" declfile="pros/screen.h" declline="318" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga9c7e679921b09aa5bd7ce8f0c0dba8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_copy_area</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint32_t *buf, int32_t stride)</argsstring>
        <name>screen_copy_area</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Copy a screen region (designated by a rectangle) from an off-screen buffer to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer containing screen data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer width in pixels, such that image size is stride-padding</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t*<sp/>buf<sp/>=<sp/>malloc(sizeof(uint32_t)<sp/>*<sp/>400<sp/>*<sp/>200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Copies<sp/>area<sp/>of<sp/>the<sp/>screen<sp/>including<sp/>text</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_copy_area(0,<sp/>0,<sp/>400,<sp/>200,<sp/>(uint32_t*)buf,<sp/>400<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Equation<sp/>for<sp/>stride<sp/>is<sp/>x2<sp/>-<sp/>x1<sp/>+<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="350" column="10" declfile="pros/screen.h" declline="350" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga6149bf6f5f546a5d3604bf0bd13cebf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_pixel</definition>
        <argsstring>(int16_t x, int16_t y)</argsstring>
        <name>screen_draw_pixel</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Draw a single pixel on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the pixel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(i<sp/>&lt;<sp/>200){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_draw_pixel(100,i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Draws<sp/>a<sp/>line<sp/>at<sp/>x<sp/>=<sp/>100<sp/>gradually<sp/>down<sp/>the<sp/>screen,<sp/>pixel<sp/>by<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="376" column="10" declfile="pros/screen.h" declline="376" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaa7815c66ed6d99cccb79c68d92f4b6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_pixel</definition>
        <argsstring>(int16_t x, int16_t y)</argsstring>
        <name>screen_erase_pixel</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Erase a pixel from the screen (Sets the location) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the erased</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Color<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(0,0,400,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(i<sp/>&lt;<sp/>200){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_erase_pixel(100,i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Erases<sp/>a<sp/>line<sp/>at<sp/>x<sp/>=<sp/>100<sp/>gradually<sp/>down<sp/>the<sp/>screen,<sp/>pixel<sp/>by<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="405" column="10" declfile="pros/screen.h" declline="405" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga4dc1379a3cd3fb351f56d48a994c5427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_line</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_draw_line</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a line on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>line<sp/>down<sp/>the<sp/>screen<sp/>at<sp/>x<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_line(100,0,100,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="429" column="10" declfile="pros/screen.h" declline="429" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaad5fa17bd86eecd01c013ed03cbaa865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_line</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_erase_line</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a line on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Color<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(0,0,400,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Erase<sp/>line<sp/>down<sp/>the<sp/>screen<sp/>at<sp/>x<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_erase_line(100,0,100,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="455" column="10" declfile="pros/screen.h" declline="455" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga0554c9959d142f5137507098d2354775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_rect</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_draw_rect</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a rectangle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_rect(1,1,480,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="478" column="10" declfile="pros/screen.h" declline="478" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaff45f2b8356f9a109450d976407eb3cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_rect</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_erase_rect</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a rectangle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>Box<sp/>Around<sp/>Half<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_eraser(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_erase_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="502" column="10" declfile="pros/screen.h" declline="502" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga03fc49294b8f59b266416fe02e3e82be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_fill_rect</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_fill_rect</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Fill a rectangular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Fill<sp/>Around<sp/>Half<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="527" column="10" declfile="pros/screen.h" declline="527" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gae50f44cc8353ecd86b4a2f4bf2c11486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_circle</definition>
        <argsstring>(int16_t x, int16_t y, int16_t radius)</argsstring>
        <name>screen_draw_circle</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Draw a circle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>a<sp/>circle<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="551" column="10" declfile="pros/screen.h" declline="551" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga8bd9e289968087aca262d3b103f705b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_circle</definition>
        <argsstring>(int16_t x, int16_t y, int16_t radius)</argsstring>
        <name>screen_erase_circle</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Erase a circle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Erase<sp/>a<sp/>circle<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>COLOR_BLUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_erase_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="577" column="10" declfile="pros/screen.h" declline="577" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gae22682b7250e24a2356e59c64d57d682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_fill_circle</definition>
        <argsstring>(int16_t x, int16_t y, int16_t radius)</argsstring>
        <name>screen_fill_circle</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Fill a circular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Fill<sp/>a<sp/>circlular<sp/>area<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>COLOR_BLUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="604" column="10" declfile="pros/screen.h" declline="604" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Screen Text Display Functions</header>
      <description><para>These functions allow programmers to display text on the <ref refid="namespacepros_1_1v5" kindref="compound">v5</ref> screen </para>
</description>
      <memberdef kind="function" id="group__c-screen_1gafb3b25b95dbe02402210feb01c6437fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_print</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t line, const char *text,...)</argsstring>
        <name>screen_print</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen on the specified line. </para>
        </briefdescription>
        <detaileddescription>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number on which to print</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>print<sp/>seconds<sp/>started<sp/>since<sp/>program<sp/>started<sp/>on<sp/>line<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>3,<sp/>&quot;Seconds<sp/>Passed:<sp/>%3d&quot;,<sp/>i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="638" column="10" declfile="pros/screen.h" declline="638" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga2b5405f7234ed31b3a9926bfe939518d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_print_at</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t x, const int16_t y, const char *text,...)</argsstring>
        <name>screen_print_at</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen at the specified point. </para>
        </briefdescription>
        <detaileddescription>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para>Text formats medium_center and large_center will default to medium and large respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is small, medium, or large. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>print<sp/>seconds<sp/>started<sp/>since<sp/>program<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print_at(TEXT_SMALL,<sp/>3,<sp/>&quot;Seconds<sp/>Passed:<sp/>%3d&quot;,<sp/>i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="670" column="10" declfile="pros/screen.h" declline="670" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga8cd03ca39124708f7904013435e7e5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_vprintf</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t line, const char *text, va_list args)</argsstring>
        <name>screen_vprintf</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen on the specified line. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <computeroutput>display_printf</computeroutput> except that this uses a <computeroutput>va_list</computeroutput> instead of the ellipsis operator so this can be used by other functions.</para>
<para>Will default to a medium sized font by default if invalid txt_fmt is given. Exposed mostly for writing libraries and custom functions.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL)</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number on which to print</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="694" column="10" declfile="pros/screen.h" declline="694" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaff632a5957fe84aaff544ed4d194ccd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_vprintf_at</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t x, const int16_t y, const char *text, va_list args)</argsstring>
        <name>screen_vprintf_at</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen at the specified coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <computeroutput>display_printf_at</computeroutput> except that this uses a <computeroutput>va_list</computeroutput> instead of the ellipsis operator so this can be used by other functions.</para>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para>Text formats medium_center and large_center will default to medium and large respectively. Exposed mostly for writing libraries and custom functions.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is small, medium, or large. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="720" column="10" declfile="pros/screen.h" declline="720" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Screen Touch Functions</header>
      <description><para>These functions allow programmers to access information about screen touches </para>
</description>
      <memberdef kind="function" id="group__c-screen_1ga7a4ea5fa7c4dea56dac94c0b3159868c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structscreen__touch__status__s__t" kindref="compound">screen_touch_status_s_t</ref></type>
        <definition>screen_touch_status_s_t pros::c::screen_touch_status</definition>
        <argsstring>(void)</argsstring>
        <name>screen_touch_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the touch status of the last touch of the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last_touch_e_t enum specifier that indicates the last touch status of the screen (E_TOUCH_EVENT_RELEASE, E_TOUCH_EVENT_PRESS, or E_TOUCH_EVENT_PRESS_AND_HOLD). This will be released by default if no action was taken. If an error occured, the <ref refid="structscreen__touch__status__s__t" kindref="compound">screen_touch_status_s_t</ref> will have its last_touch_e_t enum specifier set to E_TOUCH_ERR, and other values set to -1.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_status_s_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>screen_touch_status();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>print<sp/>various<sp/>information<sp/>about<sp/>the<sp/>last<sp/>touch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Touch<sp/>Status<sp/>(Type):<sp/>%d&quot;,<sp/>status.touch_status);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>2,<sp/>&quot;Last<sp/>X:<sp/>%d&quot;,<sp/>status.x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>3,<sp/>&quot;Last<sp/>Y:<sp/>%d&quot;,<sp/>status.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>4,<sp/>&quot;Press<sp/>Count:<sp/>%d&quot;,<sp/>status.press_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>5,<sp/>&quot;Release<sp/>Count:<sp/>%d&quot;,<sp/>status.release_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="755" column="25" declfile="pros/screen.h" declline="755" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga001f29d360d7be749ff683853de89808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_touch_callback</definition>
        <argsstring>(touch_event_cb_fn_t cb, last_touch_e_t event_type)</argsstring>
        <name>screen_touch_callback</name>
        <param>
          <type><ref refid="group__c-screen_1gae0a398cfd8d97d4a327aaef01b1e0dae" kindref="member">touch_event_cb_fn_t</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type><ref refid="group__c-screen_1ga8b8f74db7628fd14444f3da9505d333e" kindref="member">last_touch_e_t</ref></type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
<para>Assigns a callback function to be called when a certain touch event happens. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer to callback when event type happens </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Touch event that will trigger the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">touch_event_cb_fn_t<sp/>changePixel(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_status_s_t<sp/>status<sp/>=<sp/>screen_touch_status();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_pixel(status.x,status.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_callback(changePixel(),<sp/>TOUCH_PRESSED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="784" column="10" declfile="pros/screen.h" declline="784" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Serial communication functions</header>
      <description><para>These functions allow programmers to communicate using UART over RS485 </para>
</description>
      <memberdef kind="function" id="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_enable</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>serial_enable</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Enables generic serial on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function must be called before any of the generic serial functions will work.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="72" column="9" declfile="pros/serial.h" declline="72" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_set_baudrate</definition>
        <argsstring>(uint8_t port, int32_t baudrate)</argsstring>
        <name>serial_set_baudrate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>baudrate</declname>
        </param>
        <briefdescription>
<para>Sets the baudrate for the serial port to operate at. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>The baudrate to operate at</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga6178a93ae6ef642d9071c55980954e00" kindref="member">serial_write</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="102" column="9" declfile="pros/serial.h" declline="102" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga01af0f44a069891e14e17953cd3a6260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_flush</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>serial_flush</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Clears the internal input and output FIFO buffers. </para>
        </briefdescription>
        <detaileddescription>
<para>This can be useful to reset state and remove old, potentially unneeded data from the input FIFO buffer or to cancel sending any data in the output FIFO buffer.</para>
<para><simplesect kind="note"><para>This function does not cause the data in the output buffer to be written, it simply clears the internal buffers. Unlike stdout, generic serial does not use buffered IO (the FIFO buffers are written as soon as possible).</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga01af0f44a069891e14e17953cd3a6260" kindref="member">serial_flush</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga6178a93ae6ef642d9071c55980954e00" kindref="member">serial_write</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="140" column="9" declfile="pros/serial.h" declline="140" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga44e637ac10841488b1e2a692cb20e733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_get_read_avail</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>serial_get_read_avail</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the number of bytes available to be read in the the port&apos;s FIFO input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function does not actually read any bytes, is simply returns the number of bytes available to be read.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes avaliable to be read or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__c-serial_1ga44e637ac10841488b1e2a692cb20e733" kindref="member">serial_get_read_avail</ref>(1)<sp/>&gt;=<sp/>12)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[12];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga5cc07e5fb43c781d5c0853a3ff645b26" kindref="member">serial_read</ref>(1,<sp/>buffer,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="177" column="9" declfile="pros/serial.h" declline="177" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga72e8b6f07f44136e0ab9ede6a9d0316e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_get_write_free</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>serial_get_write_free</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the number of bytes free in the port&apos;s FIFO output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function does not actually write any bytes, is simply returns the number of bytes free in the port&apos;s buffer.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes free or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__c-serial_1ga72e8b6f07f44136e0ab9ede6a9d0316e" kindref="member">serial_get_write_free</ref>(1)<sp/>&gt;=<sp/>12)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga6178a93ae6ef642d9071c55980954e00" kindref="member">serial_write</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World!&quot;</highlight><highlight class="normal">,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="210" column="9" declfile="pros/serial.h" declline="210" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga629ab10f7b2dfa10eab9c6aedc8cfecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_peek_byte</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>serial_peek_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Reads the next byte avaliable in the port&apos;s input buffer without removing it. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next byte avaliable to be read, -1 if none are available, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__c-serial_1ga629ab10f7b2dfa10eab9c6aedc8cfecd" kindref="member">serial_peek_byte</ref>(1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[12];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga5cc07e5fb43c781d5c0853a3ff645b26" kindref="member">serial_read</ref>(1,<sp/>buffer,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="242" column="9" declfile="pros/serial.h" declline="242" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga4786d527472b1a40dafd15aaf6ef823b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_read_byte</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>serial_read_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Reads the next byte avaliable in the port&apos;s input buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The next byte avaliable to be read, -1 if none are available, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__c-serial_1ga4786d527472b1a40dafd15aaf6ef823b" kindref="member">serial_read_byte</ref>(1)<sp/>==<sp/></highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[12];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga5cc07e5fb43c781d5c0853a3ff645b26" kindref="member">serial_read</ref>(1,<sp/>buffer,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="274" column="9" declfile="pros/serial.h" declline="274" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga5cc07e5fb43c781d5c0853a3ff645b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_read</definition>
        <argsstring>(uint8_t port, uint8_t *buffer, int32_t length)</argsstring>
        <name>serial_read</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Reads up to the next length bytes from the port&apos;s input buffer and places them in the user supplied buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function will only return bytes that are currently avaliable to be read and will not block waiting for any to arrive.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The location to place the data read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__c-serial_1ga44e637ac10841488b1e2a692cb20e733" kindref="member">serial_get_read_avail</ref>(1)<sp/>&gt;=<sp/>12)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[12];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga5cc07e5fb43c781d5c0853a3ff645b26" kindref="member">serial_read</ref>(1,<sp/>buffer,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="314" column="9" declfile="pros/serial.h" declline="314" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga67712457bac23b549b04f88790977be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_write_byte</definition>
        <argsstring>(uint8_t port, uint8_t buffer)</argsstring>
        <name>serial_write_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Write the given byte to the port&apos;s output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Data in the port&apos;s output buffer is written to the serial port as soon as possible on a FIFO basis and can not be done manually by the user.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port. EIO - Serious internal write error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The byte to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__c-serial_1ga72e8b6f07f44136e0ab9ede6a9d0316e" kindref="member">serial_get_write_free</ref>(1)<sp/>&gt;=<sp/>12)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;H&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;W&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;o&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;!&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga67712457bac23b549b04f88790977be1" kindref="member">serial_write_byte</ref>(1,<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="362" column="9" declfile="pros/serial.h" declline="362" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-serial_1ga6178a93ae6ef642d9071c55980954e00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::serial_write</definition>
        <argsstring>(uint8_t port, uint8_t *buffer, int32_t length)</argsstring>
        <name>serial_write</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Writes up to length bytes from the user supplied buffer to the port&apos;s output buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Data in the port&apos;s output buffer is written to the serial port as soon as possible on a FIFO basis and can not be done manually by the user.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - The given value is not within the range of V5 ports (1-21). EACCES - Another resource is currently trying to access the port. EIO - Serious internal write error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>The data to write </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to write</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes written or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting filename=".c"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a1903abdb5ef0f301d660754c8315fc17" kindref="member">opcontrol</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga3dfc8cbc0618e9a5f95467733cb95b39" kindref="member">serial_enable</ref>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga764ae0c3adf9c45564fdfa6ac398968e" kindref="member">serial_set_baudrate</ref>(1,<sp/>9600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group__c-serial_1ga72e8b6f07f44136e0ab9ede6a9d0316e" kindref="member">serial_get_write_free</ref>(1)<sp/>&gt;=<sp/>12)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-serial_1ga6178a93ae6ef642d9071c55980954e00" kindref="member">serial_write</ref>(1,<sp/></highlight><highlight class="stringliteral">&quot;Hello<sp/>World!\n&quot;</highlight><highlight class="normal">,<sp/>12);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" kindref="member">delay</ref>(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/serial.h" line="401" column="9" declfile="pros/serial.h" declline="401" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979" prot="public" static="no" strong="no">
        <type></type>
        <name>color_e</name>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a05b9502becdb2fb094a9de3b2d699d3a" prot="public">
          <name>COLOR_ALICE_BLUE</name>
          <initializer>= 0x00F0F8FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a21377903f871c344b4264b9964813c67" prot="public">
          <name>COLOR_ANTIQUE_WHITE</name>
          <initializer>= 0x00FAEBD7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3fbd5be8e43fa2c705c409c188b33bc9" prot="public">
          <name>COLOR_AQUA</name>
          <initializer>= 0x0000FFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ad7fa576f1e3f2477821d6cd3a66eb755" prot="public">
          <name>COLOR_AQUAMARINE</name>
          <initializer>= 0x007FFFD4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a43eaef7c92941ef0e43ede15fba7991c" prot="public">
          <name>COLOR_AZURE</name>
          <initializer>= 0x00F0FFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a87dc2c15b71679f20933fa639eb90ed7" prot="public">
          <name>COLOR_BEIGE</name>
          <initializer>= 0x00F5F5DC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a27b1ee09049554ff6af1b26e6434d069" prot="public">
          <name>COLOR_BISQUE</name>
          <initializer>= 0x00FFE4C4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a2a9daf215a30f1c539ead18c66380fc1" prot="public">
          <name>COLOR_BLACK</name>
          <initializer>= 0x00000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a4a82bb385b83f95bea3412deb0178d86" prot="public">
          <name>COLOR_BLANCHED_ALMOND</name>
          <initializer>= 0x00FFEBCD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1340428efccb140dcbdb71aa6176f696" prot="public">
          <name>COLOR_BLUE</name>
          <initializer>= 0x000000FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a5a83f5b6e0250759d6365cc7c5c9c974" prot="public">
          <name>COLOR_BLUE_VIOLET</name>
          <initializer>= 0x008A2BE2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a70b424bcf0a4a80c0a6f810d1cff20fe" prot="public">
          <name>COLOR_BROWN</name>
          <initializer>= 0x00A52A2A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979af36b816cf587433c7de696154c4f1342" prot="public">
          <name>COLOR_BURLY_WOOD</name>
          <initializer>= 0x00DEB887</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a2a9d8c2f331fea354ed2cc09db76be4c" prot="public">
          <name>COLOR_CADET_BLUE</name>
          <initializer>= 0x005F9EA0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aec51a468b36d94482fef8e32f579c538" prot="public">
          <name>COLOR_CHARTREUSE</name>
          <initializer>= 0x007FFF00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ac26f52c6f1ac12fbf0f173dbb84e267d" prot="public">
          <name>COLOR_CHOCOLATE</name>
          <initializer>= 0x00D2691E</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3187ddb067e2a6104a69628cea76d70b" prot="public">
          <name>COLOR_CORAL</name>
          <initializer>= 0x00FF7F50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a6c250b31ba348b82d413a243cb53f82c" prot="public">
          <name>COLOR_CORNFLOWER_BLUE</name>
          <initializer>= 0x006495ED</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a0bfeb8815eb7efb42555abc144bbd480" prot="public">
          <name>COLOR_CORNSILK</name>
          <initializer>= 0x00FFF8DC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aabac9e31ec5ac0f29e6d25b8efc7c0c4" prot="public">
          <name>COLOR_CRIMSON</name>
          <initializer>= 0x00DC143C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a7896ff2cc707b5873da0b97d38bf852e" prot="public">
          <name>COLOR_CYAN</name>
          <initializer>= 0x0000FFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aa19f00270ec842f049afdd86aaaa7263" prot="public">
          <name>COLOR_DARK_BLUE</name>
          <initializer>= 0x0000008B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979acc0b7a141231dd06fe3f70fc7f855759" prot="public">
          <name>COLOR_DARK_CYAN</name>
          <initializer>= 0x00008B8B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a2057e8eb0ee7094d17edbb241d1729f9" prot="public">
          <name>COLOR_DARK_GOLDENROD</name>
          <initializer>= 0x00B8860B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a6169b55206330296e2c0ca1282b51cda" prot="public">
          <name>COLOR_DARK_GRAY</name>
          <initializer>= 0x00A9A9A9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a45d9d75a762b11d0a1f5b6f65bf59b48" prot="public">
          <name>COLOR_DARK_GREY</name>
          <initializer>= COLOR_DARK_GRAY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ac666d99764e8658d0c60166e6cc3a93e" prot="public">
          <name>COLOR_DARK_GREEN</name>
          <initializer>= 0x00006400</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3d460fb97431d36aa9b9a84700f8aa09" prot="public">
          <name>COLOR_DARK_KHAKI</name>
          <initializer>= 0x00BDB76B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979af521689760f94270c4952ee69910eabd" prot="public">
          <name>COLOR_DARK_MAGENTA</name>
          <initializer>= 0x008B008B</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a99c2a1733bedd9b27217445c9df65bc3" prot="public">
          <name>COLOR_DARK_OLIVE_GREEN</name>
          <initializer>= 0x00556B2F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ab8c3c2d647ac41ea1413dd0b3ad40b3a" prot="public">
          <name>COLOR_DARK_ORANGE</name>
          <initializer>= 0x00FF8C00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979af5a1b3757d1ca296fd3f2f36ea9904aa" prot="public">
          <name>COLOR_DARK_ORCHID</name>
          <initializer>= 0x009932CC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a414edf96389aa436f960923360467010" prot="public">
          <name>COLOR_DARK_RED</name>
          <initializer>= 0x008B0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a27b450a6d82096b9b3646487496b198a" prot="public">
          <name>COLOR_DARK_SALMON</name>
          <initializer>= 0x00E9967A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3448fdeb6639449379ba69a8f7f232f8" prot="public">
          <name>COLOR_DARK_SEA_GREEN</name>
          <initializer>= 0x008FBC8F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a818346f3bae2db4d688bb3ad3d5fb7b5" prot="public">
          <name>COLOR_DARK_SLATE_GRAY</name>
          <initializer>= 0x002F4F4F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3dff69eedfaae1c473984e703deb262c" prot="public">
          <name>COLOR_DARK_SLATE_GREY</name>
          <initializer>= COLOR_DARK_SLATE_GRAY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3f8c7a5f5fb205facb71d9acd67eca31" prot="public">
          <name>COLOR_DARK_TURQUOISE</name>
          <initializer>= 0x0000CED1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1fc05eff0fe23901c985bd5ec9b17106" prot="public">
          <name>COLOR_DARK_VIOLET</name>
          <initializer>= 0x009400D3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a0f0c45d1d6eb272466bae0b597af6ccf" prot="public">
          <name>COLOR_DEEP_PINK</name>
          <initializer>= 0x00FF1493</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aa3889e2a422b783db5b44a9f91a198c0" prot="public">
          <name>COLOR_DEEP_SKY_BLUE</name>
          <initializer>= 0x0000BFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ab16d37156f67f3f4ec4b6b0a6224e1c4" prot="public">
          <name>COLOR_DIM_GRAY</name>
          <initializer>= 0x00696969</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ad69c024c5772ea20d2de9b6eb44f078b" prot="public">
          <name>COLOR_DIM_GREY</name>
          <initializer>= COLOR_DIM_GRAY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ac677ccf835a8ca25558733ff9f84fc76" prot="public">
          <name>COLOR_DODGER_BLUE</name>
          <initializer>= 0x001E90FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a6fc75794d77ec9530a6665006488c34d" prot="public">
          <name>COLOR_FIRE_BRICK</name>
          <initializer>= 0x00B22222</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a54b6bc3c78179a8a127a5961036a56c8" prot="public">
          <name>COLOR_FLORAL_WHITE</name>
          <initializer>= 0x00FFFAF0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3c437ed9d3c079577fe351249bc64317" prot="public">
          <name>COLOR_FOREST_GREEN</name>
          <initializer>= 0x00228B22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979adb5e25189bc71a7481f271712b54fe9f" prot="public">
          <name>COLOR_FUCHSIA</name>
          <initializer>= 0x00FF00FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a238eda6c01b645b467458f60ca72dae0" prot="public">
          <name>COLOR_GAINSBORO</name>
          <initializer>= 0x00DCDCDC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a89e74086b0e8d3a41884d735f7b0691d" prot="public">
          <name>COLOR_GHOST_WHITE</name>
          <initializer>= 0x00F8F8FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aaaf632a4fab208fc7b15e225a6dcb0c6" prot="public">
          <name>COLOR_GOLD</name>
          <initializer>= 0x00FFD700</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a8a8358961a3a6246f08f072197c5e9fa" prot="public">
          <name>COLOR_GOLDENROD</name>
          <initializer>= 0x00DAA520</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3c73f98a53e06d912b8a70e3be2c3917" prot="public">
          <name>COLOR_GRAY</name>
          <initializer>= 0x00808080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1ff1a63c02088b361d95e5f6413e98ad" prot="public">
          <name>COLOR_GREY</name>
          <initializer>= COLOR_GRAY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979acfa9d8bbffc418447ed826f286abca02" prot="public">
          <name>COLOR_GREEN</name>
          <initializer>= 0x00008000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a215ce27e328d72781080a8f8981d0ac3" prot="public">
          <name>COLOR_GREEN_YELLOW</name>
          <initializer>= 0x00ADFF2F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ab63809c48f7ee81d5f9e5d517173091d" prot="public">
          <name>COLOR_HONEYDEW</name>
          <initializer>= 0x00F0FFF0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979af082ff998956a554a438fabe04cdb2eb" prot="public">
          <name>COLOR_HOT_PINK</name>
          <initializer>= 0x00FF69B4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aca9d0aac03a80ce40992f55eae73ac45" prot="public">
          <name>COLOR_INDIAN_RED</name>
          <initializer>= 0x00CD5C5C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a8a55cdce177a8139a3653e7b5c308b0c" prot="public">
          <name>COLOR_INDIGO</name>
          <initializer>= 0x004B0082</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a30a4f4ad2842c8610e6cb89c3d569ca6" prot="public">
          <name>COLOR_IVORY</name>
          <initializer>= 0x00FFFFF0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ae88c670882c3721a560ea055b7f43148" prot="public">
          <name>COLOR_KHAKI</name>
          <initializer>= 0x00F0E68C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a6656c39fe3b977e7070eb1df9416bb9c" prot="public">
          <name>COLOR_LAVENDER</name>
          <initializer>= 0x00E6E6FA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ac7a8f164c842dfb2202d7833f92827db" prot="public">
          <name>COLOR_LAVENDER_BLUSH</name>
          <initializer>= 0x00FFF0F5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ac97d30c2e292d7b70d5d0b6d65e77781" prot="public">
          <name>COLOR_LAWN_GREEN</name>
          <initializer>= 0x007CFC00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1f62b68ad33d885f688d988d349f1fc8" prot="public">
          <name>COLOR_LEMON_CHIFFON</name>
          <initializer>= 0x00FFFACD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a97e4b144ec0f5f6a6d19eccd00a1cba8" prot="public">
          <name>COLOR_LIGHT_BLUE</name>
          <initializer>= 0x00ADD8E6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a285ad4acdaf695a00c5d28eb4eda05b4" prot="public">
          <name>COLOR_LIGHT_CORAL</name>
          <initializer>= 0x00F08080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aceba56a8aca3ee9dfc0383c5a35cbabe" prot="public">
          <name>COLOR_LIGHT_CYAN</name>
          <initializer>= 0x00E0FFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979adbf7106870045c9d99644a9a534ac570" prot="public">
          <name>COLOR_LIGHT_GOLDENROD_YELLOW</name>
          <initializer>= 0x00FAFAD2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a35ff3a3ccb655f1e72e7c0c74588e41b" prot="public">
          <name>COLOR_LIGHT_GREEN</name>
          <initializer>= 0x0090EE90</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979abae5e681ac33700b80427c741e83d11f" prot="public">
          <name>COLOR_LIGHT_GRAY</name>
          <initializer>= 0x00D3D3D3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a612e88bdf4015d1f208761d40c603a0e" prot="public">
          <name>COLOR_LIGHT_GREY</name>
          <initializer>= COLOR_LIGHT_GRAY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a790173cc5b67b51b9bfffb08718bd3ce" prot="public">
          <name>COLOR_LIGHT_PINK</name>
          <initializer>= 0x00FFB6C1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ad4c7eb8100a43a694fced9e702c2240e" prot="public">
          <name>COLOR_LIGHT_SALMON</name>
          <initializer>= 0x00FFA07A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ad91c82ec684e0d6ac3c6817c806daa71" prot="public">
          <name>COLOR_LIGHT_SEA_GREEN</name>
          <initializer>= 0x0020B2AA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aa1a6ce85cf4ea053b75b80e14e501b1f" prot="public">
          <name>COLOR_LIGHT_SKY_BLUE</name>
          <initializer>= 0x0087CEFA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979acd552554454cb31fea37267880c7b097" prot="public">
          <name>COLOR_LIGHT_SLATE_GRAY</name>
          <initializer>= 0x00778899</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a2e8b2db3b7ae18175d50fe3e9cc1dbe1" prot="public">
          <name>COLOR_LIGHT_SLATE_GREY</name>
          <initializer>= COLOR_LIGHT_SLATE_GRAY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a278f408749cfba0bf66e329d1628fb5e" prot="public">
          <name>COLOR_LIGHT_STEEL_BLUE</name>
          <initializer>= 0x00B0C4DE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1d6052e9da4f2b6e9aacb06c04e6a921" prot="public">
          <name>COLOR_LIGHT_YELLOW</name>
          <initializer>= 0x00FFFFE0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1c4a4fe0785dc1056193529aa7d17999" prot="public">
          <name>COLOR_LIME</name>
          <initializer>= 0x0000FF00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979abdfff6e4b2ba64bb923b0847643f137f" prot="public">
          <name>COLOR_LIME_GREEN</name>
          <initializer>= 0x0032CD32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aa902dc4fa97367e59c5886f512139d4b" prot="public">
          <name>COLOR_LINEN</name>
          <initializer>= 0x00FAF0E6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a543701a16830d494b0e460cccf0f9b37" prot="public">
          <name>COLOR_MAGENTA</name>
          <initializer>= 0x00FF00FF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a7bdfa1b25f33b96d9e4cf249e19de205" prot="public">
          <name>COLOR_MAROON</name>
          <initializer>= 0x00800000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aae65e46c7858caf08593bb0d62d26a34" prot="public">
          <name>COLOR_MEDIUM_AQUAMARINE</name>
          <initializer>= 0x0066CDAA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a6c9842a832eda045655850c3a976684b" prot="public">
          <name>COLOR_MEDIUM_BLUE</name>
          <initializer>= 0x000000CD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a254b698d95b0afaa90aa5ef13742e088" prot="public">
          <name>COLOR_MEDIUM_ORCHID</name>
          <initializer>= 0x00BA55D3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a040d63610f8db1f685df31e39a5ac562" prot="public">
          <name>COLOR_MEDIUM_PURPLE</name>
          <initializer>= 0x009370DB</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ac2f19cf19c943b6a22b4ff79be421d2c" prot="public">
          <name>COLOR_MEDIUM_SEA_GREEN</name>
          <initializer>= 0x003CB371</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ae364c1a2513cbccfd53c54113d6abcd2" prot="public">
          <name>COLOR_MEDIUM_SLATE_BLUE</name>
          <initializer>= 0x007B68EE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ae17f59170b16cf42c91d60eff767a962" prot="public">
          <name>COLOR_MEDIUM_SPRING_GREEN</name>
          <initializer>= 0x0000FA9A</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a90d604efa617dfbc72a31e36101841b5" prot="public">
          <name>COLOR_MEDIUM_TURQUOISE</name>
          <initializer>= 0x0048D1CC</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979af6b65d16f1c068e7a5766f391596e713" prot="public">
          <name>COLOR_MEDIUM_VIOLET_RED</name>
          <initializer>= 0x00C71585</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a48d82423553f4b538e5e43abcdfd26fc" prot="public">
          <name>COLOR_MIDNIGHT_BLUE</name>
          <initializer>= 0x00191970</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3ad20a59dcd7cead8096a34dc62da526" prot="public">
          <name>COLOR_MINT_CREAM</name>
          <initializer>= 0x00F5FFFA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979abb766d5772ec93cff2617b5954d48945" prot="public">
          <name>COLOR_MISTY_ROSE</name>
          <initializer>= 0x00FFE4E1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a5c31c5b29e824f5849b14d9af6d9254c" prot="public">
          <name>COLOR_MOCCASIN</name>
          <initializer>= 0x00FFE4B5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a0c8ed125adc695f6c735bf8ae19d7872" prot="public">
          <name>COLOR_NAVAJO_WHITE</name>
          <initializer>= 0x00FFDEAD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979acaed5fc877f6ff2fc2ea905b8753c118" prot="public">
          <name>COLOR_NAVY</name>
          <initializer>= 0x00000080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979af2c0229aac2d253efff6e05e275c6f44" prot="public">
          <name>COLOR_OLD_LACE</name>
          <initializer>= 0x00FDF5E6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a65bd1169c1cc1bcdf6f7e4636c64cbbd" prot="public">
          <name>COLOR_OLIVE</name>
          <initializer>= 0x00808000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aa1fb775a35bd8332be0c4e56a1bc5a97" prot="public">
          <name>COLOR_OLIVE_DRAB</name>
          <initializer>= 0x006B8E23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a0d36904c1e8ef3978abfe51c57b70423" prot="public">
          <name>COLOR_ORANGE</name>
          <initializer>= 0x00FFA500</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aa00f858a94afbcab4774fc97e01cf015" prot="public">
          <name>COLOR_ORANGE_RED</name>
          <initializer>= 0x00FF4500</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a7d733ef2a9f8a6b44dca8ef6baa59cd8" prot="public">
          <name>COLOR_ORCHID</name>
          <initializer>= 0x00DA70D6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a7604eae01f4f38703df6bf2cc4aeeeee" prot="public">
          <name>COLOR_PALE_GOLDENROD</name>
          <initializer>= 0x00EEE8AA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1d636678edf4489fbe0054005839782d" prot="public">
          <name>COLOR_PALE_GREEN</name>
          <initializer>= 0x0098FB98</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979af73c70cb7f70ae03356f34e812b89b6f" prot="public">
          <name>COLOR_PALE_TURQUOISE</name>
          <initializer>= 0x00AFEEEE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979acc4c99eda9a0b72f1cb3fdddf66ccf8e" prot="public">
          <name>COLOR_PALE_VIOLET_RED</name>
          <initializer>= 0x00DB7093</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aab258554b2490e9af90438e9f703b352" prot="public">
          <name>COLOR_PAPAY_WHIP</name>
          <initializer>= 0x00FFEFD5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aedde5c64348019bb8d0937e406a06e62" prot="public">
          <name>COLOR_PEACH_PUFF</name>
          <initializer>= 0x00FFDAB9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aaeb11a23ba08bb4396be95554c6b2119" prot="public">
          <name>COLOR_PERU</name>
          <initializer>= 0x00CD853F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1b93c096fbb90304018ed9977dc1dadc" prot="public">
          <name>COLOR_PINK</name>
          <initializer>= 0x00FFC0CB</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979acbd5f34c244476dbf5fffc3a9e45bd71" prot="public">
          <name>COLOR_PLUM</name>
          <initializer>= 0x00DDA0DD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aabbbf7ce19baf587928b408bc5383f56" prot="public">
          <name>COLOR_POWDER_BLUE</name>
          <initializer>= 0x00B0E0E6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a278276a8155620ed5e155c80d35316cc" prot="public">
          <name>COLOR_PURPLE</name>
          <initializer>= 0x00800080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a592503b9434c1e751a92f3fc536d7950" prot="public">
          <name>COLOR_RED</name>
          <initializer>= 0x00FF0000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a11eb7dbb95ca81ff3d94f211f79c06ef" prot="public">
          <name>COLOR_ROSY_BROWN</name>
          <initializer>= 0x00BC8F8F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a52be8c570fefcffb38a0d1c87b17d2c9" prot="public">
          <name>COLOR_ROYAL_BLUE</name>
          <initializer>= 0x004169E1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a73bc8a188caeef1878c42c6ce986050d" prot="public">
          <name>COLOR_SADDLE_BROWN</name>
          <initializer>= 0x008B4513</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ae79beb8721555e1119aef2871170c21b" prot="public">
          <name>COLOR_SALMON</name>
          <initializer>= 0x00FA8072</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a0bae941c88c0eaffc78b65cd6e2946cf" prot="public">
          <name>COLOR_SANDY_BROWN</name>
          <initializer>= 0x00F4A460</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a7cb7b1f16de8f6c70406cd653b1422dd" prot="public">
          <name>COLOR_SEA_GREEN</name>
          <initializer>= 0x002E8B57</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ad87bed4357cba8cc5925e53f718d269c" prot="public">
          <name>COLOR_SEASHELL</name>
          <initializer>= 0x00FFF5EE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a19812b859b7a0f0ebfc960a0541c7511" prot="public">
          <name>COLOR_SIENNA</name>
          <initializer>= 0x00A0522D</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a5cc7b78f1b8ab0e153f5b1d6777e8cd3" prot="public">
          <name>COLOR_SILVER</name>
          <initializer>= 0x00C0C0C0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979abf002dcb50831be52fe09196a3b2417b" prot="public">
          <name>COLOR_SKY_BLUE</name>
          <initializer>= 0x0087CEEB</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a188bee15ce0860415f4c45d0ab0f83f7" prot="public">
          <name>COLOR_SLATE_BLUE</name>
          <initializer>= 0x006A5ACD</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a47ddfa64153af52a1e85312f82d21b08" prot="public">
          <name>COLOR_SLATE_GRAY</name>
          <initializer>= 0x00708090</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a8ebc5f25aeb03a9145af15036c2067c3" prot="public">
          <name>COLOR_SLATE_GREY</name>
          <initializer>= COLOR_SLATE_GRAY</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a9fddde0c072fd09590cafa09433ed519" prot="public">
          <name>COLOR_SNOW</name>
          <initializer>= 0x00FFFAFA</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a02f735588cefddc61afe348d22a3cc95" prot="public">
          <name>COLOR_SPRING_GREEN</name>
          <initializer>= 0x0000FF7F</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a3338313fc338edba86f14c2eb06e1894" prot="public">
          <name>COLOR_STEEL_BLUE</name>
          <initializer>= 0x004682B4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ac5d6c35b668fb15c0cb33733de3a1963" prot="public">
          <name>COLOR_TAN</name>
          <initializer>= 0x00D2B48C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a37a016bbfc22720dae7f82c15b19615a" prot="public">
          <name>COLOR_TEAL</name>
          <initializer>= 0x00008080</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aa84c433770af82d4e7bdea0f8dd5fa6a" prot="public">
          <name>COLOR_THISTLE</name>
          <initializer>= 0x00D8BFD8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979acff02bed1b89c0ac8261b7c9f19eeb2a" prot="public">
          <name>COLOR_TOMATO</name>
          <initializer>= 0x00FF6347</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a4c9e48399a92aacde4ae262723e4961a" prot="public">
          <name>COLOR_TURQUOISE</name>
          <initializer>= 0x0040E0D0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979afeb501fc9e8d63d0f205c6ae7a00ff45" prot="public">
          <name>COLOR_VIOLET</name>
          <initializer>= 0x00EE82EE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a1a937d433ed17f5acd81593925329a24" prot="public">
          <name>COLOR_WHEAT</name>
          <initializer>= 0x00F5DEB3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ad47b4c240a0109970bb2a7fe3a07d3ec" prot="public">
          <name>COLOR_WHITE</name>
          <initializer>= 0x00FFFFFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979a5412495dfbe2339c22d4559154ca785c" prot="public">
          <name>COLOR_WHITE_SMOKE</name>
          <initializer>= 0x00F5F5F5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979ab03862907066c68204ee9df1ee04aa29" prot="public">
          <name>COLOR_YELLOW</name>
          <initializer>= 0x00FFFF00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a0a204139fa728b63f637526a181ca979aab5279550980f7f4ef73d207589e033b" prot="public">
          <name>COLOR_YELLOW_GREEN</name>
          <initializer>= 0x009ACD32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enum of possible colors. </para>
        </briefdescription>
        <detaileddescription>
<para>Contains common colors, all members are self descriptive. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/colors.h" line="35" column="21" bodyfile="pros/colors.h" bodystart="35" bodyend="182"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45" prot="public" static="no" strong="no">
        <type></type>
        <name>v5_device_e</name>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a929153c5f75689b1d957d06074b5fae8" prot="public">
          <name>E_DEVICE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a467b42f234e0a690ffe8cb36136afd8a" prot="public">
          <name>E_DEVICE_MOTOR</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45ae9951d109e5a13e91fa928aca02b8882" prot="public">
          <name>E_DEVICE_ROTATION</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a3eb6fb1ce8dc100664a443aab43a8a45" prot="public">
          <name>E_DEVICE_IMU</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45acb1d4484e6d3c426554103850ffd0558" prot="public">
          <name>E_DEVICE_DISTANCE</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a42aa9d24679cd762cb25dea691bac391" prot="public">
          <name>E_DEVICE_RADIO</name>
          <initializer>= 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a32cb9f019c5d7a71a891efd00382f223" prot="public">
          <name>E_DEVICE_VISION</name>
          <initializer>= 11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45aaf0a34b25623b86363823c284133b1e1" prot="public">
          <name>E_DEVICE_ADI</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45af335796b1126951c9fa1aba19987b0b9" prot="public">
          <name>E_DEVICE_OPTICAL</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a1188eeeddb1369a5b208366aeb612ee5" prot="public">
          <name>E_DEVICE_GPS</name>
          <initializer>= 20</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a9512b3799968456e47dfa3e8c8957094" prot="public">
          <name>E_DEVICE_SERIAL</name>
          <initializer>= 129</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45abf497463e7913f0166fc2224239e3b5f" prot="public">
          <name>__attribute__</name>
          <initializer>=((deprecated(&quot;use E_DEVICE_SERIAL instead&quot;))) = E_DEVICE_SERIAL</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1aaba853cd2f7eed658c07dafd7cc41a45a4a089975a8d1abaaf4c4bf0c35512cd3" prot="public">
          <name>E_DEVICE_UNDEFINED</name>
          <initializer>= 255</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/device.h" line="34" column="25" bodyfile="pros/device.h" bodystart="34" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="group__c-optical_1ga656ac13ffc5dd8f7289b47ac1a019409" prot="public" static="no" strong="no">
        <type></type>
        <name>optical_direction_e</name>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409acbe9c605984148d16737225356e8bc89" prot="public">
          <name>NO_GESTURE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409aba595d8bca8bc5e67c37c0a9d89becfa" prot="public">
          <name>UP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The direction indicating an upward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409a9b0b4a95b99523966e0e34ffdadac9da" prot="public">
          <name>DOWN</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>The direction indicating a downward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409aec8379af7490bb9eaaf579cf17876f38" prot="public">
          <name>RIGHT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The direction indicating a rightward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409adb45120aafd37a973140edee24708065" prot="public">
          <name>LEFT</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>The direction indicating a leftward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409a2fd6f336d08340583bd620a7f5694c90" prot="public">
          <name>ERROR</name>
          <initializer>= PROS_ERR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="51" column="33" bodyfile="pros/optical.h" bodystart="51" bodyend="61"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__c-adi_1gadc7331a863ca648693c688af1ae9a940" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_encoder_t</definition>
        <argsstring></argsstring>
        <name>adi_encoder_t</name>
        <briefdescription>
<para>Reference type for an initialized encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the encoder, unlike its use as an object to store encoder data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="633" column="17" bodyfile="pros/adi.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__c-adi_1ga642e06a44cad02177d4111261e17c3df" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_ultrasonic_t</definition>
        <argsstring></argsstring>
        <name>adi_ultrasonic_t</name>
        <briefdescription>
<para>Reference type for an initialized ultrasonic. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the ultrasonic, unlike its use as an object to store ultrasonic data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="769" column="17" bodyfile="pros/adi.h" bodystart="769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__c-adi_1ga9c451728d4193f1a4e59d7dc489ac292" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_gyro_t</definition>
        <argsstring></argsstring>
        <name>adi_gyro_t</name>
        <briefdescription>
<para>Reference type for an initialized gyroscope. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the gyroscope, unlike its use as an object to store gyro data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="879" column="17" bodyfile="pros/adi.h" bodystart="879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__c-adi_1ga57a45eab54fec9fc2d0a16117a64ad96" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_potentiometer_t</definition>
        <argsstring></argsstring>
        <name>adi_potentiometer_t</name>
        <briefdescription>
<para>Reference type for an initialized potentiometer. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the potentiometer, unlike its use as an object to store gyro data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1039" column="17" bodyfile="pros/adi.h" bodystart="1039" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__c-adi_1ga3f0cd6532514a01a1684ddbaaa40ef8d" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_led_t</definition>
        <argsstring></argsstring>
        <name>adi_led_t</name>
        <briefdescription>
<para>Reference type for an initialized addressable led. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the led, unlike its use as an object to store led data in the C++ API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1142" column="17" bodyfile="pros/adi.h" bodystart="1142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ext-adi_1ga819f455cfd280a0a3f2489ee88aa19ac" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t ext_adi_encoder_t</definition>
        <argsstring></argsstring>
        <name>ext_adi_encoder_t</name>
        <briefdescription>
<para>Reference type for an initialized encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the encoder, unlike its use as an object to store encoder data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="611" column="17" bodyfile="pros/ext_adi.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ext-adi_1ga628d2ba74a77b5d590e4b865e3f4a7aa" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t ext_adi_ultrasonic_t</definition>
        <argsstring></argsstring>
        <name>ext_adi_ultrasonic_t</name>
        <briefdescription>
<para>Reference type for an initialized ultrasonic. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the ultrasonic, unlike its use as an object to store encoder data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="760" column="17" bodyfile="pros/ext_adi.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ext-adi_1gaeb1fda9da4589cd3cd2e9efe5693f308" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t ext_adi_gyro_t</definition>
        <argsstring></argsstring>
        <name>ext_adi_gyro_t</name>
        <briefdescription>
<para>Reference type for an initialized gyroscope. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the gyroscope, unlike its use as an object to store gyro data in PROS 2.</para>
<para>(Might Be useless with the wire expander.) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="883" column="17" bodyfile="pros/ext_adi.h" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ext-adi_1ga891a22b2cb7fee5d61a8f0f5c1c3d1b6" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t ext_adi_potentiometer_t</definition>
        <argsstring></argsstring>
        <name>ext_adi_potentiometer_t</name>
        <briefdescription>
<para>Reference type for an initialized potentiometer. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the potentiometer, unlike its use as an object to store gyro data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1057" column="17" bodyfile="pros/ext_adi.h" bodystart="1057" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ext-adi_1ga0ba5db4df39c9b699914127c8cdb7f1a" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t ext_adi_led_t</definition>
        <argsstring></argsstring>
        <name>ext_adi_led_t</name>
        <briefdescription>
<para>Reference type for an initialized addressable led. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the led, unlike its use as an object to store led data in the C++ API. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1101" column="17" bodyfile="pros/ext_adi.h" bodystart="1101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepros_1_1c_1afcd0aa4e112c558d7524f074e9e79126" prot="public" static="no" mutable="no">
        <type>bool const char *</type>
        <definition>bool const char* fmt</definition>
        <argsstring></argsstring>
        <name>fmt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="44" column="33" bodyfile="pros/llemu.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-misc_1ga53280163169348b8429c14c340a7c2b3" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* baked_date</definition>
        <argsstring></argsstring>
        <name>baked_date</name>
        <briefdescription>
<para>Date and Time <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="733" column="19" declfile="pros/misc.h" declline="733" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-misc_1ga33aa244a3bbfcc84286cfa8999805cf2" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* baked_time</definition>
        <argsstring></argsstring>
        <name>baked_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="734" column="19" declfile="pros/misc.h" declline="734" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__c-adi_1gab1441b4f7106ca07eabeb274a94d5e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_port_config_e_t</type>
        <definition>adi_port_config_e_t pros::c::adi_port_get_config</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_port_get_config</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the configuration for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which to return the configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ADI configuration for the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Displays<sp/>the<sp/>value<sp/>of<sp/>E_ADI_ANALOG_IN</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Port<sp/>Type:<sp/>%d\n&quot;,<sp/>adi_port_get_config(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="180" column="21" declfile="pros/adi.h" declline="180" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gabe2a3c30fa74bb9c4ba202d79e636d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_port_get_value</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_port_get_value</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the value for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value stored for the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Port<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_get_value(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="205" column="9" declfile="pros/adi.h" declline="205" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga280137f3b1ec70ac5d22462cdc7b715d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_port_set_config</definition>
        <argsstring>(uint8_t port, adi_port_config_e_t type)</argsstring>
        <name>adi_port_set_config</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>adi_port_config_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as a given sensor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration type for the port</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="231" column="9" declfile="pros/adi.h" declline="231" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga2cf397ea5cb6d0927e5f5c93ec34bb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_port_set_value</definition>
        <argsstring>(uint8_t port, int32_t value)</argsstring>
        <name>adi_port_set_value</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This only works on ports configured as outputs, and the behavior will change depending on the configuration of the port.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the ADI port to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(DIGITAL_SENSOR_PORT,<sp/>E_ADI_DIGITAL_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_set_value(DIGITAL_SENSOR_PORT,<sp/>HIGH);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="262" column="9" declfile="pros/adi.h" declline="262" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_calibrate</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_calibrate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Calibrates the analog sensor on the specified port and returns the new calibration value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the <ref refid="group__c-adi_1ga34a3205b4beecc2efb561a068ac869e7" kindref="member">adi_analog_read_calibrated()</ref> and <ref refid="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" kindref="member">adi_analog_read_calibrated_HR()</ref> functions. These functions will return the difference between this value and the current sensor value when called.</para>
<para>Do not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).</para>
<para><simplesect kind="note"><para>The ADI currently returns data at 10ms intervals, in constrast to the calibrate function’s 1ms sample rate. This sample rate was kept for the sake of being similar to PROS 2, and increasing the sample rate would not have a tangible difference in the function’s performance.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to calibrate (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The average sensor value computed by this function</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_analog_calibrate(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Calibrated<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read_calibrated(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>readings<sp/>from<sp/>then<sp/>on<sp/>will<sp/>be<sp/>calibrated</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="303" column="9" declfile="pros/adi.h" declline="303" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gaaec9c097a2fb6ae1632954591eea35d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_read</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_read</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the 12-bit value of the specified port. </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is undefined if the analog pin has been switched to a different mode.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="335" column="9" declfile="pros/adi.h" declline="335" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga34a3205b4beecc2efb561a068ac869e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_read_calibrated</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_read_calibrated</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the 12 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" kindref="member">adi_analog_calibrate()</ref> function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use <ref refid="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" kindref="member">adi_analog_read_calibrated_HR()</ref> instead.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -4095 to 4095</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read_calibrated(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="369" column="9" declfile="pros/adi.h" declline="369" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_read_calibrated_HR</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_read_calibrated_HR</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the 16 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" kindref="member">adi_analog_calibrate()</ref> function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.</para>
<para>The value returned actually has 16 bits of &quot;precision&quot;, even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -16384 to 16384</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_analog_calibrate(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read_calibrated_HR(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="409" column="9" declfile="pros/adi.h" declline="409" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga4acc4110678a3f4ae8f6b793b2dc1793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_digital_read</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_digital_read</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the digital value (1 or 0) of a port configured as a digital input. </para>
        </briefdescription>
        <detaileddescription>
<para>If the port is configured as some other mode, the digital value which reflects the current state of the port is returned, which may or may not differ from the currently set value. The return value is undefined for ports configured as any mode other than a Digital Input.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the pin is HIGH, or false if it is LOW</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_digital_read(DIGITAL_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="441" column="9" declfile="pros/adi.h" declline="441" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gaf67d01f4e0aad2806c699e249d869977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_digital_get_new_press</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_digital_get_new_press</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets a rising-edge case for a digital button press. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> A calls this function for buttons 1 and 2. <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button is pressed and had not been pressed the last time this function was called, 0 otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(adi_digital_get_new_press(DIGITAL_SENSOR_PORT))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Toggle<sp/>pneumatics<sp/>or<sp/>other<sp/>state<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="479" column="9" declfile="pros/adi.h" declline="479" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gadbbe71d4934bbe5218b33405207f5f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_digital_write</definition>
        <argsstring>(uint8_t port, bool value)</argsstring>
        <name>adi_digital_write</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the digital value (1 or 0) of a port configured as a digital output. </para>
        </briefdescription>
        <detaileddescription>
<para>If the port is configured as some other mode, behavior is undefined.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>An expression evaluating to &quot;true&quot; or &quot;false&quot; to set the output to HIGH or LOW respectively, or the constants HIGH or LOW themselves</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>state<sp/>=<sp/>LOW;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>!=<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_digital_write(DIGITAL_SENSOR_PORT,<sp/>state);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);<sp/>//<sp/>toggle<sp/>the<sp/>sensor<sp/>value<sp/>every<sp/>50ms</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="514" column="9" declfile="pros/adi.h" declline="514" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga81c189bfd3e3d2c7dff5d26459ecd6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_pin_mode</definition>
        <argsstring>(uint8_t port, uint8_t mode)</argsstring>
        <name>adi_pin_mode</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Configures the port as an input or output with a variety of settings. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_pin_mode(ANALOG_SENSOR_PORT,<sp/>INPUT_ANALOG);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="540" column="9" declfile="pros/adi.h" declline="540" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga4f0f74ad94f8d1ea90581ed55674241c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_motor_set</definition>
        <argsstring>(uint8_t port, int8_t speed)</argsstring>
        <name>adi_motor_set</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
<para>Sets the speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to set (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="570" column="9" declfile="pros/adi.h" declline="570" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gacff400470df9136fc1c05e51644e08c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_motor_get</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_motor_get</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the last set speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to get (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last set speed of the motor on the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Commanded<sp/>Motor<sp/>Power:<sp/>%d\n&quot;,<sp/>adi_motor_get(MOTOR_PORT));<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="597" column="9" declfile="pros/adi.h" declline="597" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gabeb2cc7e1edda5a9370a1ae268db08ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_motor_stop</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_motor_stop</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Stops the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to set (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>adi_motor_set(MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_stop(MOTOR_PORT);<sp/>//<sp/>use<sp/>this<sp/>instead</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="625" column="9" declfile="pros/adi.h" declline="625" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga22e55a80b8f8e20bc8b787a92d9253f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_encoder_get</definition>
        <argsstring>(adi_encoder_t enc)</argsstring>
        <name>adi_encoder_get</name>
        <param>
          <type><ref refid="group__c-adi_1gadc7331a863ca648693c688af1ae9a940" kindref="member">adi_encoder_t</ref></type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Gets the number of ticks recorded by the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>There are 360 ticks in one revolution.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The signed and cumulative number of counts since the last start or reset</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Encoder<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_encoder_get(enc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="665" column="9" declfile="pros/adi.h" declline="665" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-adi_1gadc7331a863ca648693c688af1ae9a940" kindref="member">adi_encoder_t</ref></type>
        <definition>adi_encoder_t pros::c::adi_encoder_init</definition>
        <argsstring>(uint8_t port_top, uint8_t port_bottom, bool reverse)</argsstring>
        <name>adi_encoder_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port_top</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>port_bottom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Creates an encoder object and configures the specified ports accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_top</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;top&quot; wire from the encoder sensor with the removable cover side up. This should be in port 1, 3, 5, or 7 (&apos;A&apos;, &apos;C&apos;, &apos;E&apos;, or &apos;G&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;bottom&quot; wire from the encoder sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>If &quot;true&quot;, the sensor will count in the opposite direction</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_encoder_t object to be stored and used for later calls to encoder functions</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Encoder<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_encoder_get(enc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="701" column="15" declfile="pros/adi.h" declline="701" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga0aa1c29410c89a930400c779b9093ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_encoder_reset</definition>
        <argsstring>(adi_encoder_t enc)</argsstring>
        <name>adi_encoder_reset</name>
        <param>
          <type><ref refid="group__c-adi_1gadc7331a863ca648693c688af1ae9a940" kindref="member">adi_encoder_t</ref></type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Sets the encoder value to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>It is safe to use this method while an encoder is enabled. It is not necessary to call this method before stopping or starting an encoder.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to reset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>the<sp/>encoder<sp/>around<sp/>in<sp/>this<sp/>time</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_reset(enc);<sp/>//<sp/>The<sp/>encoder<sp/>is<sp/>now<sp/>zero<sp/>again</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="733" column="9" declfile="pros/adi.h" declline="733" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gad9821a0243b2e14d0dac5099872129ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_encoder_shutdown</definition>
        <argsstring>(adi_encoder_t enc)</argsstring>
        <name>adi_encoder_shutdown</name>
        <param>
          <type><ref refid="group__c-adi_1gadc7331a863ca648693c688af1ae9a940" kindref="member">adi_encoder_t</ref></type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Disables the encoder and voids the configuration on its ports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Use<sp/>the<sp/>encoder</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_shutdown(enc);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="761" column="9" declfile="pros/adi.h" declline="761" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga65ac514a03673a535cdf43e7f57e2716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_ultrasonic_get</definition>
        <argsstring>(adi_ultrasonic_t ult)</argsstring>
        <name>adi_ultrasonic_get</name>
        <param>
          <type><ref refid="group__c-adi_1ga642e06a44cad02177d4111261e17c3df" kindref="member">adi_ultrasonic_t</ref></type>
          <declname>ult</declname>
        </param>
        <briefdescription>
<para>Gets the current ultrasonic sensor value in centimeters. </para>
        </briefdescription>
        <detaileddescription>
<para>If no object was found, zero is returned. If the ultrasonic sensor was never started, the return value is undefined. Round and fluffy objects can cause inaccurate values to be returned.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ult</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_ultrasonic_t object from <ref refid="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" kindref="member">adi_ultrasonic_init()</ref> to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance to the nearest object in m^-4 (10000 indicates 1 meter), measured from the sensor&apos;s mounting points.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_t<sp/>ult<sp/>=<sp/>adi_ultrasonic_init(PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="804" column="9" declfile="pros/adi.h" declline="804" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-adi_1ga642e06a44cad02177d4111261e17c3df" kindref="member">adi_ultrasonic_t</ref></type>
        <definition>adi_ultrasonic_t pros::c::adi_ultrasonic_init</definition>
        <argsstring>(uint8_t port_ping, uint8_t port_echo)</argsstring>
        <name>adi_ultrasonic_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port_ping</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>port_echo</declname>
        </param>
        <briefdescription>
<para>Creates an ultrasonic object and configures the specified ports accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_ping</parametername>
</parameternamelist>
<parameterdescription>
<para>The port connected to the orange OUTPUT cable. This should be in port 1, 3, 5, or 7 (&apos;A&apos;, &apos;C&apos;, &apos;E&apos;, &apos;G&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_echo</parametername>
</parameternamelist>
<parameterdescription>
<para>The port connected to the yellow INPUT cable. This should be in the next highest port following port_ping.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_ultrasonic_t object to be stored and used for later calls to ultrasonic functions</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_t<sp/>ult<sp/>=<sp/>adi_ultrasonic_init(PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="839" column="18" declfile="pros/adi.h" declline="839" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga38f7e3b4d99f5dc21972a9f178f5908f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_ultrasonic_shutdown</definition>
        <argsstring>(adi_ultrasonic_t ult)</argsstring>
        <name>adi_ultrasonic_shutdown</name>
        <param>
          <type><ref refid="group__c-adi_1ga642e06a44cad02177d4111261e17c3df" kindref="member">adi_ultrasonic_t</ref></type>
          <declname>ult</declname>
        </param>
        <briefdescription>
<para>Disables the ultrasonic sensor and voids the configuration on its ports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ult</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_ultrasonic_t object from <ref refid="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" kindref="member">adi_ultrasonic_init()</ref> to stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_t<sp/>ult<sp/>=<sp/>adi_ultrasonic_init(PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_shutdown(ult);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="871" column="9" declfile="pros/adi.h" declline="871" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga7ee7cf11c1a604af68b9373f4b7c8799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::adi_gyro_get</definition>
        <argsstring>(adi_gyro_t gyro)</argsstring>
        <name>adi_gyro_get</name>
        <param>
          <type><ref refid="group__c-adi_1ga9c451728d4193f1a4e59d7dc489ac292" kindref="member">adi_gyro_t</ref></type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Gets the current gyro angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.</para>
<para>There are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gyro angle in degrees.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="914" column="8" declfile="pros/adi.h" declline="914" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga6ee6e73d3be33d0b2f5c4bfbe37f2d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-adi_1ga9c451728d4193f1a4e59d7dc489ac292" kindref="member">adi_gyro_t</ref></type>
        <definition>adi_gyro_t pros::c::adi_gyro_init</definition>
        <argsstring>(uint8_t port, double multiplier)</argsstring>
        <name>adi_gyro_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
        </param>
        <briefdescription>
<para>Initializes a gyroscope on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given port has not previously been configured as a gyro, then this function starts a 1300 ms calibration period.</para>
<para>It is highly recommended that this function be called from <ref refid="main_8h_1a9efe22aaead3a5e936b5df459de02eba" kindref="member">initialize()</ref> when the robot is stationary to ensure proper calibration.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar value that will be multiplied by the gyro heading value supplied by the ADI</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_gyro_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="953" column="12" declfile="pros/adi.h" declline="953" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga79a193e42f59415cf1f860812a7248d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_gyro_reset</definition>
        <argsstring>(adi_gyro_t gyro)</argsstring>
        <name>adi_gyro_reset</name>
        <param>
          <type><ref refid="group__c-adi_1ga9c451728d4193f1a4e59d7dc489ac292" kindref="member">adi_gyro_t</ref></type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Resets the gyroscope value to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(millis()<sp/>-<sp/>now<sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>gyro<sp/>every<sp/>2<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adi_gyro_reset(gyro);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="992" column="9" declfile="pros/adi.h" declline="992" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga618baab8adbdec65f418f68cf98325d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_gyro_shutdown</definition>
        <argsstring>(adi_gyro_t gyro)</argsstring>
        <name>adi_gyro_shutdown</name>
        <param>
          <type><ref refid="group__c-adi_1ga9c451728d4193f1a4e59d7dc489ac292" kindref="member">adi_gyro_t</ref></type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Disables the gyro and voids the configuration on its port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object to be shut down</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(millis()<sp/>-<sp/>now<sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adi_gyro_shutdown(gyro);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Shut<sp/>down<sp/>the<sp/>gyro<sp/>after<sp/>two<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1031" column="9" declfile="pros/adi.h" declline="1031" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga6c866c2d7e65da244268b94fa1ce131c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-adi_1ga57a45eab54fec9fc2d0a16117a64ad96" kindref="member">adi_potentiometer_t</ref></type>
        <definition>adi_potentiometer_t pros::c::adi_potentiometer_init</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_potentiometer_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Initializes a potentiometer on the given port of the original potentiometer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_potentiometer_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>POTENTIOMETER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_potentiometer_t<sp/>potentiometer<sp/>=<sp/>adi_potentiometer_init(POTENTIOMETER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>potentiometer&apos;s<sp/>angle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Angle:<sp/>%lf\n&quot;,<sp/>adi_potentiometer_get_angle(potentiometer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1069" column="21" declfile="pros/adi.h" declline="1069" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gadb7056020a04bc6988314deb0c787d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-adi_1ga57a45eab54fec9fc2d0a16117a64ad96" kindref="member">adi_potentiometer_t</ref></type>
        <definition>adi_potentiometer_t pros::c::adi_potentiometer_type_init</definition>
        <argsstring>(uint8_t port, adi_potentiometer_type_e_t potentiometer_type)</argsstring>
        <name>adi_potentiometer_type_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>adi_potentiometer_type_e_t</type>
          <declname>potentiometer_type</declname>
        </param>
        <briefdescription>
<para>Initializes a potentiometer on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>potentiometer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An adi_potentiometer_type_e_t enum value specifying the potentiometer version type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_potentiometer_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>POTENTIOMETER_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>POTENTIOMETER_TYPE<sp/>E_ADI_POT_EDR</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_potentiometer_t<sp/>potentiometer<sp/>=<sp/>adi_potentiometer_type_init(POTENTIOMETER_PORT,<sp/>POTENTIOMETER_TYPE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>potentiometer&apos;s<sp/>angle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Angle:<sp/>%lf\n&quot;,<sp/>adi_potentiometer_get_angle(potentiometer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1102" column="21" declfile="pros/adi.h" declline="1102" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga9cb484f9bc42af2cdd9904fd65c71224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::adi_potentiometer_get_angle</definition>
        <argsstring>(adi_potentiometer_t potentiometer)</argsstring>
        <name>adi_potentiometer_get_angle</name>
        <param>
          <type><ref refid="group__c-adi_1ga57a45eab54fec9fc2d0a16117a64ad96" kindref="member">adi_potentiometer_t</ref></type>
          <declname>potentiometer</declname>
        </param>
        <briefdescription>
<para>Gets the current potentiometer angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>The original potentiometer rotates 250 degrees thus returning an angle between 0-250 degrees. Potentiometer V2 rotates 330 degrees thus returning an angle between 0-330 degrees.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>potentiometer</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_potentiometer_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The potentiometer angle in degrees.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>POTENTIOMETER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_potentiometer_t<sp/>potentiometer<sp/>=<sp/>adi_potentiometer_t(POTENTIOMETER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>potnetiometer&apos;s<sp/>angle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Angle:<sp/>%lf\n&quot;,<sp/>adi_potentiometer_get_angle(potentiometer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1134" column="8" declfile="pros/adi.h" declline="1134" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gae497f00cdec2015cf920bd8ec075ec2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-adi_1ga3f0cd6532514a01a1684ddbaaa40ef8d" kindref="member">adi_led_t</ref></type>
        <definition>adi_led_t pros::c::adi_led_init</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_led_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Initializes a led on the given port of the original led. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - The ADI port given is not a valid port as defined below EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a led (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_led_t object containing the given port, or PROS_ERR if the initialization failed, setting errno</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LED_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_led_t<sp/>led<sp/>=<sp/>adi_led_init(LED_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[10]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF,<sp/>0xFFFF00,<sp/>0x00FFFF,<sp/>0xFF00FF,<sp/>0xFFFFFF,<sp/>0x000000,<sp/>0x000000,<sp/>0x000000};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>led<sp/>to<sp/>the<sp/>colors<sp/>in<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_set(led,<sp/>buffer,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1174" column="11" declfile="pros/adi.h" declline="1174" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gababb1b2e005fbff283233bd01254e3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_led_clear_all</definition>
        <argsstring>(adi_led_t led, uint32_t *buffer, uint32_t buffer_length)</argsstring>
        <name>adi_led_clear_all</name>
        <param>
          <type><ref refid="group__c-adi_1ga3f0cd6532514a01a1684ddbaaa40ef8d" kindref="member">adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
<para>Clear the entire led strip of color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of buffer to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LED_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_led_t<sp/>led<sp/>=<sp/>adi_led_init(LED_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>buffer[10]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF,<sp/>0xFFFF00,<sp/>0x00FFFF,<sp/>0xFF00FF,<sp/>0xFFFFFF,<sp/>0x000000,<sp/>0x000000,<sp/>0x000000};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>led<sp/>to<sp/>the<sp/>colors<sp/>in<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_set(led,<sp/>buffer,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Clear<sp/>the<sp/>led<sp/>strip</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_clear(led);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1209" column="9" declfile="pros/adi.h" declline="1209" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga9a80e2b125fd19522479e6db7bfb6964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_led_set</definition>
        <argsstring>(adi_led_t led, uint32_t *buffer, uint32_t buffer_length)</argsstring>
        <name>adi_led_set</name>
        <param>
          <type><ref refid="group__c-adi_1ga3f0cd6532514a01a1684ddbaaa40ef8d" kindref="member">adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
<para>Set the entire led strip using the colors contained in the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of buffer to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LED_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_led_t<sp/>led<sp/>=<sp/>adi_led_init(LED_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[10]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF,<sp/>0xFFFF00,<sp/>0x00FFFF,<sp/>0xFF00FF,<sp/>0xFFFFFF,<sp/>0x000000,<sp/>0x000000,<sp/>0x000000};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>led<sp/>strip<sp/>to<sp/>the<sp/>colors<sp/>in<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_set(led,<sp/>buffer,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1240" column="9" declfile="pros/adi.h" declline="1240" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gaacf6a7b63fb79951c110036d8bbba459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_led_set_all</definition>
        <argsstring>(adi_led_t led, uint32_t *buffer, uint32_t buffer_length, uint32_t color)</argsstring>
        <name>adi_led_set_all</name>
        <param>
          <type><ref refid="group__c-adi_1ga3f0cd6532514a01a1684ddbaaa40ef8d" kindref="member">adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the entire led strip to one color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of buffer to clear </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>color to set all the led strip value to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LED_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_led_t<sp/>led<sp/>=<sp/>adi_led_init(LED_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[10]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF,<sp/>0xFFFF00,<sp/>0x00FFFF,<sp/>0xFF00FF,<sp/>0xFFFFFF,<sp/>0x000000,<sp/>0x000000,<sp/>0x000000};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>led<sp/>strip<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_set_all(led,<sp/>buffer,<sp/>10,<sp/>0xFF0000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1272" column="9" declfile="pros/adi.h" declline="1272" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gab8a4783ec6c1c2fdb2f1d12e1ae21f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_led_set_pixel</definition>
        <argsstring>(adi_led_t led, uint32_t *buffer, uint32_t buffer_length, uint32_t color, uint32_t pixel_position)</argsstring>
        <name>adi_led_set_pixel</name>
        <param>
          <type><ref refid="group__c-adi_1ga3f0cd6532514a01a1684ddbaaa40ef8d" kindref="member">adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pixel_position</declname>
        </param>
        <briefdescription>
<para>Set one pixel on the led strip. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>color to clear all the led strip to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_position</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the pixel to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LED_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_led_t<sp/>led<sp/>=<sp/>adi_led_init(LED_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[10]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF,<sp/>0xFFFF00,<sp/>0x00FFFF,<sp/>0xFF00FF,<sp/>0xFFFFFF,<sp/>0x000000,<sp/>0x000000,<sp/>0x000000};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>first<sp/>pixel<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_set_pixel(led,<sp/>buffer,<sp/>10,<sp/>0xFF0000,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1305" column="9" declfile="pros/adi.h" declline="1305" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga9c35b46fb2c6fe94d5ffefe87aab92d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_led_clear_pixel</definition>
        <argsstring>(adi_led_t led, uint32_t *buffer, uint32_t buffer_length, uint32_t pixel_position)</argsstring>
        <name>adi_led_clear_pixel</name>
        <param>
          <type><ref refid="group__c-adi_1ga3f0cd6532514a01a1684ddbaaa40ef8d" kindref="member">adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pixel_position</declname>
        </param>
        <briefdescription>
<para>Clear one pixel on the led strip. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_position</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the pixel to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LED_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_led_t<sp/>led<sp/>=<sp/>adi_led_init(LED_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[10]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF,<sp/>0xFFFF00,<sp/>0x00FFFF,<sp/>0xFF00FF,<sp/>0xFFFFFF,<sp/>0x000000,<sp/>0x000000,<sp/>0x000000};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>first<sp/>pixel<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_set_pixel(led,<sp/>buffer,<sp/>10,<sp/>0xFF0000,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Clear<sp/>the<sp/>first<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_led_clear_pixel(led,<sp/>buffer,<sp/>10,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1341" column="9" declfile="pros/adi.h" declline="1341" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1ac2135e7b65a8b6cb7333bd5d8d29317e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>v5_device_e_t</type>
        <definition>v5_device_e_t pros::c::get_plugged_type</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>get_plugged_type</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the type of device on given port. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The device type as an enum.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DEVICE_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>v5_device_e_t<sp/>pt<sp/>=<sp/>get_plugged_type(DEVICE_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;device<sp/>plugged<sp/>type:<sp/>{plugged<sp/>type:<sp/>%d}\n&quot;,<sp/>pt);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/device.h" line="68" column="15" declfile="pros/device.h" declline="68" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__c-distance_1ga7d24458fd388aaa7bee4fac208b47d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::distance_get</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>distance_get</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the currently measured distance from the sensor in mm. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance value or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DISTANCE_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance<sp/>Value:<sp/>%d<sp/>mm\n&quot;,<sp/>distance_get(DISTANCE_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/distance.h" line="67" column="9" declfile="pros/distance.h" declline="67" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-distance_1ga97b69852b0f1ec60cdac10ca20caabdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::distance_get_confidence</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>distance_get_confidence</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the confidence in the distance reading. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a value that has a range of 0 to 63. 63 means high confidence, lower values imply less confidence. Confidence is only available when distance is &gt; 200mm (the value 10 is returned in this scenario).</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The confidence value or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DISTANCE_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance<sp/>Confidence<sp/>Value:<sp/>%d\n&quot;,<sp/>distance_get_confidence(DISTANCE_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/distance.h" line="97" column="9" declfile="pros/distance.h" declline="97" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-distance_1gaa87f08f6faaed31f3876d3980b1d3689" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::distance_get_object_size</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>distance_get_object_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the current guess at relative object size. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a value that has a range of 0 to 400. A 18&quot; x 30&quot; grey card will return a value of approximately 75 in typical room lighting.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size value or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DISTANCE_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance<sp/>Object<sp/>Size:<sp/>%d\n&quot;,<sp/>distance_get_object_size(DISTANCE_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/distance.h" line="127" column="9" declfile="pros/distance.h" declline="127" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-distance_1ga744e01aa684d89ff70dd443dba4eea53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::distance_get_object_velocity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>distance_get_object_velocity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the object velocity in m/s. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Distance" kindref="compound">Distance</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The velocity value or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DISTANCE_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance<sp/>Object<sp/>Velocity:<sp/>%f\n&quot;,<sp/>distance_get_object_velocity(DISTANCE_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/distance.h" line="153" column="8" declfile="pros/distance.h" declline="153" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga529d923cac85867a1fc20e1b385bb8b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_port_config_e_t</type>
        <definition>adi_port_config_e_t pros::c::ext_adi_port_get_config</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_port_get_config</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>General ADI Use Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow for interaction with any ADI port type <linebreak/>
 Gets the configuration for the given ADI port.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which to return the configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ADI configuration for the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_port_set_config(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Displays<sp/>the<sp/>value<sp/>of<sp/>E_ADI_ANALOG_IN</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Port<sp/>Type:<sp/>%d\n&quot;,<sp/>ext_adi_port_get_config(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="87" column="21" declfile="pros/ext_adi.h" declline="87" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga69502c412a1939551aab0f764ef14ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_port_get_value</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_port_get_value</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Gets the value for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which to return the configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value stored for the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_port_set_config(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Port<sp/>Value:<sp/>%d\n&quot;,<sp/>ext_adi_get_value(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="117" column="9" declfile="pros/ext_adi.h" declline="117" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga0a0ac030c3de3ac6374ef6c5ca9e4bc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_port_set_config</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port, adi_port_config_e_t type)</argsstring>
        <name>ext_adi_port_set_config</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>adi_port_config_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as a given sensor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration type for the port</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_port_set_config(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="148" column="9" declfile="pros/ext_adi.h" declline="148" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga66bcb742f80b237401eebce4e6f509e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_port_set_value</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port, int32_t value)</argsstring>
        <name>ext_adi_port_set_value</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This only works on ports configured as outputs, and the behavior will change depending on the configuration of the port.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the ADI port to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_port_set_config(ADI_EXPANDER_PORT,<sp/>DIGITAL_SENSOR_PORT,<sp/>E_ADI_DIGITAL_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_set_value(ADI_EXPANDER_PORT,<sp/>DIGITAL_SENSOR_PORT,<sp/>HIGH);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="184" column="9" declfile="pros/ext_adi.h" declline="184" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gac7ce5918ef247fbfbebadb8b87417ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_analog_calibrate</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_analog_calibrate</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Calibrates the analog sensor on the specified port and returns the new calibration value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the <ref refid="group__c-adi_1ga34a3205b4beecc2efb561a068ac869e7" kindref="member">adi_analog_read_calibrated()</ref> and <ref refid="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" kindref="member">adi_analog_read_calibrated_HR()</ref> functions. These functions will return the difference between this value and the current sensor value when called.</para>
<para>Do not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to calibrate (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The average sensor value computed by this function</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_analog_calibrate(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Calibrated<sp/>Reading:<sp/>%d\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_analog_read_calibrated(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>readings<sp/>from<sp/>then<sp/>on<sp/>will<sp/>be<sp/>calibrated</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="226" column="9" declfile="pros/ext_adi.h" declline="226" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gad23c527e73c2008d5bf49030efa255ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_analog_read</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_analog_read</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Gets the 12-bit value of the specified port. </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is undefined if the analog pin has been switched to a different mode.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>ext_adi_analog_read(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="263" column="9" declfile="pros/ext_adi.h" declline="263" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga2dd9e7a9e761ed80088bcf7f44920a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_analog_read_calibrated</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_analog_read_calibrated</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Gets the 12 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" kindref="member">adi_analog_calibrate()</ref> function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use <ref refid="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" kindref="member">adi_analog_read_calibrated_HR()</ref> instead.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -4095 to 4095</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>ext_adi_analog_read_calibrated(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="302" column="9" declfile="pros/ext_adi.h" declline="302" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga4e1d85f2e166adf83743b9fde5c504e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_analog_read_calibrated_HR</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_analog_read_calibrated_HR</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Gets the 16 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" kindref="member">adi_analog_calibrate()</ref> function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.</para>
<para>The value returned actually has 16 bits of &quot;precision&quot;, even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -16384 to 16384</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_analog_calibrate(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>ext_adi_analog_read_calibrated_HR(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="348" column="9" declfile="pros/ext_adi.h" declline="348" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gad030dfc04f9d5adb0861f940472974f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_digital_read</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_digital_read</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Gets the digital value (1 or 0) of a port configured as a digital input. </para>
        </briefdescription>
        <detaileddescription>
<para>If the port is configured as some other mode, the digital value which reflects the current state of the port is returned, which may or may not differ from the currently set value. The return value is undefined for ports configured as any mode other than a Digital Input.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as a digital input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the pin is HIGH, or false if it is LOW</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(“Sensor<sp/>Value:<sp/>%dn”,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ext_adi_digital_read(ADI_EXPANDER_PORT,<sp/>DIGITAL_SENSOR_PORT));<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="386" column="9" declfile="pros/ext_adi.h" declline="386" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gac5b25457c1f1277dd545b6fab326299c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_digital_get_new_press</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_digital_get_new_press</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Gets a rising-edge case for a digital button press. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> A calls this function for buttons 1 and 2. <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as a digital input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button is pressed and had not been pressed the last time this function was called, 0 otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ext_adi_digital_get_new_press(ADI_EXPANDER_PORT,<sp/>DIGITAL_SENSOR_PORT))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Toggle<sp/>pneumatics<sp/>or<sp/>other<sp/>state<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="429" column="9" declfile="pros/ext_adi.h" declline="429" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga638e7d47bbdde4b545be396d4cb20eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_digital_write</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port, bool value)</argsstring>
        <name>ext_adi_digital_write</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the digital value (1 or 0) of a port configured as a digital output. </para>
        </briefdescription>
        <detaileddescription>
<para>If the port is configured as some other mode, behavior is undefined.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as a digital output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>An expression evaluating to &quot;true&quot; or &quot;false&quot; to set the output to HIGH or LOW respectively, or the constants HIGH or LOW themselves</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>state<sp/>=<sp/>LOW;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>!=<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_digital_write(ADI_EXPANDER_PORT,<sp/>DIGITAL_SENSOR_PORT,<sp/>state);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);<sp/>//<sp/>toggle<sp/>the<sp/>sensor<sp/>value<sp/>every<sp/>50ms</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="470" column="9" declfile="pros/ext_adi.h" declline="470" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gafbc569ddf47381965a0abdecfcd927bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_pin_mode</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port, uint8_t mode)</argsstring>
        <name>ext_adi_pin_mode</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Configures the port as an input or output with a variety of settings. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_pin_mode(ADI_EXPANDER_PORT,<sp/>ANALOG_SENSOR_PORT,<sp/>INPUT_ANALOG);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="501" column="9" declfile="pros/ext_adi.h" declline="501" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga730496b89cb6864e53ade872dfbe479e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_motor_set</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port, int8_t speed)</argsstring>
        <name>ext_adi_motor_set</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
<para>Sets the speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_motor_set(ADI_EXPANDER_PORT,<sp/>MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_motor_set(ADI_EXPANDER_PORT,<sp/>MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="536" column="9" declfile="pros/ext_adi.h" declline="536" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga50b5f4f2d806d8725ec6feb59a13d2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_motor_get</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_motor_get</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Gets the last set speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to get (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last set speed of the motor on the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20<sp/>#</highlight></codeline>
<codeline><highlight class="normal">define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_motor_set(ADI_EXPANDER_PORT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(“Commanded<sp/>Motor<sp/>Power:<sp/>%dn”,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_motor_get(ADI_EXPANDER_PORT,<sp/>MOTOR_PORT));<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_motor_set(ADI_EXPANDER_PORT,<sp/>MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="570" column="9" declfile="pros/ext_adi.h" declline="570" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga3bcee559e95f3f4cb64e74521b5735d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_motor_stop</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_motor_stop</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Stops the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to set (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_motor_set(ADI_EXPANDER_PORT,<sp/>MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_motor_set(ADI_EXPANDER_PORT,<sp/>MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_motor_stop(ADI_EXPANDER_PORT,<sp/>MOTOR_PORT);<sp/>//<sp/>use<sp/>this<sp/>instead</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="603" column="9" declfile="pros/ext_adi.h" declline="603" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga63487c255370a2176334af8895ae188c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_encoder_get</definition>
        <argsstring>(ext_adi_encoder_t enc)</argsstring>
        <name>ext_adi_encoder_get</name>
        <param>
          <type><ref refid="group__ext-adi_1ga819f455cfd280a0a3f2489ee88aa19ac" kindref="member">ext_adi_encoder_t</ref></type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Gets the number of ticks recorded by the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>There are 360 ticks in one revolution.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The signed and cumulative number of counts since the last start or reset</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20<sp/></highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1<sp/>#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_encoder_t<sp/>enc<sp/>=<sp/>ext_adi_encoder_init(ADI_EXPANDER_PORT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(“Encoder<sp/>Value:<sp/>%dn”,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ext_adi_encoder_get(enc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="647" column="9" declfile="pros/ext_adi.h" declline="647" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gad5aecf207806976751067f9b0014d44d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ext-adi_1ga819f455cfd280a0a3f2489ee88aa19ac" kindref="member">ext_adi_encoder_t</ref></type>
        <definition>ext_adi_encoder_t pros::c::ext_adi_encoder_init</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port_top, uint8_t adi_port_bottom, bool reverse)</argsstring>
        <name>ext_adi_encoder_init</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port_top</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port_bottom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Creates an encoder object and configures the specified ports accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port_top</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;top&quot; wire from the encoder sensor with the removable cover side up. This should be in port 1, 3, 5, or 7 (&apos;A&apos;, &apos;C&apos;, &apos;E&apos;, or &apos;G&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port_bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;bottom&quot; wire from the encoder sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>If &quot;true&quot;, the sensor will count in the opposite direction</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_encoder_t object to be stored and used for later calls to encoder functions</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_encoder_t<sp/>enc<sp/>=<sp/>ext_adi_encoder_init(ADI_EXPANDER_PORT,<sp/>PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Encoder<sp/>Value:<sp/>%d\n&quot;,<sp/>ext_adi_encoder_get(enc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="687" column="19" declfile="pros/ext_adi.h" declline="687" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga8c631b2f466307d44407d3b5a1bdf021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_encoder_reset</definition>
        <argsstring>(ext_adi_encoder_t enc)</argsstring>
        <name>ext_adi_encoder_reset</name>
        <param>
          <type><ref refid="group__ext-adi_1ga819f455cfd280a0a3f2489ee88aa19ac" kindref="member">ext_adi_encoder_t</ref></type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Sets the encoder value to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>It is safe to use this method while an encoder is enabled. It is not necessary to call this method before stopping or starting an encoder.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to reset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_encoder_t<sp/>enc<sp/>=<sp/>ext_adi_encoder_init(ADI_EXPANDER_PORT,<sp/>PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>the<sp/>encoder<sp/>around<sp/>in<sp/>this<sp/>time</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_encoder_reset(enc);<sp/>//<sp/>The<sp/>encoder<sp/>is<sp/>now<sp/>zero<sp/>again</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="721" column="9" declfile="pros/ext_adi.h" declline="721" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gac393c5a6907b482311b430ab0fd01464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_encoder_shutdown</definition>
        <argsstring>(ext_adi_encoder_t enc)</argsstring>
        <name>ext_adi_encoder_shutdown</name>
        <param>
          <type><ref refid="group__ext-adi_1ga819f455cfd280a0a3f2489ee88aa19ac" kindref="member">ext_adi_encoder_t</ref></type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Disables the encoder and voids the configuration on its ports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_encoder_t<sp/>enc<sp/>=<sp/>ext_adi_encoder_init(ADI_EXPANDER_PORT,<sp/>PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Use<sp/>the<sp/>encoder</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_encoder_shutdown(enc);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="752" column="9" declfile="pros/ext_adi.h" declline="752" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga39da3e5809db13079605708f18156fb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_ultrasonic_get</definition>
        <argsstring>(ext_adi_ultrasonic_t ult)</argsstring>
        <name>ext_adi_ultrasonic_get</name>
        <param>
          <type><ref refid="group__ext-adi_1ga628d2ba74a77b5d590e4b865e3f4a7aa" kindref="member">ext_adi_ultrasonic_t</ref></type>
          <declname>ult</declname>
        </param>
        <briefdescription>
<para>Gets the current ultrasonic sensor value in centimeters. </para>
        </briefdescription>
        <detaileddescription>
<para>If no object was found, zero is returned. If the ultrasonic sensor was never started, the return value is undefined. Round and fluffy objects can cause inaccurate values to be returned.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ult</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_ultrasonic_t object from <ref refid="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" kindref="member">adi_ultrasonic_init()</ref> to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance to the nearest object in m^-4 (10000 indicates 1 meter), measured from the sensor&apos;s mounting points.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_ultrasonic_t<sp/>ult<sp/>=<sp/>ext_adi_ultrasonic_init(ADI_EXPANDER_PORT,<sp/>PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>ext_adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="798" column="9" declfile="pros/ext_adi.h" declline="798" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gaa9c9828dbd73694315c1b1cf5cdb59d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ext-adi_1ga628d2ba74a77b5d590e4b865e3f4a7aa" kindref="member">ext_adi_ultrasonic_t</ref></type>
        <definition>ext_adi_ultrasonic_t pros::c::ext_adi_ultrasonic_init</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port_ping, uint8_t adi_port_echo)</argsstring>
        <name>ext_adi_ultrasonic_init</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port_ping</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port_echo</declname>
        </param>
        <briefdescription>
<para>Creates an ultrasonic object and configures the specified ports accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port_ping</parametername>
</parameternamelist>
<parameterdescription>
<para>The port connected to the orange OUTPUT cable. This should be in port 1, 3, 5, or 7 (&apos;A&apos;, &apos;C&apos;, &apos;E&apos;, &apos;G&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port_echo</parametername>
</parameternamelist>
<parameterdescription>
<para>The port connected to the yellow INPUT cable. This should be in the next highest port following port_ping.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_ultrasonic_t object to be stored and used for later calls to ultrasonic functions</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_ultrasonic_t<sp/>ult<sp/>=<sp/>ext_adi_ultrasonic_init(ADI_EXPANDER_PORT,<sp/>PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>ext_adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="838" column="22" declfile="pros/ext_adi.h" declline="838" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga43715ce7b1d8b4b2b3d09f2a04c14c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_ultrasonic_shutdown</definition>
        <argsstring>(ext_adi_ultrasonic_t ult)</argsstring>
        <name>ext_adi_ultrasonic_shutdown</name>
        <param>
          <type><ref refid="group__ext-adi_1ga628d2ba74a77b5d590e4b865e3f4a7aa" kindref="member">ext_adi_ultrasonic_t</ref></type>
          <declname>ult</declname>
        </param>
        <briefdescription>
<para>Disables the ultrasonic sensor and voids the configuration on its ports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ult</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_ultrasonic_t object from <ref refid="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" kindref="member">adi_ultrasonic_init()</ref> to stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_ultrasonic_t<sp/>ult<sp/>=<sp/>ext_adi_ultrasonic_init(ADI_EXPANDER_PORT,<sp/>PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>ext_adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_ultrasonic_shutdown(ult);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="873" column="9" declfile="pros/ext_adi.h" declline="873" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga0d75771553832ae16e7b45833fb095fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::ext_adi_gyro_get</definition>
        <argsstring>(ext_adi_gyro_t gyro)</argsstring>
        <name>ext_adi_gyro_get</name>
        <param>
          <type><ref refid="group__ext-adi_1gaeb1fda9da4589cd3cd2e9efe5693f308" kindref="member">ext_adi_gyro_t</ref></type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Gets the current gyro angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.</para>
<para>There are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gyro angle in degrees.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_gyro_t<sp/>gyro<sp/>=<sp/>ext_adi_gyro_init(ADI_EXPANDER_PORT,<sp/>GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>ext_adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="921" column="8" declfile="pros/ext_adi.h" declline="921" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga62cddb9a1858256f0fa03effc89ddb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ext-adi_1gaeb1fda9da4589cd3cd2e9efe5693f308" kindref="member">ext_adi_gyro_t</ref></type>
        <definition>ext_adi_gyro_t pros::c::ext_adi_gyro_init</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port, double multiplier)</argsstring>
        <name>ext_adi_gyro_init</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
        </param>
        <briefdescription>
<para>Initializes a gyroscope on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given port has not previously been configured as a gyro, then this function starts a 1300 ms calibration period.</para>
<para>It is highly recommended that this function be called from <ref refid="main_8h_1a9efe22aaead3a5e936b5df459de02eba" kindref="member">initialize()</ref> when the robot is stationary to ensure proper calibration.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port number that the ADI Expander is in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar value that will be multiplied by the gyro heading value supplied by the ADI</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_gyro_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_gyro_t<sp/>gyro<sp/>=<sp/>ext_adi_gyro_init(ADI_EXPANDER_PORT,<sp/>GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>ext_adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="965" column="16" declfile="pros/ext_adi.h" declline="965" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga91d5a238cdf4fcde887bbb88e3a7ecb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_gyro_reset</definition>
        <argsstring>(ext_adi_gyro_t gyro)</argsstring>
        <name>ext_adi_gyro_reset</name>
        <param>
          <type><ref refid="group__ext-adi_1gaeb1fda9da4589cd3cd2e9efe5693f308" kindref="member">ext_adi_gyro_t</ref></type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Resets the gyroscope value to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_gyro_t<sp/>gyro<sp/>=<sp/>ext_adi_gyro_init(ADI_EXPANDER_PORT,<sp/>GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>ext_adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(millis()<sp/>-<sp/>now<sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>gyro<sp/>every<sp/>2<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ext_adi_gyro_reset(gyro);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1007" column="9" declfile="pros/ext_adi.h" declline="1007" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga30f807700f54ac3365a4a069f8b76747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_gyro_shutdown</definition>
        <argsstring>(ext_adi_gyro_t gyro)</argsstring>
        <name>ext_adi_gyro_shutdown</name>
        <param>
          <type><ref refid="group__ext-adi_1gaeb1fda9da4589cd3cd2e9efe5693f308" kindref="member">ext_adi_gyro_t</ref></type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Disables the gyro and voids the configuration on its port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21). EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object to be shut down</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_EXPANDER_PORT<sp/>20</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_gyro_t<sp/>gyro<sp/>=<sp/>ext_adi_gyro_init(ADI_EXPANDER_PORT,<sp/>GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>ext_adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(millis()<sp/>-<sp/>now<sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ext_adi_gyro_shutdown(gyro);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Shut<sp/>down<sp/>the<sp/>gyro<sp/>after<sp/>two<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1049" column="9" declfile="pros/ext_adi.h" declline="1049" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gae2bf52ad57d33a38a267e8290af69d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ext-adi_1ga891a22b2cb7fee5d61a8f0f5c1c3d1b6" kindref="member">ext_adi_potentiometer_t</ref></type>
        <definition>ext_adi_potentiometer_t pros::c::ext_adi_potentiometer_init</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port, adi_potentiometer_type_e_t potentiometer_type)</argsstring>
        <name>ext_adi_potentiometer_init</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>adi_potentiometer_type_e_t</type>
          <declname>potentiometer_type</declname>
        </param>
        <briefdescription>
<para>Initializes a potentiometer on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>potentiometer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An adi_potentiometer_type_e_t enum value specifying the potentiometer version type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_potentiometer_t object containing the given port, or PROS_ERR if the initialization failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1075" column="25" declfile="pros/ext_adi.h" declline="1075" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gac01c2a7c6135326444bb2c057da534fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::ext_adi_potentiometer_get_angle</definition>
        <argsstring>(ext_adi_potentiometer_t potentiometer)</argsstring>
        <name>ext_adi_potentiometer_get_angle</name>
        <param>
          <type><ref refid="group__ext-adi_1ga891a22b2cb7fee5d61a8f0f5c1c3d1b6" kindref="member">ext_adi_potentiometer_t</ref></type>
          <declname>potentiometer</declname>
        </param>
        <briefdescription>
<para>Gets the current potentiometer angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>The original potentiometer rotates 250 degrees thus returning an angle between 0-250 degrees. Potentiometer V2 rotates 333 degrees thus returning an angle between 0-333 degrees.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>potentiometer</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_potentiometer_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The potentiometer angle in degrees. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1093" column="8" declfile="pros/ext_adi.h" declline="1093" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga8a09b8dad353079feddb46e80b9e5176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__ext-adi_1ga0ba5db4df39c9b699914127c8cdb7f1a" kindref="member">ext_adi_led_t</ref></type>
        <definition>ext_adi_led_t pros::c::ext_adi_led_init</definition>
        <argsstring>(uint8_t smart_port, uint8_t adi_port)</argsstring>
        <name>ext_adi_led_init</name>
        <param>
          <type>uint8_t</type>
          <declname>smart_port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Initializes a led on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smart_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The smart port with the adi expander (1-21) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a led (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An ext_adi_led_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SMART_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_PORT<sp/>&apos;A&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>led<sp/>on<sp/>smart<sp/>port<sp/>1<sp/>and<sp/>adi<sp/>port<sp/>A</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_led_t<sp/>led<sp/>=<sp/>ext_adi_led_init(SMART_PORT,<sp/>ADI_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>buffer<sp/>with<sp/>a<sp/>single<sp/>color<sp/>of<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[1]<sp/>=<sp/>{0xFF0000};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>led<sp/>to<sp/>colors<sp/>in<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>ext_adi_led_set(led,<sp/>buffer,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1139" column="15" declfile="pros/ext_adi.h" declline="1139" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga89970b0d73e71019ce63fad4e349fd75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_led_clear_all</definition>
        <argsstring>(ext_adi_led_t led, uint32_t *buffer, uint32_t buffer_length)</argsstring>
        <name>ext_adi_led_clear_all</name>
        <param>
          <type><ref refid="group__ext-adi_1ga0ba5db4df39c9b699914127c8cdb7f1a" kindref="member">ext_adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
<para>Clear the entire led strip of color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of buffer to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SMART_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_PORT<sp/>&apos;A&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>led<sp/>on<sp/>smart<sp/>port<sp/>1<sp/>and<sp/>adi<sp/>port<sp/>A</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_led_t<sp/>led<sp/>=<sp/>ext_adi_led_init(SMART_PORT,<sp/>ADI_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>buffer<sp/>with<sp/>a<sp/>single<sp/>color<sp/>of<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[1]<sp/>=<sp/>{0xFF0000};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>led<sp/>to<sp/>colors<sp/>in<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_led_set(led,<sp/>buffer,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Clear<sp/>the<sp/>led</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_led_clear_all(led,<sp/>buffer,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1178" column="9" declfile="pros/ext_adi.h" declline="1178" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga8fc6d5bb4f42be183729a967ecff5f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_led_set</definition>
        <argsstring>(ext_adi_led_t led, uint32_t *buffer, uint32_t buffer_length)</argsstring>
        <name>ext_adi_led_set</name>
        <param>
          <type><ref refid="group__ext-adi_1ga0ba5db4df39c9b699914127c8cdb7f1a" kindref="member">ext_adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <briefdescription>
<para>Set the entire led strip using the colors contained in the buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of buffer to clear </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SMART_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_PORT<sp/>&apos;A&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>led<sp/>on<sp/>smart<sp/>port<sp/>1<sp/>and<sp/>adi<sp/>port<sp/>A</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_led_t<sp/>led<sp/>=<sp/>ext_adi_led_init(SMART_PORT,<sp/>ADI_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>buffer<sp/>with<sp/>a<sp/>single<sp/>color<sp/>of<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[1]<sp/>=<sp/>{0xFF0000};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>led<sp/>to<sp/>colors<sp/>in<sp/>the<sp/>buffer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_led_set(led,<sp/>buffer,<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1213" column="9" declfile="pros/ext_adi.h" declline="1213" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1gab30c8d87b5ea61420f13018cfe3b3bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_led_set_all</definition>
        <argsstring>(ext_adi_led_t led, uint32_t *buffer, uint32_t buffer_length, uint32_t color)</argsstring>
        <name>ext_adi_led_set_all</name>
        <param>
          <type><ref refid="group__ext-adi_1ga0ba5db4df39c9b699914127c8cdb7f1a" kindref="member">ext_adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the entire led strip to one color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of buffer to clear </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>color to set all the led strip value to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SMART_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_PORT<sp/>&apos;A&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>led<sp/>on<sp/>smart<sp/>port<sp/>1<sp/>and<sp/>adi<sp/>port<sp/>A</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_led_t<sp/>led<sp/>=<sp/>ext_adi_led_init(SMART_PORT,<sp/>ADI_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>buffer<sp/>with<sp/>a<sp/>single<sp/>color<sp/>of<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[1]<sp/>=<sp/>{0xFF0000};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>entire<sp/>led<sp/>strip<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_led_set_all(led,<sp/>buffer,<sp/>1,<sp/>0xFF0000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1249" column="9" declfile="pros/ext_adi.h" declline="1249" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga6dcd3d6f88ed980a4810de131ddd8d10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_led_set_pixel</definition>
        <argsstring>(ext_adi_led_t led, uint32_t *buffer, uint32_t buffer_length, uint32_t color, uint32_t pixel_position)</argsstring>
        <name>ext_adi_led_set_pixel</name>
        <param>
          <type><ref refid="group__ext-adi_1ga0ba5db4df39c9b699914127c8cdb7f1a" kindref="member">ext_adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pixel_position</declname>
        </param>
        <briefdescription>
<para>Set one pixel on the led strip. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>color to clear all the led strip to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_position</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the pixel to clear (0 indexed) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SMART_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_PORT<sp/>&apos;A&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>led<sp/>on<sp/>smart<sp/>port<sp/>1<sp/>and<sp/>adi<sp/>port<sp/>A</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_led_t<sp/>led<sp/>=<sp/>ext_adi_led_init(SMART_PORT,<sp/>ADI_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>buffer<sp/>with<sp/>multiple<sp/>colors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[3]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>first<sp/>pixel<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_led_set_pixel(led,<sp/>buffer,<sp/>3,<sp/>0xFF0000,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1286" column="9" declfile="pros/ext_adi.h" declline="1286" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__ext-adi_1ga4f1f2135b09f9442ad40c7b935367de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::ext_adi_led_clear_pixel</definition>
        <argsstring>(ext_adi_led_t led, uint32_t *buffer, uint32_t buffer_length, uint32_t pixel_position)</argsstring>
        <name>ext_adi_led_clear_pixel</name>
        <param>
          <type><ref refid="group__ext-adi_1ga0ba5db4df39c9b699914127c8cdb7f1a" kindref="member">ext_adi_led_t</ref></type>
          <declname>led</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>buffer_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>pixel_position</declname>
        </param>
        <briefdescription>
<para>Clear one pixel on the led strip. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EINVAL - A given value is not correct, or the buffer is null EADDRINUSE - The port is not configured for ADI output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>led</parametername>
</parameternamelist>
<parameterdescription>
<para>port of type adi_led_t </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>array of colors in format 0xRRGGBB, recommended that individual RGB value not to exceed 0x80 due to current draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer_length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the input buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pixel_position</parametername>
</parameternamelist>
<parameterdescription>
<para>position of the pixel to clear (0 indexed) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_SUCCESS if successful, PROS_ERR if not</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>SMART_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_PORT<sp/>&apos;A&apos;</highlight></codeline>
<codeline><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>led<sp/>on<sp/>smart<sp/>port<sp/>1<sp/>and<sp/>adi<sp/>port<sp/>A</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ext_adi_led_t<sp/>led<sp/>=<sp/>ext_adi_led_init(SMART_PORT,<sp/>ADI_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initialize<sp/>a<sp/>buffer<sp/>with<sp/>multiple<sp/>colors</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>buffer[3]<sp/>=<sp/>{0xFF0000,<sp/>0x00FF00,<sp/>0x0000FF};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>first<sp/>pixel<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_led_set_pixel(led,<sp/>buffer,<sp/>3,<sp/>0xFF0000,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Clear<sp/>the<sp/>first<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ext_adi_led_clear_pixel(led,<sp/>buffer,<sp/>3,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/ext_adi.h" line="1326" column="9" declfile="pros/ext_adi.h" declline="1326" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1gaaacc1a85b6f91aeeac8ad61c4abc647e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::gps_initialize_full</definition>
        <argsstring>(uint8_t port, double xInitial, double yInitial, double headingInitial, double xOffset, double yOffset)</argsstring>
        <name>gps_initialize_full</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters, as well as its initial position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>X_OFFSET<sp/>.225</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Y_OFFSET<sp/>.223</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>X_INITIAL<sp/>1.54</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Y_INITIAL<sp/>1.14</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>HEADING_INITIAL<sp/>90</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_initialize_full(GPS_PORT,<sp/>X_OFFSET,<sp/>Y_OFFSET,<sp/>X_INITIAL,<sp/>Y_INITIAL,<sp/>HEADING_INITIAL);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="137" column="9" declfile="pros/gps.h" declline="137" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga9bb1c008e968001ab2bd0e3aa7e25464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::gps_set_offset</definition>
        <argsstring>(uint8_t port, double xOffset, double yOffset)</argsstring>
        <name>gps_set_offset</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>X_OFFSET<sp/>-.225</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Y_OFFSET<sp/>.225</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_set_offset(GPS_PORT,<sp/>X_OFFSET,<sp/>Y_OFFSET);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="169" column="9" declfile="pros/gps.h" declline="169" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga463033a7ae169745d28ee586f7720065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgps__status__s__t" kindref="compound">gps_status_s_t</ref></type>
        <definition>gps_status_s_t gps_get_status</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_status</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the position and roll, yaw, and pitch of the GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct (<ref refid="structgps__status__s__t" kindref="compound">gps_status_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_status_s_t<sp/>status;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>gps_get_status(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Pitch:<sp/>%f,<sp/>Roll:<sp/>%f,<sp/>Yaw:<sp/>%f\n&quot;,<sp/>status.x,<sp/>status.y,<sp/>status.pitch,<sp/>status.roll,<sp/>status.yaw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct (<ref refid="structgps__status__s__t" kindref="compound">gps_status_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>gps_status_s_t<sp/>status;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>gps_get_status(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;x:<sp/>%3f,<sp/>y:<sp/>%3f,<sp/>pitch:<sp/>%3f&quot;,<sp/>status.x,<sp/>status.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>2,<sp/>&quot;yaw:<sp/>%3f,<sp/>roll:<sp/>%3f&quot;,<sp/>status.pitch,<sp/>status.yaw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>3,<sp/>&quot;roll:<sp/>%3f&quot;,<sp/>status.roll);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="202" column="16" declfile="pros/gps.h" declline="202" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1gad82551a838e2956a640fb8b71580031b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref></type>
        <definition>gps_position_s_t pros::c::gps_get_position</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the x and y position on the field of the GPS in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct (<ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_position_s_t<sp/>position;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>position<sp/>=<sp/>gps_get_position(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f\n&quot;,<sp/>position.x,<sp/>position.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="235" column="18" declfile="pros/gps.h" declline="235" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga71c6de5419adaa9e60fbfab779665492" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-gps_1ga67a9badd3682634a75ad506fd87f7903" kindref="member">gps_gyro_s_t</ref></type>
        <definition>gps_gyro_s_t gps_get_gyro_rate</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_gyro_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the GPS&apos;s raw gyroscope values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_gyro_s_t<sp/>gyro;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gyro<sp/>=<sp/>gps_get_gyro(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Gyro:<sp/>%f<sp/>%f<sp/>%f\n&quot;,<sp/>gyro.x,<sp/>gyro.y,<sp/>gyro.z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>gps_gyro_s_t<sp/>gyro;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gyro<sp/>=<sp/>gps_get_gyro_rate(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;gyroscope-<sp/>x:<sp/>%3f,<sp/>y:<sp/>%3f,<sp/>z:<sp/>%3f&quot;,<sp/>gyro.x,<sp/>gyro.y,<sp/>gyro.z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="266" column="14" declfile="pros/gps.h" declline="266" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga388ef016d4e0529c4d426f837b73658a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-gps_1ga207fc83ba7d708bb8fe13855938469ef" kindref="member">gps_accel_s_t</ref></type>
        <definition>gps_accel_s_t gps_get_accel</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_accel</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the GPS&apos;s raw accelerometer values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS&apos;s port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_accel_s_t<sp/>accel;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>accel<sp/>=<sp/>gps_get_accel(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Z:<sp/>%f\n&quot;,<sp/>accel.x,<sp/>accel.y,<sp/>accel.z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS&apos;s port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>struct<sp/>gps_accel_s_t<sp/>accel;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>accel<sp/>=<sp/>gps_get_accel(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;accleration-<sp/>x:<sp/>%3f,<sp/>y:<sp/>%3f,<sp/>z:<sp/>%3f&quot;,<sp/>accel.x,<sp/>accel.y,<sp/>accel.z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="297" column="15" declfile="pros/gps.h" declline="297" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga2f42b16469743fef77826a9bd8efa005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref></type>
        <definition>gps_position_s_t pros::c::gps_get_offset</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_offset</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the GPS&apos;s cartesian location relative to the center of turning/origin in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct (<ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref>) containing the X and Y values if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_position_s_t<sp/>pos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>gps_get_offset(GPS_PORT,<sp/>x,<sp/>y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;X<sp/>Offset:<sp/>%4d,<sp/>Y<sp/>Offset:<sp/>%4d&quot;,<sp/>pos.x,<sp/>pos.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="328" column="18" declfile="pros/gps.h" declline="328" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga292c2836a160552630507d2c3ce08113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::gps_set_position</definition>
        <argsstring>(uint8_t port, double xInitial, double yInitial, double headingInitial)</argsstring>
        <name>gps_set_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <briefdescription>
<para>Sets the robot&apos;s location relative to the center of the field in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>X_INITIAL<sp/>-1.15</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>Y_INITIAL<sp/>1.45</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>HEADING_INITIAL<sp/>90</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_set_position(GPS_PORT,<sp/>X_INITIAL,<sp/>Y_INITIAL,<sp/>HEADING_INITIAL);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="362" column="9" declfile="pros/gps.h" declline="362" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga9a6507b5e1e6668dbef5185fcf35d0ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::gps_set_data_rate</definition>
        <argsstring>(uint8_t port, uint32_t rate)</argsstring>
        <name>gps_set_data_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the GPS sensor&apos;s data rate in milliseconds, only applies to IMU on GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Data rate in milliseconds (Minimum: 5 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GPS_DATA_RATE<sp/>5</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_set_data_rate(GPS_PORT,<sp/>GPS_DATA_RATE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>something</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="393" column="9" declfile="pros/gps.h" declline="393" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1gabcb755cae646e13f5ee452f4de7234fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::gps_get_error</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_error</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the possible RMS (Root Mean Squared) error in meters for GPS position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Possible RMS (Root Mean Squared) error in meters for GPS position. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>error;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>error<sp/>=<sp/>gps_get_error(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Error:<sp/>%4d&quot;,<sp/>error);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="421" column="8" declfile="pros/gps.h" declline="421" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga6629794462b93c861c7f3b51fd603593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::gps_get_heading</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the heading in [0,360) degree values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The heading in [0,360) degree values. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>heading;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>heading<sp/>=<sp/>gps_get_heading(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="487" column="8" declfile="pros/gps.h" declline="487" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1gaa9476b021e4105b9bc91dcedc4113672" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::gps_get_heading_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_heading_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the heading in the max double value and min double value scale. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The heading in [DOUBLE_MIN, DOUBLE_MAX] values. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>heading;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>heading<sp/>=<sp/>gps_get_heading_raw(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="518" column="8" declfile="pros/gps.h" declline="518" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga9ea3211fc1740e03294f59f979ee6c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::gps_get_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_get_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the GPS sensor&apos;s elapsed rotation value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The elased heading in degrees. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>double<sp/>elapsed_rotation;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>elapsed_rotation<sp/>=<sp/>gps_get_rotation(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Elapsed<sp/>rotation:<sp/>%3f&quot;,<sp/>elapsed_rotation);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="546" column="8" declfile="pros/gps.h" declline="546" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga40c00789db37acf3fc33c94d92a612e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::gps_set_rotation</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>gps_set_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Set the GPS sensor&apos;s rotation value to target value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target rotation value to set rotation value to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_set_rotation(GPS_PORT,<sp/>60);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Elapsed<sp/>rotation:<sp/>%3f&quot;,<sp/>gps_get_rotation(GPS_PORT));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="574" column="9" declfile="pros/gps.h" declline="574" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-gps_1ga9fc3c54c39cf2b95736654f1a299cb4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::gps_tare_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>gps_tare_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Tare the GPS sensor&apos;s rotation value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_tare_rotation(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Elapsed<sp/>rotation:<sp/>%3f&quot;,<sp/>gps_get_rotation(GPS_PORT));<sp/>//<sp/>should<sp/>be<sp/>0</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.h" line="600" column="9" declfile="pros/gps.h" declline="600" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga0ea1e99bb730db27d613f31a11e933c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_reset</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_reset</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Calibrate IMU. </para>
        </briefdescription>
        <detaileddescription>
<para>Calibration takes approximately 2 seconds, but this function only blocks until the IMU status flag is set properly to E_IMU_STATUS_CALIBRATING, with a minimum blocking time of 5ms.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is already calibrating, or time out setting the status flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>imu_reset(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>time<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(imu_get_status(IMU_PORT)<sp/>&amp;<sp/>E_IMU_STATUS_CALIBRATING)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>calibrating...<sp/>%d\n&quot;,<sp/>iter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iter<sp/>+=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>should<sp/>print<sp/>about<sp/>2000<sp/>ms</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;IMU<sp/>is<sp/>done<sp/>calibrating<sp/>(took<sp/>%d<sp/>ms)\n&quot;,<sp/>iter<sp/>-<sp/>time);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="150" column="9" declfile="pros/imu.h" declline="150" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga81bba3715493e23dda2fbd33f1410f9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_reset_blocking</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_reset_blocking</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Calibrate IMU and Blocks while Calibrating. </para>
        </briefdescription>
        <detaileddescription>
<para>Calibration takes approximately 2 seconds and blocks during this period, with a timeout for this operation being set a 3 seconds as a safety margin. Like the other reset function, this function also blocks until the IMU status flag is set properly to E_IMU_STATUS_CALIBRATING, with a minimum blocking time of 5ms and a timeout of 1 second if it&apos;s never set.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is already calibrating, or time out setting the status flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed (timing out or port claim failure), setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="172" column="9" declfile="pros/imu.h" declline="172" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga73029aa0aa910f9b740ffe6def05e830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_data_rate</definition>
        <argsstring>(uint8_t port, uint32_t rate)</argsstring>
        <name>imu_set_data_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the Inertial Sensor&apos;s refresh interval in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>The rate may be specified in increments of 5ms, and will be rounded down to the nearest increment. The minimum allowable refresh rate is 5ms. The default rate is 10ms.</para>
<para>As values are copied into the shared memory buffer only at 10ms intervals, setting this value to less than 10ms does not mean that you can poll the sensor&apos;s values any faster. However, it will guarantee that the data is as recent as possible.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>The data refresh interval in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="202" column="9" declfile="pros/imu.h" declline="202" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gaa44bc46059f8aca47f3317320f1cd5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the total number of degrees the Inertial Sensor has spun about the z-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is theoretically unbounded. Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>get<sp/>rotation:<sp/>%f<sp/>degrees\n&quot;,<sp/>imu_get_rotation(IMU_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="234" column="8" declfile="pros/imu.h" declline="234" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gacca94d74756713e9ca0bd36490c6acc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_heading</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s heading relative to the initial direction of its x-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is bounded by [0,360). Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>get<sp/>heading:<sp/>%f<sp/>degrees\n&quot;,<sp/>imu_get_heading(IMU_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="267" column="8" declfile="pros/imu.h" declline="267" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gafdacdac1c6beeed1cce3829b67ebe473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structquaternion__s__t" kindref="compound">quaternion_s_t</ref></type>
        <definition>quaternion_s_t pros::c::imu_get_quaternion</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_quaternion</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get a quaternion representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quaternion representing the sensor&apos;s orientation. If the operation failed, all the quaternion&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>quaternion_s_t<sp/>qt<sp/>=<sp/>imu_get_quaternion(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>quaternion:<sp/>{x:<sp/>%f,<sp/>y:<sp/>%f,<sp/>z:<sp/>%f,<sp/>w:<sp/>%f}\n&quot;,<sp/>qt.x,<sp/>qt.y,<sp/>qt.z,<sp/>qt.w);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="297" column="16" declfile="pros/imu.h" declline="297" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga8d16738ae5c652c2c72479e793f4f09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeuler__s__t" kindref="compound">euler_s_t</ref></type>
        <definition>euler_s_t pros::c::imu_get_euler</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Euler angles representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euler angles representing the sensor&apos;s orientation. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>euler_s_t<sp/>eu<sp/>=<sp/>imu_get_euler(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>euler<sp/>angles:<sp/>{pitch:<sp/>%f,<sp/>roll:<sp/>%f,<sp/>yaw:<sp/>%f}\n&quot;,<sp/>eu.pitch,<sp/>eu.roll,<sp/>eu.yaw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="327" column="11" declfile="pros/imu.h" declline="327" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gafe88178fca4b6dd69cae69469bb58e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-imu_1ga5b9e240cfb181cce3c741e29efbbbf23" kindref="member">imu_gyro_s_t</ref></type>
        <definition>imu_gyro_s_t pros::c::imu_get_gyro_rate</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_gyro_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw gyroscope values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pitch angle, or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>pitch:<sp/>%f\n&quot;,<sp/>imu_get_pitch(IMU_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="355" column="14" declfile="pros/imu.h" declline="355" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gaae2df998074e80a7531de57c1161f47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-imu_1ga70eb3173193f4f46266eade4c243f662" kindref="member">imu_accel_s_t</ref></type>
        <definition>imu_accel_s_t pros::c::imu_get_accel</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_accel</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw acceleroneter values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The roll angle, or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>roll:<sp/>%f\n&quot;,<sp/>imu_get_roll(IMU_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="382" column="15" declfile="pros/imu.h" declline="382" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga1ccf1cf41bf15e416c89d64093d63764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>imu_status_e_t</type>
        <definition>imu_status_e_t pros::c::imu_get_status</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_status</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s status. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The yaw angle, or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>yaw:<sp/>%f\n&quot;,<sp/>imu_get_yaw(IMU_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="409" column="16" declfile="pros/imu.h" declline="409" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1ga44a4f2d6c27854606ca35247b97dc68d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_pitch</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s pitch angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>imu_accel_s_t<sp/>accel<sp/>=<sp/>imu_get_accel(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>accel<sp/>values:<sp/>{x:<sp/>%f,<sp/>y:<sp/>%f,<sp/>z:<sp/>%f}\n&quot;,<sp/>accel.x,<sp/>accel.y,<sp/>accel.z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="469" column="8" declfile="pros/imu.h" declline="469" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gaa913785ee0bf907fafd049145f735e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_roll</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s roll angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Inertial Sensor&apos;s status code, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>IMU_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>imu_reset(IMU_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>time<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(imu_get_status(IMU_PORT)<sp/>&amp;<sp/>E_IMU_STATUS_CALIBRATING)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;IMU<sp/>calibrating...<sp/>%d\n&quot;,<sp/>iter);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>iter<sp/>+=<sp/>10;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>should<sp/>print<sp/>about<sp/>2000<sp/>ms</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;IMU<sp/>is<sp/>done<sp/>calibrating<sp/>(took<sp/>%d<sp/>ms)\n&quot;,<sp/>iter<sp/>-<sp/>time);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="503" column="8" declfile="pros/imu.h" declline="503" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-imu_1gaa1b43b44cf94a724d4917bf363db2299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_yaw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s yaw angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The yaw angle, or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="518" column="8" declfile="pros/imu.h" declline="518" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga4277232ad855f067803c1fcba9885b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_init</definition>
        <argsstring>(uint8_t port, const char *link_id, link_type_e_t type)</argsstring>
        <name>link_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type>link_type_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initializes a link on a radio port, with an indicated type. </para>
        </briefdescription>
        <detaileddescription>
<para>There might be a 1 to 2 second delay from when this function is called to when the link is initializes. PROS currently only supports the use of one radio per brain.</para>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique link ID in the form of a string, needs to be different from other links in the area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the radio link on the brain is a transmitter or reciever, with the transmitter having double the transmitting bandwidth as the recieving end (1040 bytes/s vs 520 bytes/s).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if initialization fails, 1 if the initialization succeeds.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>LINK_ID<sp/>&quot;ROBOT1&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>link_init(LINK_TRANSMITTER_PORT,<sp/>LINK_ID,<sp/>E_LINK_TRANSMITTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="108" column="10" declfile="pros/link.h" declline="108" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga63e9104523a080995babfd88712bc756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_init_override</definition>
        <argsstring>(uint8_t port, const char *link_id, link_type_e_t type)</argsstring>
        <name>link_init_override</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type>link_type_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initializes a link on a radio port, with an indicated type and the ability for vexlink to override the controller radio. </para>
        </briefdescription>
        <detaileddescription>
<para>There might be a 1 to 2 second delay from when this function is called to when the link is initializes. PROS currently only supports the use of one radio per brain.</para>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique link ID in the form of a string, needs to be different from other links in the area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the radio link on the brain is a transmitter or reciever, with the transmitter having double the transmitting bandwidth as the recieving end (1040 bytes/s vs 520 bytes/s).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if initialization fails, 1 if the initialization succeeds.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>LINK_ID<sp/>&quot;ROBOT1&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>link_init(LINK_PORT,<sp/>LINK_ID,<sp/>E_LINK_TRANSMITTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>link_init_override(LINK_PORT,<sp/>LINK_ID,<sp/>E_LINK_TRANSMITTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="145" column="10" declfile="pros/link.h" declline="145" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga89910cd189b97e358568b117cbedbf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::link_connected</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_connected</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if a radio link on a port is active or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If a radio is connected to a port and it&apos;s connected to a link.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(link_connected(LINK_TRANSMITTER_PORT))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Link<sp/>connected!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="175" column="6" declfile="pros/link.h" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga176c20419748c6e2b08467c585461376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_raw_receivable_size</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_raw_receivable_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the bytes of data available to be read. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio, else the bytes available to be read by the user.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_RECIVER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>receiveable_size<sp/>=<sp/>link_raw_receivable_size(LINK_RECIVER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;link_raw_receiveable_size:<sp/>%d&quot;,<sp/>receiveable_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="205" column="10" declfile="pros/link.h" declline="205" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1gab4e3a75704ace5aaddc1de05d10b644a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_raw_transmittable_size</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_raw_transmittable_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the bytes of data available in transmission buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio,</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>transmittable_size<sp/>=<sp/>link_raw_transmittable_size(LINK_TRANSMITTER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;link_raw_transmittable_size:<sp/>%d&quot;,<sp/>transmittable_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="234" column="10" declfile="pros/link.h" declline="234" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga31012eb93b7684dcb2c2dfd54a61d8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_transmit_raw</definition>
        <argsstring>(uint8_t port, void *data, uint16_t data_size)</argsstring>
        <name>link_transmit_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Send raw serial data through vexlink. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no room in the FIFO buffer (queue) to transmit the data. EINVAL - The data given is NULL</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully transmitted data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_transmit_raw(LINK_TRANSMITTER_PORT,<sp/>(void*)data,<sp/>sizeof(*data)<sp/>*<sp/>sizeof(data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="271" column="10" declfile="pros/link.h" declline="271" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga5bf96e13a6b61a119b593f7f87613bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_receive_raw</definition>
        <argsstring>(uint8_t port, void *dest, uint16_t data_size)</argsstring>
        <name>link_receive_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive raw serial data through vexlink. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_RECIVER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>expected<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_receive_raw(LINK_RECIVER_PORT,<sp/>(void*)result,<sp/>sizeof(*expected)<sp/>*<sp/>sizeof(expected));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="308" column="10" declfile="pros/link.h" declline="308" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga5a1917d551d4f890f2e3663597b72c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_transmit</definition>
        <argsstring>(uint8_t port, void *data, uint16_t data_size)</argsstring>
        <name>link_transmit</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Send packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no room in the FIFO buffer (queue) to transmit the data. EINVAL - The data given is NULL</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully transmitted data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_transmit(LINK_TRANSMITTER_PORT,<sp/>(void*)data,<sp/>sizeof(*data)<sp/>*<sp/>sizeof(data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="345" column="10" declfile="pros/link.h" declline="345" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1gafbe6fd56ba883a85e6190097ff932154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_receive</definition>
        <argsstring>(uint8_t port, void *dest, uint16_t data_size)</argsstring>
        <name>link_receive</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer. EBADMSG - Protocol error related to start byte, data size, or checksum.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link or protocol error, and the successfully transmitted data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_RECIVER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>expected<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_receive(LINK_RECIVER_PORT,<sp/>(void*)result,<sp/>sizeof(*expected)<sp/>*<sp/>sizeof(expected));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="383" column="10" declfile="pros/link.h" declline="383" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga63e09087ca422aa711ad3ad56934f2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_clear_receive_buf</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_clear_receive_buf</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Clear the receive buffer of the link, and discarding the data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_transmit(LINK_TRANSMITTER_PORT,<sp/>(void*)data,<sp/>sizeof(*data)<sp/>*<sp/>sizeof(data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_clear_receive_buf(LINK_TRANSMITTER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="414" column="10" declfile="pros/link.h" declline="414" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a564926c20bf903fc2b52b27a84f7bebf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::__attribute__</definition>
        <argsstring>((weak)) lcd_print(int16_t line</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(weak)</type>
        </param>
        <briefdescription>
<para>Displays a formatted string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="44" column="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga464d2c47de8b3b726b1e50c7538e4459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>competition_get_status</definition>
        <argsstring>(void)</argsstring>
        <name>competition_get_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current status of the competition control.</para>
<para><simplesect kind="return"><para>The competition control status as a mask of bits with COMPETITION_{ENABLED,AUTONOMOUS,CONNECTED}.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(competition_get_status()<sp/>&amp;<sp/>COMPETITION_CONNECTED<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="71" column="9" declfile="pros/misc.h" declline="71" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga1a381afe1cabb7c9b5dd5a734a5ee4a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_is_connected</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_is_connected</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Checks if the controller is connected. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the controller is connected, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(competition_is_connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="291" column="9" declfile="pros/misc.h" declline="291" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga1a7c4e6bcb39260bf7ce5b1a58638753" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_analog</definition>
        <argsstring>(controller_id_e_t id, controller_analog_e_t channel)</argsstring>
        <name>controller_get_analog</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="group__c-misc_1ga8bdd0963e2bc0d4fbe03435eee8a5ca5" kindref="member">controller_analog_e_t</ref></type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Gets the value of an analog channel (joystick) on a controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog channel to get. Must be one of ANALOG_LEFT_X, ANALOG_LEFT_Y, ANALOG_RIGHT_X, ANALOG_RIGHT_Y</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current reading of the analog channel: [-127, 127]. If the controller was not connected, then 0 is returned</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="323" column="9" declfile="pros/misc.h" declline="323" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga3708b3194feeb243710d0fa2079e57b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_battery_capacity</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_get_battery_capacity</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the battery capacity of the given controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The controller&apos;s battery capacity</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Capacity:<sp/>%d\n&quot;,<sp/>controller_get_battery_capacity(E_CONTROLLER_MASTER));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="347" column="9" declfile="pros/misc.h" declline="347" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga35f22987a76d5a3c9117755b0abc2548" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_battery_level</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_get_battery_level</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Gets the battery level of the given controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The controller&apos;s battery level</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Level:<sp/>%d\n&quot;,<sp/>controller_get_battery_level(E_CONTROLLER_MASTER));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="371" column="9" declfile="pros/misc.h" declline="371" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga764da856ff7fcb710b10daa1a2fe4519" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_digital</definition>
        <argsstring>(controller_id_e_t id, controller_digital_e_t button)</argsstring>
        <name>controller_get_digital</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="group__c-misc_1ga8c380ff02828ee53954bc0ce274253ed" kindref="member">controller_digital_e_t</ref></type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Checks if a digital channel (button) on the controller is currently pressed. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button on the controller is pressed. If the controller was not connected, then 0 is returned</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(controller_get_digital(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_A))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_set(1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_set(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="408" column="9" declfile="pros/misc.h" declline="408" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1gac98088451005003975c19dda4e20a1f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_get_digital_new_press</definition>
        <argsstring>(controller_id_e_t id, controller_digital_e_t button)</argsstring>
        <name>controller_get_digital_new_press</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="group__c-misc_1ga8c380ff02828ee53954bc0ce274253ed" kindref="member">controller_digital_e_t</ref></type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Returns a rising-edge case for a controller button press. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> A calls this function for buttons 1 and 2. <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.</para>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button on the controller is pressed and had not been pressed the last time this function was called, 0 otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(controller_get_digital_new_press(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_A))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Toggle<sp/>pneumatics<sp/>or<sp/>other<sp/>similar<sp/>actions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="450" column="9" declfile="pros/misc.h" declline="450" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga7bdcfd084f96b7eda87867de947997b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_print</definition>
        <argsstring>(controller_id_e_t id, uint8_t line, uint8_t col, const char *fmt,...)</argsstring>
        <name>controller_print</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Sets text to the controller LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number at which the text will be displayed [0-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number at which the text will be displayed [0-14] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string to print to the controller </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument list for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>print<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>text<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>controller_print(E_CONTROLLER_MASTER,<sp/>0,<sp/>0,<sp/>&quot;Counter:<sp/>%d&quot;,<sp/>count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="495" column="9" declfile="pros/misc.h" declline="495" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga9e301c0fb1fe773010f0f63c07f0ff30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_set_text</definition>
        <argsstring>(controller_id_e_t id, uint8_t line, uint8_t col, const char *str)</argsstring>
        <name>controller_set_text</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Sets text to the controller LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number at which the text will be displayed [0-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number at which the text will be displayed [0-14] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-formatted string to print to the controller</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>print<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>text<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>controller_set_text(E_CONTROLLER_MASTER,<sp/>0,<sp/>0,<sp/>&quot;Example<sp/>text&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="538" column="9" declfile="pros/misc.h" declline="538" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga57f585f20ca272ce035390e9a7ba8cdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_clear_line</definition>
        <argsstring>(controller_id_e_t id, uint8_t line)</argsstring>
        <name>controller_clear_line</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clears an individual line of the controller screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is currently in beta, so continuous, fast updates will not work well.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number to clear [0-2]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>controller_set_text(E_CONTROLLER_MASTER,<sp/>0,<sp/>0,<sp/>&quot;Example&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>controller_clear_line(E_CONTROLLER_MASTER,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="570" column="9" declfile="pros/misc.h" declline="570" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga9ccf53b8954bc4033abebec9a79da0c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_clear</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>controller_clear</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Clears all of the lines on the controller screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>controller_set_text(E_CONTROLLER_MASTER,<sp/>0,<sp/>0,<sp/>&quot;Example&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>controller_clear(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="601" column="9" declfile="pros/misc.h" declline="601" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga6a2fde9e8c3eec3dc88cb00235a1df7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::controller_rumble</definition>
        <argsstring>(controller_id_e_t id, const char *rumble_pattern)</argsstring>
        <name>controller_rumble</name>
        <param>
          <type><ref refid="group__c-misc_1gaf1323f00203099060d46f722b1fbd460" kindref="member">controller_id_e_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>rumble_pattern</declname>
        </param>
        <briefdescription>
<para>Rumble the controller. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> rumble activation is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given. EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rumble_pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>A string consisting of the characters &apos;.&apos;, &apos;-&apos;, and &apos; &apos;, where dots are short rumbles, dashes are long rumbles, and spaces are pauses. Maximum supported length is 8 characters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>send<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>controller_rumble(E_CONTROLLER_MASTER,<sp/>&quot;.<sp/>-<sp/>.<sp/>-&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="641" column="9" declfile="pros/misc.h" declline="641" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga9d34cbe2b17dc9daec083fdaf8c10a1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::battery_get_voltage</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current voltage of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current voltage of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery&apos;s<sp/>Voltage:<sp/>%d\n&quot;,<sp/>battery_get_voltage());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="659" column="9" declfile="pros/misc.h" declline="659" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga6cd34d4960ca5193d70626bc59094505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::battery_get_current</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current current of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current current of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Current:<sp/>%d\n&quot;,<sp/>battery_get_current());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="677" column="9" declfile="pros/misc.h" declline="677" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1ga79dd0288c3ac547c75c25e374087f91b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::battery_get_temperature</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_temperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current temperature of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current temperature of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery&apos;s<sp/>Temperature:<sp/>%d\n&quot;,<sp/>battery_get_temperature());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="695" column="8" declfile="pros/misc.h" declline="695" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1gaa5e755785c93c5cafe6b0d98695d7c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::battery_get_capacity</definition>
        <argsstring>(void)</argsstring>
        <name>battery_get_capacity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current capacity of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current capacity of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Level:<sp/>%d\n&quot;,<sp/>battery_get_capacity());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="713" column="8" declfile="pros/misc.h" declline="713" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-misc_1gafa370f223e76f68f27bdfed38724724e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::usd_is_installed</definition>
        <argsstring>(void)</argsstring>
        <name>usd_is_installed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the SD card is installed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if the SD card is installed, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;%i&quot;,<sp/>usd_is_installed());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.h" line="727" column="9" declfile="pros/misc.h" declline="727" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga2cbdf023d7dfb10606b70422fe698616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::motor_get_faults</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_faults</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the faults experienced by the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in motor_fault_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s faults.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Faults:<sp/>%d\n&quot;,<sp/>motor_get_faults(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="610" column="10" declfile="pros/motors.h" declline="610" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga29a31e20d6203737a15b77d7b2479da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::motor_get_flags</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_flags</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the flags set by the motor&apos;s operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in motor_flag_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s flags.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Flags:<sp/>%d\n&quot;,<sp/>motor_get_flags(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="675" column="10" declfile="pros/motors.h" declline="675" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gae7399c7b8bde6a7c371e5a67e85b1d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_raw_position</definition>
        <argsstring>(int8_t port, uint32_t *const timestamp)</argsstring>
        <name>motor_get_raw_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Gets the raw encoder count of the motor at a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A negative port value negates the return value</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw encoder count at the given timestamp or PROS_ERR if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Encoder<sp/>Count:<sp/>%d\n&quot;,<sp/>motor_get_raw_position(1,<sp/>&amp;now));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="709" column="9" declfile="pros/motors.h" declline="709" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga113fbf1950304b3a56705722b283c3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_position</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the absolute position of the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>A negative port value negates the return value</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s absolute position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Position:<sp/>%lf\n&quot;,<sp/>motor_get_position(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="738" column="8" declfile="pros/motors.h" declline="738" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaaaf993792ce15b7b025b8177b3af01c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_power</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_power</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the power drawn by the motor in Watts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s power draw in Watts or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Power:<sp/>%lf\n&quot;,<sp/>motor_get_power(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="766" column="8" declfile="pros/motors.h" declline="766" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga22a0f1bb6100680ea52d32f9053ec5bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_temperature</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_temperature</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the temperature of the motor in degrees Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s temperature in degrees Celsius or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Temperature:<sp/>%lf\n&quot;,<sp/>motor_get_temperature(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="793" column="8" declfile="pros/motors.h" declline="793" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaea02a297a5d59b4ca640a038e2a90edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_torque</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_torque</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the torque generated by the motor in Newton Meters (Nm). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s torque in Nm or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Torque:<sp/>%lf\n&quot;,<sp/>motor_get_torque(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="820" column="8" declfile="pros/motors.h" declline="820" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga5d1e2d0ca02dfe1b53bc577f8b9a1ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_voltage</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_voltage</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the voltage delivered to the motor in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s voltage in mV or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Voltage:<sp/>%lf\n&quot;,<sp/>motor_get_voltage(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="847" column="9" declfile="pros/motors.h" declline="847" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a4aec20e889c09650f066f4e28048c19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_zero_position</definition>
        <argsstring>(int8_t port, const double position)</argsstring>
        <name>motor_set_zero_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Sets the position for the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be the future reference point for the motor&apos;s &quot;absolute&quot; position.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The new reference position in its encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> </para>
<para><programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_zero_position(1,<sp/>80);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>80<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1040" column="9" declfile="pros/motors.h" declline="1040" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a712a9fb1e8cb15f75edcf06514ffb5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_tare_position</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_tare_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Sets the &quot;absolute&quot; zero position of the motor to its current position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_tare_position(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1077" column="9" declfile="pros/motors.h" declline="1077" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a7000cc1293b6eda984f01fa7282b38f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_brake_mode</definition>
        <argsstring>(int8_t port, const motor_brake_mode_e_t mode)</argsstring>
        <name>motor_set_brake_mode</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const motor_brake_mode_e_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Sets one of motor_brake_mode_e_t to the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The motor_brake_mode_e_t to set for the motor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_brake_mode(1,<sp/>E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Brake<sp/>Mode:<sp/>%d\n&quot;,<sp/>motor_get_brake_mode(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1103" column="9" declfile="pros/motors.h" declline="1103" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a76d822bc8a190b5dc0c7db692cd50f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_current_limit</definition>
        <argsstring>(int8_t port, const int32_t limit)</argsstring>
        <name>motor_set_current_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Sets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new current limit in mA</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_current_limit(1,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>reduce<sp/>its<sp/>output<sp/>at<sp/>1000<sp/>mA<sp/>instead<sp/>of<sp/>the<sp/>default<sp/>2500<sp/>mA</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1133" column="9" declfile="pros/motors.h" declline="1133" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa73489a83d6cc6ef0ce0c7e54f4ed452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_encoder_units</definition>
        <argsstring>(int8_t port, const motor_encoder_units_e_t units)</argsstring>
        <name>motor_set_encoder_units</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const motor_encoder_units_e_t</type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Sets one of motor_encoder_units_e_t for the motor encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>units</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_encoder_units(1,<sp/>E_MOTOR_ENCODER_DEGREES);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Encoder<sp/>Units:<sp/>%d\n&quot;,<sp/>motor_get_encoder_units(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1159" column="9" declfile="pros/motors.h" declline="1159" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a6be12015c137a6279f21199bd75913c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_gearing</definition>
        <argsstring>(int8_t port, const motor_gearset_e_t gearset)</argsstring>
        <name>motor_set_gearing</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const motor_gearset_e_t</type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Sets one of motor_gearset_e_t for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_gearing(1,<sp/>E_MOTOR_GEARSET_06);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Brake<sp/>Mode:<sp/>%d\n&quot;,<sp/>motor_get_gearing(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1185" column="9" declfile="pros/motors.h" declline="1185" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1ac264f3c731cb5a1fcf8005dfa520c088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_voltage_limit</definition>
        <argsstring>(int8_t port, const int32_t limit)</argsstring>
        <name>motor_set_voltage_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Sets the voltage limit for the motor in Volts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage limit in Volts</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_voltage_limit(1,<sp/>10000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>not<sp/>output<sp/>more<sp/>than<sp/>10<sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1215" column="9" declfile="pros/motors.h" declline="1215" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a8beaf89dc810ff17908a6bc1056e81b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>motor_brake_mode_e_t</type>
        <definition>motor_brake_mode_e_t pros::c::motor_get_brake_mode</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_brake_mode</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of motor_brake_mode_e_t, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_brake_mode(1,<sp/>E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Brake<sp/>Mode:<sp/>%d\n&quot;,<sp/>motor_get_brake_mode(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1239" column="22" declfile="pros/motors.h" declline="1239" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1afd59b63eed6e6f3e8d6a0e6bcd285302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_current_limit</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_current_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 2500 mA.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s current limit in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Limit:<sp/>%d\n&quot;,<sp/>motor_get_current_limit(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;Motor<sp/>Current<sp/>Limit:<sp/>2500&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1265" column="9" declfile="pros/motors.h" declline="1265" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1abf890e2b403938bcb0d0092b53877eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>motor_encoder_units_e_t</type>
        <definition>motor_encoder_units_e_t pros::c::motor_get_encoder_units</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_encoder_units</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the encoder units that were set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of motor_encoder_units_e_t according to what is set for the motor or E_MOTOR_ENCODER_INVALID if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1281" column="25" declfile="pros/motors.h" declline="1281" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aed931b677d95aa05e203f4f19ffa1e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>motor_gearset_e_t</type>
        <definition>motor_gearset_e_t pros::c::motor_get_gearing</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_gearing</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the gearset that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of motor_gearset_e_t according to what is set for the motor, or E_GEARSET_INVALID if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Encoder<sp/>Units:<sp/>%d\n&quot;,<sp/>motor_get_encoder_units(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>E_MOTOR_ENCODER_DEGREES<sp/>by<sp/>default</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1305" column="19" declfile="pros/motors.h" declline="1305" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a4249989376799f8c7f12b3ebccc8b494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_voltage_limit</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_voltage_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the voltage limit set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Default value is 0V, which means that there is no software limitation imposed on the voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports |1-21|. ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1 to 21, or from -21 to -1 for reversed motors</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s voltage limit in V or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Voltage<sp/>Limit:<sp/>%d\n&quot;,<sp/>motor_get_voltage_limit(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>0<sp/>by<sp/>default,<sp/>indicating<sp/>no<sp/>limit</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1332" column="9" declfile="pros/motors.h" declline="1332" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1ga4d70d505abcf5fa27a6ee4bbdf7c1bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_reset</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>rotation_reset</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Reset <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Reset the current absolute position to be the same as the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor angle.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_reset(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="76" column="9" declfile="pros/rotation.h" declline="76" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1ga31281a73c59f9dbeba897980c27ed103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_set_data_rate</definition>
        <argsstring>(uint8_t port, uint32_t rate)</argsstring>
        <name>rotation_set_data_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s refresh interval in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>The rate may be specified in increments of 5ms, and will be rounded down to the nearest increment. The minimum allowable refresh rate is 5ms. The default rate is 10ms.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>The data refresh interval in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Rotation<sp/>rotation_sensor(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>rotation_set_data_rate(ROTATION_PORT,<sp/>5);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="106" column="9" declfile="pros/rotation.h" declline="106" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1gad29fe5d6d6200ab893088998aa6ce2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_set_position</definition>
        <argsstring>(uint8_t port, uint32_t position)</argsstring>
        <name>rotation_set_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor position reading to a desired rotation value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in terms of ticks </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_set_position(ROTATION_PORT,<sp/>600);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="138" column="9" declfile="pros/rotation.h" declline="138" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1gad198d62869c39045f6f76a2ea8eee09e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_reset_position</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>rotation_reset_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Reset the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor position to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_reset_position(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="169" column="9" declfile="pros/rotation.h" declline="169" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1gaf8845e58af42bda70c803c1975ee626d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_get_position</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>rotation_get_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s current position in centidegrees. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The position value or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Position:<sp/>%d<sp/>centidegrees<sp/>\n&quot;,<sp/>rotation_get_position(ROTATION_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="196" column="9" declfile="pros/rotation.h" declline="196" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1ga67fad4961368a788999ebe244182567e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_get_velocity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>rotation_get_velocity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s current velocity in centidegrees per second. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The velocity value or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Velocity:<sp/>%d<sp/>centidegrees<sp/>per<sp/>second<sp/>\n&quot;,<sp/>rotation_get_velocity(ROTATION_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="223" column="9" declfile="pros/rotation.h" declline="223" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1ga1fcb97ffd0b4f780291b6f31be759975" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_get_angle</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>rotation_get_angle</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s current angle in centidegrees (0-36000) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The angle value (0-36000) or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Angle:<sp/>%d<sp/>centidegrees<sp/>\n&quot;,<sp/>rotation_get_angle(ROTATION_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="250" column="9" declfile="pros/rotation.h" declline="250" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1gaf9b37a6fc9d89f144c006c84f75fe890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_set_reversed</definition>
        <argsstring>(uint8_t port, bool value)</argsstring>
        <name>rotation_set_reversed</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s direction reversed flag. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines if the direction of the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor is reversed or not.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if operation succeeded or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rotation<sp/>rotation_sensor(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_set_reversed(ROTATION_PORT,<sp/>true);<sp/>//<sp/>Reverses<sp/>the<sp/>Rotation<sp/>Sensor<sp/>on<sp/>ROTATION_PORT</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="284" column="9" declfile="pros/rotation.h" declline="284" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1ga709b419d6a78d1bf52ebb069315b4dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_reverse</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>rotation_reverse</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Reverse the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s direction. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rotation<sp/>rotation_sensor(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_reverse(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="316" column="9" declfile="pros/rotation.h" declline="316" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1gab2b7c3407d06709163b14b76fa2ef6c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_init_reverse</definition>
        <argsstring>(uint8_t port, bool reverse_flag)</argsstring>
        <name>rotation_init_reverse</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse_flag</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor with a reverse flag. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse_flag</parametername>
</parameternamelist>
<parameterdescription>
<para>Determines if the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor is reversed or not.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rotation<sp/>rotation_sensor(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>reverse_flag<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_init_reverse(ROTATION_PORT,<sp/>reverse_flag);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="351" column="9" declfile="pros/rotation.h" declline="351" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rotation_1ga8cebefc88493efb298f15e6f47eb7992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::rotation_get_reversed</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>rotation_get_reversed</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s reversed flag. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Boolean value of if the <ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">Rotation</ref> Sensor&apos;s direction is reversed or not or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ROTATION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Rotation<sp/>rotation_sensor(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>E_CONTROLLER_DIGITAL_X)){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rotation_get_reversed(ROTATION_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rotation.h" line="383" column="9" declfile="pros/rotation.h" declline="383" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gaa247cd38039665b7ac4b0d0920b83c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::millis</definition>
        <argsstring>(void)</argsstring>
        <name>millis</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of milliseconds since PROS initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of milliseconds since PROS initialized</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay_until(&amp;now,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="226" column="10" declfile="pros/rtos.h" declline="226" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gaea905a8de368ac9acc9ed04c66ebb84c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t pros::c::micros</definition>
        <argsstring>(void)</argsstring>
        <name>micros</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of microseconds since PROS initialized,. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of microseconds since PROS initialized</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint64_t<sp/>now<sp/>=<sp/>micros();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay_until(&amp;now,<sp/>2000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="244" column="10" declfile="pros/rtos.h" declline="244" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gab7f6e243b717091fec2bac6405bd3d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t pros::c::task_create</definition>
        <argsstring>(task_fn_t function, void *const parameters, uint32_t prio, const uint16_t stack_depth, const char *const name)</argsstring>
        <name>task_create</name>
        <param>
          <type><ref refid="group__c-rtos_1gaece0aa29b1f1538115228d2197239f98" kindref="member">task_fn_t</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>stack_depth</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the task entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that will be used as a parameter for the task being created. This memory should not typically come from stack, but rather from dynamically (i.e., malloc&apos;d) or statically allocated memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of words (i.e. 4 * stack_depth) available on the task&apos;s stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle by which the newly created task can be referenced. If an error occurred, NULL will be returned and errno can be checked for hints as to why task_create failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="286" column="8" declfile="pros/rtos.h" declline="286" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga9f5bd026f982b738d8761c443af586da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_delete</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_delete</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Removes a task from the RTOS real time kernel&apos;s management. </para>
        </briefdescription>
        <detaileddescription>
<para>The task being deleted will be removed from all ready, blocked, suspended and event lists.</para>
<para>Memory dynamically allocated by the task is not automatically freed, and should be freed before the task is deleted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the task to be deleted. Passing NULL will cause the calling task to be deleted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>other<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delete(my_task);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="315" column="6" declfile="pros/rtos.h" declline="315" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga4954a1ed8e37fd9b758ff98bf3ecf7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_delay</definition>
        <argsstring>(const uint32_t milliseconds)</argsstring>
        <name>task_delay</name>
        <param>
          <type>const uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Delays the current task for a given number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not the best method to have a task execute code at predefined intervals, as the delay time is measured from when the delay is requested. To delay cyclically, use <ref refid="group__c-rtos_1ga151eaf730a10d101bff15013a76b9aa8" kindref="member">task_delay_until()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait (1000 milliseconds per second)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="337" column="6" declfile="pros/rtos.h" declline="337" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga6a62f5325d65f95436762552df547d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::delay</definition>
        <argsstring>(const uint32_t milliseconds)</argsstring>
        <name>delay</name>
        <param>
          <type>const uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Delays the current task for a given number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not the best method to have a task execute code at predefined intervals, as the delay time is measured from when the delay is requested. To delay cyclically, use <ref refid="group__c-rtos_1ga151eaf730a10d101bff15013a76b9aa8" kindref="member">task_delay_until()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait (1000 milliseconds per second)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="359" column="6" declfile="pros/rtos.h" declline="359" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga151eaf730a10d101bff15013a76b9aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_delay_until</definition>
        <argsstring>(uint32_t *const prev_time, const uint32_t delta)</argsstring>
        <name>task_delay_until</name>
        <param>
          <type>uint32_t *const</type>
          <declname>prev_time</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Delays the current task until a specified time. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used by periodic tasks to ensure a constant execution frequency.</para>
<para>The task will be woken up at the time *prev_time + delta, and *prev_time will be updated to reflect the time at which the task will unblock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev_time</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the location storing the setpoint time. This should typically be initialized to the return value of <ref refid="group__c-rtos_1gaa247cd38039665b7ac4b0d0920b83c80" kindref="member">millis()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of milliseconds to wait (1000 milliseconds per second)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay_until(&amp;now,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="385" column="6" declfile="pros/rtos.h" declline="385" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gab49c228af50a4677d45e4622fb5f982b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_get_priority</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_priority</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Gets the priority of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The priority of the task</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Task<sp/>Priority:<sp/>%d\n&quot;,<sp/>task_get_priority(my_task));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="409" column="10" declfile="pros/rtos.h" declline="409" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga6f4a1c359ab23c7811ed524aa8f71e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_set_priority</definition>
        <argsstring>(task_t task, uint32_t prio)</argsstring>
        <name>task_set_priority</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Sets the priority of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para>If the specified task&apos;s state is available to be scheduled (e.g. not blocked) and new priority is higher than the currently running task, a context switch may occur.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The new priority of the task</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>things</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Example<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_set_priority(my_task,<sp/>TASK_PRIORITY_DEFAULT<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="436" column="6" declfile="pros/rtos.h" declline="436" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga2e78836b08bab39de392cc6583383c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-rtos_1ga23d5ffd47ed255206f177fe9d891335b" kindref="member">task_state_e_t</ref></type>
        <definition>task_state_e_t pros::c::task_get_state</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_state</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Gets the state of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The state of the task</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Task&apos;s<sp/>State:<sp/>%d\n&quot;,<sp/>task_get_state(my_task));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="460" column="16" declfile="pros/rtos.h" declline="460" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga03b6c85287d209a26f882813f3a29eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_suspend</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_suspend</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Suspends the specified task, making it ineligible to be scheduled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to suspend</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>counter_mutex;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>counter<sp/>=<sp/>0;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_take(counter_mutex,<sp/>TIMEOUT_MAX);//<sp/>Mutexes<sp/>are<sp/>used<sp/>for<sp/>protecting<sp/>shared<sp/>resources</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>counter++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_give(counter_mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex_take(counter_mutex,<sp/>TIMEOUT_MAX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(counter<sp/>&gt;<sp/>100)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task_suspepend(task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_give(counter_mutex);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="496" column="6" declfile="pros/rtos.h" declline="496" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gaf44f1148d2f7ede99ebd023479812fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_resume</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_resume</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Resumes the specified task, making it eligible to be scheduled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to resume</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>stuff</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">task_t<sp/>task;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_resume(task);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Run<sp/>autonomous<sp/>,<sp/>then<sp/>suspend<sp/>the<sp/>task<sp/>so<sp/>it<sp/>doesn&apos;t<sp/>interfere<sp/>run</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>outside<sp/>of<sp/>autonomous<sp/>or<sp/>opcontrol</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_suspend(task);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_resume(task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Opctonrol<sp/>code<sp/>here</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_suspend(task);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="537" column="6" declfile="pros/rtos.h" declline="537" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gabb3a36bf47f6df9c981b1d585b922497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_get_count</definition>
        <argsstring>(void)</argsstring>
        <name>task_get_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>A task that has been deleted, but not yet reaped by the idle task will also be included in the count. Tasks recently created may take one context switch to be counted.</para>
<para><simplesect kind="return"><para>The number of tasks that are currently being managed by the kernel.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Number<sp/>of<sp/>Running<sp/>Tasks:<sp/>%d\n&quot;,<sp/>task_get_count());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="561" column="10" declfile="pros/rtos.h" declline="561" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga1000d8e18af587837b65ab74b79d1cc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pros::c::task_get_name</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_name</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Gets the name of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the name of the task</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Task<sp/>Name:<sp/>%d\n&quot;,<sp/>task_get_name(my_task));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="585" column="6" declfile="pros/rtos.h" declline="585" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gace3de5c48a2d91b9843ac9bd62a62d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t pros::c::task_get_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>task_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Gets a task handle from the specified name. </para>
        </briefdescription>
        <detaileddescription>
<para>The operation takes a relatively long time and should be used sparingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A task handle with a matching name, or NULL if none were found.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>other<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delete(task_get_by_name(&quot;My<sp/>Task&quot;));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="612" column="8" declfile="pros/rtos.h" declline="612" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga663301f01d0cc8ecfd238fbe1346fc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t pros::c::task_get_current</definition>
        <argsstring>()</argsstring>
        <name>task_get_current</name>
        <briefdescription>
<para>Get the currently running task handle. </para>
        </briefdescription>
        <detaileddescription>
<para>This could be useful if a task wants to tell another task about itself.</para>
<para><simplesect kind="return"><para>The currently running task handle.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>this_task<sp/>=<sp/>task_get_current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(task_get_state(this_take)<sp/>==<sp/>E_TASK_STATE_RUNNING)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;This<sp/>task<sp/>is<sp/>currently<sp/>running\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="636" column="8" declfile="pros/rtos.h" declline="636" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gaf69af2a08ca85bd16fa3d1b75dbcf790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_notify</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_notify</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Sends a simple notification to task and increments the notification counter. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to notify</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Always returns true.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(task_notify_take(true)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Code<sp/>while<sp/>waiting</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>puts(&quot;I<sp/>was<sp/>unblocked!&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Notify<sp/>me!<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>DIGITAL_L1))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task_notify(my_task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="669" column="10" declfile="pros/rtos.h" declline="669" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga9fa0dd52656774090c0005eb43ef2827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_join</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_join</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Utilizes task notifications to wait until specified task is complete and deleted, then continues to execute the program. </para>
        </briefdescription>
        <detaileddescription>
<para>Analogous to std::thread::join in C++.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The handle of the task to wait on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_print(1,<sp/>&quot;%s<sp/>running&quot;,<sp/>task_get_name(NULL));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_print(2,<sp/>&quot;End<sp/>of<sp/>%s&quot;,<sp/>task_get_name(NULL));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Example<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(0,<sp/>&quot;Running<sp/>task.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_join(my_task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(3,<sp/>&quot;Task<sp/>completed.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="701" column="6" declfile="pros/rtos.h" declline="701" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gaf21b3326026e04f277e85236f4ff503a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_notify_ext</definition>
        <argsstring>(task_t task, uint32_t value, notify_action_e_t action, uint32_t *prev_value)</argsstring>
        <name>task_notify_ext</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="group__c-rtos_1ga42ea99b5e5d38da0b98154609cf6c570" kindref="member">notify_action_e_t</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>prev_value</declname>
        </param>
        <briefdescription>
<para>Sends a notification to a task, optionally performing some action. </para>
        </briefdescription>
        <detaileddescription>
<para>Will also retrieve the value of the notification in the target task before modifying the notification value.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to notify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value used in performing the action </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to optionally perform on the receiving task&apos;s notification value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the previous value of the target task&apos;s notification, may be NULL</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dependent on the notification action. For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without needing to overwrite, 1 otherwise. For all other NOTIFY_ACTION values: always return 0</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Wait<sp/>until<sp/>we<sp/>have<sp/>been<sp/>notified<sp/>20<sp/>times<sp/>before<sp/>running<sp/>the<sp/>code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(task_notify_take(false,<sp/>TIMEOUT_MAX)<sp/>==<sp/>20)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...<sp/>Code<sp/>to<sp/>do<sp/>stuff<sp/>here<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>notification<sp/>counter</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task_notify_take(true,<sp/>TIMEOUT_MAX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>task_t<sp/>task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>DIGITAL_L1))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task_notify_ext(task,<sp/>1,<sp/>NOTIFY_ACTION_INCREMENT,<sp/>&amp;count);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="758" column="10" declfile="pros/rtos.h" declline="758" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga15f1230bbc0fe029caf775a393b4a897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_notify_take</definition>
        <argsstring>(bool clear_on_exit, uint32_t timeout)</argsstring>
        <name>task_notify_take</name>
        <param>
          <type>bool</type>
          <declname>clear_on_exit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits for a notification to be nonzero. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clear_on_exit</parametername>
</parameternamelist>
<parameterdescription>
<para>If true (1), then the notification value is cleared. If false (0), then the notification value is decremented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the amount of time to be spent waiting for a notification to occur.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value of the task&apos;s notification value before it is decremented or cleared</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(task_notify_take(true,<sp/>TIMEOUT_MAX))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>puts(&quot;I<sp/>was<sp/>unblocked!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Notify<sp/>me!<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>DIGITAL_L1))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>task_notify(my_task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="795" column="10" declfile="pros/rtos.h" declline="795" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga82a2d584952478f46b9bc766395bb8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::task_notify_clear</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_notify_clear</name>
        <param>
          <type><ref refid="group__c-rtos_1ga1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Clears the notification for a task. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para>The task to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if there was not a notification waiting, true if there was</para>
</simplesect>
<bold>Example</bold> <programlisting></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="813" column="6" declfile="pros/rtos.h" declline="813" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga92aa79cdc30ffd13f63a7ffeca64b06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
        <definition>mutex_t pros::c::mutex_create</definition>
        <argsstring>(void)</argsstring>
        <name>mutex_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><simplesect kind="return"><para>A handle to a newly created mutex. If an error occurred, NULL will be returned and errno can be checked for hints as to why mutex_create failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>MAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="836" column="9" declfile="pros/rtos.h" declline="836" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga49aa5444b488ff60fc458aea8172adc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::mutex_take</definition>
        <argsstring>(mutex_t mutex, uint32_t timeout)</argsstring>
        <name>mutex_take</name>
        <param>
          <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classpros_1_1rtos_1_1Mutex" kindref="compound">Mutex</ref> to attempt to lock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait before the mutex becomes available. A timeout of 0 can be used to poll the mutex. TIMEOUT_MAX can be used to block indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully taken, false otherwise. If false is returned, then errno is set with a hint about why the the mutex couldn&apos;t be taken.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>timeout);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="868" column="6" declfile="pros/rtos.h" declline="868" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1ga7f20ed94cee8e04d491743b4b34feda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::mutex_give</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_give</name>
        <param>
          <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlocks a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classpros_1_1rtos_1_1Mutex" kindref="compound">Mutex</ref> to unlock.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully returned, false otherwise. If false is returned, then errno is set with a hint about why the mutex couldn&apos;t be returned.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>timeout);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="895" column="6" declfile="pros/rtos.h" declline="895" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-rtos_1gaf5995c8132175bc8e76904ccd1f6e39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::mutex_delete</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_delete</name>
        <param>
          <type><ref refid="group__c-rtos_1gab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Deletes a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classpros_1_1rtos_1_1Mutex" kindref="compound">Mutex</ref> to unlock.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>MAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Delete<sp/>the<sp/>mutex</highlight></codeline>
<codeline><highlight class="normal">mutex_delete(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="917" column="6" declfile="pros/rtos.h" declline="917" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaf43a5a9cea1850757c8f0cc180604705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_is_initialized</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_is_initialized</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks whether the emulated three-button LCD has already been initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the LCD has been initialized or false if not.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">if<sp/>(pros::c::lcd_is_initialized())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(&quot;LLEMU!&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Error:<sp/>LLEMU<sp/>is<sp/>not<sp/>initialized\n&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="128" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="128" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates an emulation of the three-button, UART-based VEX LCD on the display. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the LCD was successfully initialized, or false if it has already been initialized.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pros::c::lcd_initialize())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::c::lcd_print(&quot;LLEMU!&quot;);<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Error:<sp/>LLEMU<sp/>could<sp/>not<sp/>initailize\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="150" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="150" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaa0195c987d4c988cf9c9b8f6f6d40504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Turns off the Legacy LCD Emulator. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this function will clear the entire display, and you will not be able to call any further LLEMU functions until another call to lcd_initialize.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>disabled()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_shutdown();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="174" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="174" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gadb97914cdf57d801b60962f9be046c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_print</definition>
        <argsstring>(int16_t line, const char *fmt,...)</argsstring>
        <name>lcd_print</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Displays a formatted string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(0,<sp/>&quot;My<sp/>formatted<sp/>text:<sp/>%d!&quot;,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="204" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="204" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaac6e7a4915acb7b67424a56ee38e72b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_set_text</definition>
        <argsstring>(int16_t line, const char *text)</argsstring>
        <name>lcd_set_text</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Displays a string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text to display</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_set_text(0,<sp/>&quot;My<sp/>custom<sp/>LLEMU<sp/>text!&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="232" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="232" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaccbddef45caac238401cb65a464ed306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_clear</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clears the contents of the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_clear();<sp/>//<sp/>Clear<sp/>the<sp/>LCD<sp/>screen</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="255" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="255" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga054b2c7b5c134f6e495e02e6b289416a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_clear_line</definition>
        <argsstring>(int16_t line)</argsstring>
        <name>lcd_clear_line</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clears the contents of a line of the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_clear_line(0);<sp/>//<sp/>Clear<sp/>line<sp/>0</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="281" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="281" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga15de5b08e88b129028b094a1bc96e446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn0_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn0_cb</name>
        <param>
          <type><ref refid="namespacepros_1a0f5bb2a3264a6ad95973f9c8e6b3198e" kindref="member">lcd_btn_cb_fn_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the leftmost button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the leftmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>left_callback()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(0,<sp/>&quot;Left<sp/>button<sp/>pressed<sp/>%i<sp/>times&quot;,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_register_btn0_cb();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="316" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="316" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaad5b65ea0cb13a9166b6d078839cf9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn1_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn1_cb</name>
        <param>
          <type><ref refid="namespacepros_1a0f5bb2a3264a6ad95973f9c8e6b3198e" kindref="member">lcd_btn_cb_fn_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the center button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the center button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>center_callback()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(0,<sp/>&quot;Center<sp/>button<sp/>pressed<sp/>%i<sp/>times&quot;,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_register_btn1_cb();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="351" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="351" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga6987d7b3dae61fd87cc66e63772e1595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn2_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn2_cb</name>
        <param>
          <type><ref refid="namespacepros_1a0f5bb2a3264a6ad95973f9c8e6b3198e" kindref="member">lcd_btn_cb_fn_t</ref></type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the rightmost button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the rightmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>right_callback()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>i++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(0,<sp/>&quot;Right<sp/>button<sp/>pressed<sp/>%i<sp/>times&quot;,<sp/>i);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_register_btn2_cb();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="386" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="386" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga7dd4fea9a022783060e9c69fb4d9dc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t pros::c::lcd_read_buttons</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_read_buttons</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the button status from the emulated three-button LCD. </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is a 3-bit integer where 1 0 0 indicates the left button is pressed, 0 1 0 indicates the center button is pressed, and 0 0 1 indicates the right button is pressed. 0 is returned if no buttons are currently being pressed.</para>
<para>Note that this function is provided for legacy API compatibility purposes, with the caveat that the V5 touch screen does not actually support pressing multiple points on the screen at the same time.</para>
<para><simplesect kind="return"><para>The buttons pressed as a bit mask </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="402" column="9" declfile="liblvgl/include/liblvgl/llemu.h" declline="402" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga3fae6a5bd78be5152b6827d2bf4b0657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::lcd_set_text_align</definition>
        <argsstring>(text_align_e_t alignment)</argsstring>
        <name>lcd_set_text_align</name>
        <param>
          <type>text_align_e_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Changes the alignment of text on the LCD background. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>An enum specifying the alignment. Available alignments are: TEXT_ALIGN_LEFT TEXT_ALIGN_RIGHT TEXT_ALIGN_CENTER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#include<sp/>&quot;pros/llemu.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_set_alignment(pros::c::lcd_Text_Align::LEFT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(0,<sp/>&quot;Left<sp/>Aligned<sp/>Text&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_set_alignment(pros::c::lcd_Text_Align::CENTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(1,<sp/>&quot;Center<sp/>Aligned<sp/>Text&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_set_alignment(pros::c::lcd_Text_Align::RIGHT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::c::lcd_print(2,<sp/>&quot;Right<sp/>Aligned<sp/>Text&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="liblvgl/include/liblvgl/llemu.h" line="428" column="6" declfile="liblvgl/include/liblvgl/llemu.h" declline="428" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pros/adi.h" line="142" column="11"/>
  </compounddef>
</doxygen>
