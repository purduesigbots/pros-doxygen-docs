<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1Link" kind="class" language="C++" prot="public">
    <compoundname>pros::Link</compoundname>
    <basecompoundref refid="classpros_1_1v5_1_1Device" prot="public" virt="non-virtual">Device</basecompoundref>
    <includes refid="link_8hpp" local="yes">link.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__cpp-link_1gacb44d1edc04f321075698f5c784f0112" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Link</definition>
        <argsstring>(const std::uint8_t port, const std::string link_id, link_type_e_t type, bool ov=true)</argsstring>
        <name>Link</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type>link_type_e_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ov</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Initializes a link on a radio port, with an indicated type. </para>
        </briefdescription>
        <detaileddescription>
<para>There might be a 1 to 2 second delay from when this function is called to when the link is initializes.</para>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique link ID in the form of a string, needs to be different from other links in the area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the radio link on the brain is a transmitter or receiver, with the transmitter having double the transmitting bandwidth as the receiving end (1040 bytes/s vs 520 bytes/s). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ov</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates if the radio on the given port needs vexlink to override the controller radio. Defualts to True.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if initialization fails, 1 if the initialization succeeds.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="68" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-link_1ga59fc494d53391b27e2fd75cb750690d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool connected</definition>
        <argsstring>()</argsstring>
        <name>connected</name>
        <briefdescription>
<para>Checks if a radio link on a port is active or not. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<simplesect kind="return"><para>If a radio is connected to a port and it&apos;s connected to a link.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(link.connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>do<sp/>something</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="89" column="6"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-link_1ga3e5a887fae00109fec9845322aa962c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t raw_receivable_size</definition>
        <argsstring>()</argsstring>
        <name>raw_receivable_size</name>
        <briefdescription>
<para>Returns the bytes of data number of without protocol available to be read. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio, else the bytes available to be read by the user.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Bytes<sp/>available<sp/>to<sp/>read:<sp/>%d&quot;,<sp/>link.receivable_size());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="111" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-link_1gab363648b5e3ef80b53b277aed5fa4112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t transmit_raw</definition>
        <argsstring>(void *data, std::uint16_t data_size)</argsstring>
        <name>transmit_raw</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Returns the bytes of data available in transmission buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio, else the bytes available to be transmitted by the user.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal"><sp/><sp/><sp/>void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Bytes<sp/>available<sp/>to<sp/>transmit:<sp/>%d&quot;,<sp/>link.transmittable_size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/</highlight></codeline>
<codeline><highlight class="normal">std::uint32_t<sp/>raw_transmittable_size();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">/**</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>Send<sp/>raw<sp/>serial<sp/>data<sp/>through<sp/>vexlink.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>\note<sp/>This<sp/>function<sp/>uses<sp/>the<sp/>following<sp/>values<sp/>of<sp/>errno<sp/>when<sp/>an<sp/>error<sp/>state<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>reached:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>ENXIO<sp/>-<sp/>The<sp/>given<sp/>value<sp/>is<sp/>not<sp/>within<sp/>the<sp/>range<sp/>of<sp/>V5<sp/>ports<sp/>(1-21).</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>ENODEV<sp/>-<sp/>The<sp/>port<sp/>cannot<sp/>be<sp/>configured<sp/>as<sp/>a<sp/>radio.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>ENXIO<sp/>-<sp/>The<sp/>sensor<sp/>is<sp/>still<sp/>calibrating,<sp/>or<sp/>no<sp/>link<sp/>is<sp/>connected<sp/>via<sp/>the<sp/>radio.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EBUSY<sp/>-<sp/>The<sp/>transmitter<sp/>buffer<sp/>is<sp/>still<sp/>busy<sp/>with<sp/>a<sp/>previous<sp/>transmission,<sp/>and<sp/>there<sp/>is<sp/>no</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>room<sp/>in<sp/>the<sp/>FIFO<sp/>buffer<sp/>(queue)<sp/>to<sp/>transmit<sp/>the<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>EINVAL<sp/>-<sp/>The<sp/>data<sp/>given<sp/>is<sp/>NULL</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>\param<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Buffer<sp/>with<sp/>data<sp/>to<sp/>send</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>\param<sp/>data_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Buffer<sp/>with<sp/>data<sp/>to<sp/>send</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>\return<sp/>PROS_ERR<sp/>if<sp/>port<sp/>is<sp/>not<sp/>a<sp/>link,<sp/>and<sp/>the<sp/>successfully<sp/>transmitted<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>data<sp/>size<sp/>if<sp/>it<sp/>succeeded.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>\b<sp/>Example:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>\code</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/><sp/><sp/><sp/>std::uint8_t<sp/>data[4]<sp/>=<sp/>{0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04};</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/>link.transmit_raw(data,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/></highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="164" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-link_1gab567141de181c7c1b00c32dc9655d8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t receive_raw</definition>
        <argsstring>(void *dest, std::uint16_t data_size)</argsstring>
        <name>receive_raw</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive raw serial data through vexlink. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/>data[4];</highlight></codeline>
<codeline><highlight class="normal"><sp/>link.receive_raw(data,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="194" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-link_1ga64c630547d0e9c66e515f2dd838e4341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t transmit</definition>
        <argsstring>(void *data, std::uint16_t data_size)</argsstring>
        <name>transmit</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Send packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no room in the FIFO buffer (queue) to transmit the data. EINVAL - The data given is NULL</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully transmitted data size if it succeeded.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/>data[4]<sp/>=<sp/>{0x01,<sp/>0x02,<sp/>0x03,<sp/>0x04};</highlight></codeline>
<codeline><highlight class="normal"><sp/>link.transmit(data,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="225" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-link_1gafe8e1c1ce5a8a29aee2786adf14e8b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t receive</definition>
        <argsstring>(void *dest, std::uint16_t data_size)</argsstring>
        <name>receive</name>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>std::uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer. EBADMSG - Protocol error related to start byte, data size, or checksum.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint8_t<sp/>data[4];</highlight></codeline>
<codeline><highlight class="normal"><sp/>link.receive(data,<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="256" column="15"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-link_1ga66acfc4fea58d38ae1e2fd263a55ccf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t clear_receive_buf</definition>
        <argsstring>()</argsstring>
        <name>clear_receive_buf</name>
        <briefdescription>
<para>Clear the receive buffer of the link, and discarding the data. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
</simplesect>
<simplesect kind="return"><para>PROS_ERR if port is not a link, 1 if the operation succeeded.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::Link<sp/>link(1,<sp/>&quot;my_link&quot;,<sp/>pros::E_LINK_TX);</highlight></codeline>
<codeline><highlight class="normal"><sp/>link.clear_receive_buf();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.hpp" line="277" column="15"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Link</label>
        <link refid="classpros_1_1Link"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Device</label>
        <link refid="classpros_1_1v5_1_1Device"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Link</label>
        <link refid="classpros_1_1Link"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Device</label>
        <link refid="classpros_1_1v5_1_1Device"/>
      </node>
    </collaborationgraph>
    <location file="pros/link.hpp" line="31" column="25" bodyfile="pros/link.hpp" bodystart="31" bodyend="280"/>
    <listofallmembers>
      <member refid="group__cpp-link_1ga66acfc4fea58d38ae1e2fd263a55ccf5" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>clear_receive_buf</name></member>
      <member refid="group__cpp-link_1ga59fc494d53391b27e2fd75cb750690d9" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>connected</name></member>
      <member refid="group__cpp-device_1ga8176a1cb598ccc924caa19a6d669b396" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>Device</name></member>
      <member refid="group__cpp-device_1gaeb207d6beaac509eb94a0f21137b6f35" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>get_all_devices</name></member>
      <member refid="group__cpp-device_1gad5b1efc698f196a0d4fd0f795550b703" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>get_plugged_type</name></member>
      <member refid="group__cpp-device_1ga270385bad8e84b2d327ea4551f3ea648" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>get_plugged_type</name></member>
      <member refid="group__cpp-device_1ga4c2a58a7c22b5eeca58ccb341a1c92be" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>get_port</name></member>
      <member refid="group__cpp-device_1gaaf5448d59f0bc980c4490e97964cfb42" prot="public" virt="virtual"><scope>pros::Link</scope><name>is_installed</name></member>
      <member refid="group__cpp-link_1gacb44d1edc04f321075698f5c784f0112" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>Link</name></member>
      <member refid="group__cpp-link_1ga3e5a887fae00109fec9845322aa962c6" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>raw_receivable_size</name></member>
      <member refid="group__cpp-link_1gafe8e1c1ce5a8a29aee2786adf14e8b5e" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>receive</name></member>
      <member refid="group__cpp-link_1gab567141de181c7c1b00c32dc9655d8c2" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>receive_raw</name></member>
      <member refid="group__cpp-link_1ga64c630547d0e9c66e515f2dd838e4341" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>transmit</name></member>
      <member refid="group__cpp-link_1gab363648b5e3ef80b53b277aed5fa4112" prot="public" virt="non-virtual"><scope>pros::Link</scope><name>transmit_raw</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
