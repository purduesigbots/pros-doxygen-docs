<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="user-literals" kind="page">
    <compoundname>user-literals</compoundname>
    <title>User Literals</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="user-literals_1autotoc_md74">
<title>Literals Provided By PROS</title>
<para>PROS provides the ability for users to create devices using C++&apos;s user-literals syntax:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>use<sp/>the<sp/>user<sp/>literals,<sp/>we<sp/>need<sp/>to<sp/>be<sp/>using<sp/>the<sp/>pros::literals</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace.<sp/>Make<sp/>sure<sp/>to<sp/>include<sp/>the<sp/>line<sp/>&quot;using<sp/>namespace<sp/>pros::literals&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>any<sp/>file<sp/>in<sp/>which<sp/>you<sp/>want<sp/>to<sp/>use<sp/>user<sp/>literals.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepros_1_1literals" kindref="compound">pros::literals</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">pros::Motor</ref><sp/>front_motor<sp/>=<sp/>1_mtr;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">pros::Motor</ref><sp/>back_motor<sp/>=<sp/>2_rmtr;<sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>2,<sp/>and<sp/>reverses<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Imu" kindref="compound">pros::Imu</ref><sp/><ref refid="group__cpp-device_1ggad258d4c51629346fceac4679b3209ad9a2ba0b99abec8c19b66d7d036b19999ae" kindref="member">imu</ref><sp/>=<sp/>12_imu;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>IMU<sp/>object<sp/>on<sp/>port<sp/>12</highlight></codeline>
</programlisting></para>
<para>Using these literals function no differently than constructing the objects as normal C++ objects:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">pros::Motor</ref><sp/>front_motor(1);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">pros::Motor</ref><sp/>back_motor(-2);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>motor<sp/>on<sp/>port<sp/>2,<sp/>and<sp/>reverses<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="classpros_1_1v5_1_1Imu" kindref="compound">pros::Imu</ref><sp/><ref refid="group__cpp-device_1ggad258d4c51629346fceac4679b3209ad9a2ba0b99abec8c19b66d7d036b19999ae" kindref="member">imu</ref>(12);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>IMU<sp/>object<sp/>on<sp/>port<sp/>12</highlight></codeline>
</programlisting></para>
<para>However, we felt this was a neat addition to add to the API so that users could utilize whichever method they saw fit. Every V5 device has a literal that can be used to construct the object. Thise are listed on the API page for each device class (<ref refid="api" kindref="compound">API Home</ref>).</para>
<sect2 id="user-literals_1autotoc_md75">
<title>List of PROS Literals:</title>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1v5_1_1Rotation" kindref="compound">pros::Rotation</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_rot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1v5_1_1Imu" kindref="compound">pros::Imu</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_imu(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1v5_1_1Gps" kindref="compound">pros::Gps</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">_gps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1v5_1_1Optical" kindref="compound">pros::Optical</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_opt(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>o);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1v5_1_1Distance" kindref="compound">pros::Distance</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_dist(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">pros::Motor</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_mtr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);<sp/></highlight><highlight class="comment">//<sp/>For<sp/>non-reversed<sp/>motor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">pros::Motor</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_rmtr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);<sp/></highlight><highlight class="comment">//<sp/>For<sp/>reversed<sp/>motor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpros_1_1Serial" kindref="compound">pros::Serial</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_ser(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
</programlisting> </para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
