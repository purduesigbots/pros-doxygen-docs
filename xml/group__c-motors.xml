<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__c-motors" kind="group">
    <compoundname>c-motors</compoundname>
    <title>Motors C API</title>
    <innerfile refid="motors_8h">motors.h</innerfile>
    <innerclass refid="structpros_1_1c_1_1optical__rgb__s" prot="public">pros::c::optical_rgb_s</innerclass>
    <innerclass refid="structpros_1_1c_1_1optical__raw__s" prot="public">pros::c::optical_raw_s</innerclass>
    <innerclass refid="structpros_1_1c_1_1optical__gesture__s" prot="public">pros::c::optical_gesture_s</innerclass>
    <innerclass refid="structThe" prot="public">The</innerclass>
    <innerclass refid="structThis" prot="public">This</innerclass>
      <sectiondef kind="user-defined">
      <header>Functions</header>
      <memberdef kind="function" id="group__c-llemu_1ga50e6ba3fb0f21a6df917edd3f50de276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_hue</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_hue</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color hue. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. Hue has a range of 0 to 359.999</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hue value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Hue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_hue(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="129" column="8" declfile="pros/optical.h" declline="129" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga35a880783281c7d2f7f20a52a46fa5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_saturation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_saturation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color saturation. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. Saturation has a range of 0 to 1.0</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>saturation value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Saturation<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_saturation(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="159" column="8" declfile="pros/optical.h" declline="159" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaa2221123c7b73a038c628050c5ebcb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_brightness</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_brightness</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color brightness. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. Brightness has a range of 0 to 1.0</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>brightness value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_brightness(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="189" column="8" declfile="pros/optical.h" declline="189" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga84cf2173597ccd58a1f390c6d310e710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_proximity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_proximity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected proximity value. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. proximity has a range of 0 to 255.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>poximity value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Proximity<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_proximity(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="219" column="9" declfile="pros/optical.h" declline="219" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga2028f86cc74a0e3b1f021743c03b5756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_set_led_pwm</definition>
        <argsstring>(uint8_t port, uint8_t value)</argsstring>
        <name>optical_set_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>value that ranges from 0 to 100</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_set_led_pwm(OPTICAL_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="248" column="9" declfile="pros/optical.h" declline="248" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga5b3af2f98629b5f6e569cd1c12547502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_led_pwm</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LED pwm value that ranges from 0 to 100 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;PWM<sp/>Value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_led_pwm(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="276" column="9" declfile="pros/optical.h" declline="276" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga118d9f2a59afb6ac81ba509e7f8f1b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_rgb_s_t</type>
        <definition>optical_rgb_s_t pros::c::optical_get_rgb</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_rgb</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the processed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rgb value if the operation was successful or an optical_rgb_s_t with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_rgb_s_t<sp/>RGB_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RGB_values<sp/>=<sp/>optical_get_rgb(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.brightness);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="308" column="17" declfile="pros/optical.h" declline="308" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga8455ca417578452c577dc349b29d2708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_raw_s_t</type>
        <definition>optical_raw_s_t pros::c::optical_get_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the raw, unprocessed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>raw rgb value if the operation was successful or an optical_raw_s_t with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_raw_s_t<sp/>raw_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>raw_values<sp/>=<sp/>optical_get_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Clear<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.clear);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="340" column="17" declfile="pros/optical.h" declline="340" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga1591d88e399ed3e534f3d3d8de99f02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_direction_e_t</type>
        <definition>optical_direction_e_t pros::c::optical_get_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Gestures will be cleared after 500mS</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_direction_e_t<sp/>gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gesture<sp/>=<sp/>optical_get_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Gesture<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>gesture);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="371" column="23" declfile="pros/optical.h" declline="371" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga61d526831891d514f499f73059c99ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_gesture_s_t</type>
        <definition>optical_gesture_s_t pros::c::optical_get_gesture_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent raw gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or an optical_gesture_s_t with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_gesture_s_t<sp/>raw_gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>raw_gesture<sp/>=<sp/>optical_get_gesture_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Up<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.udata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Down<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ddata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Left<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ldata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Right<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.rdata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Type:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Count:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Time:<sp/>%lu<sp/>\n&quot;,<sp/>raw_gesture.time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="406" column="21" declfile="pros/optical.h" declline="406" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga847424925f023e834607165cffa44a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_enable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_enable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Enable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_enable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="433" column="9" declfile="pros/optical.h" declline="433" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga30b26632678e49f288b5e12fd353f3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_disable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_disable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Disable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_disable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="460" column="9" declfile="pros/optical.h" declline="460" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor movement functions</header>
      <description><para>These functions allow programmers to make motors move </para>
</description>
      <memberdef kind="function" id="group__c-motors_1gac14bccd595a812fff8c30d2d050844a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move</definition>
        <argsstring>(uint8_t port, int32_t voltage)</argsstring>
        <name>motor_move</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -127 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. <ref refid="structThe" kindref="compound">The</ref> actual behavior of the motor is analogous to use of <ref refid="group__c-motors_1gaa8793ceb0f0255af915ae188d5fb04ee" kindref="member">motor_move_voltage()</ref>, or <ref refid="group__api-legacy_1ga59a0d6bd050cd259ad488e68f856ae81" kindref="member">motorSet()</ref> from the PROS 2 API.</para>
<para><simplesect kind="note"><para><ref refid="structThis" kindref="compound">This</ref> function will not respect brake modes, and simply sets the voltage to the desired value.</para>
</simplesect>
<ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="80" column="9" declfile="pros/motors.h" declline="80" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga75b0c81d3eeb120714d8a4b51c42e4cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_brake</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_brake</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Stops the motor using the currently configured brake mode. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function sets motor velocity to zero, which will cause it to act according to the set brake mode. If brake mode is set to MOTOR_BRAKE_HOLD, this function may behave differently than calling motor_move_absolute(port, 0) or motor_move_relative(port, 0).</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting filename=".language-id"><codeline><highlight class="normal">code</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="106" column="9" declfile="pros/motors.h" declline="106" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga490a367ce2fea03acaa1e817c0648916" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_absolute</definition>
        <argsstring>(uint8_t port, const double position, const int32_t velocity)</argsstring>
        <name>motor_move_absolute</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the target absolute position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> movement is relative to the position of the motor when initialized or the position when it was most recently reset with <ref refid="namespacepros_1_1c_1a6f42e8dcf4590a6fc74c84a70cd1b1b1" kindref="member">motor_set_zero_position()</ref>.</para>
<para><simplesect kind="note"><para><ref refid="structThis" kindref="compound">This</ref> function simply sets the target for the motor, it does not block program execution until the movement finishes. <ref refid="structThe" kindref="compound">The</ref> example code shows how to block until a movement is finished.</para>
</simplesect>
<ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> absolute position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>This<sp/>will<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_tare_position(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="153" column="9" declfile="pros/motors.h" declline="153" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga003028bf3f30c48559f442d7c0d74a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_relative</definition>
        <argsstring>(uint8_t port, const double position, const int32_t velocity)</argsstring>
        <name>motor_move_relative</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the relative target position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> movement is relative to the current position of the motor as given in <ref refid="group__c-motors_1gac58430bb6174017c2d9d6d73f5239bc7" kindref="member">motor_get_position()</ref>. Providing 10.0 as the position parameter would result in the motor moving clockwise 10 units, no matter what the current position is.</para>
<para><simplesect kind="note"><para><ref refid="structThis" kindref="compound">This</ref> function simply sets the target for the motor, it does not block program execution until the movement finishes. <ref refid="structThe" kindref="compound">The</ref> example code shows how to block until a movement is finished.</para>
</simplesect>
<ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> relative position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_relative(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_relative(1,<sp/>100,<sp/>100);<sp/>//<sp/>Also<sp/>moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>205)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>195)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="198" column="9" declfile="pros/motors.h" declline="198" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga2f3f7e0a243e9432b3d60e4b6147f177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_velocity</definition>
        <argsstring>(uint8_t port, const int32_t velocity)</argsstring>
        <name>motor_move_velocity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the velocity for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> velocity corresponds to different actual speeds depending on the gearset used for the motor. <ref refid="structThis" kindref="compound">This</ref> results in a range of +-100 for E_MOTOR_GEARSET_36, +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. <ref refid="structThe" kindref="compound">The</ref> velocity is held with PID to ensure consistent speed, as opposed to setting the motor&apos;s voltage.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_velocity(1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>100<sp/>RPM<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_velocity(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="232" column="9" declfile="pros/motors.h" declline="232" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaa8793ceb0f0255af915ae188d5fb04ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_voltage</definition>
        <argsstring>(uint8_t port, const int32_t voltage)</argsstring>
        <name>motor_move_voltage</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the output voltage for the motor from -12000 to 12000 in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><simplesect kind="note"><para><ref refid="structThis" kindref="compound">This</ref> function will not respect brake modes, and simply sets the voltage to the desired value.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> new voltage value from -12000 to 12000</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_voltage(1,<sp/>12000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>max<sp/>voltage<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_voltage(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="262" column="9" declfile="pros/motors.h" declline="262" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga703f1778bee3c934a8ebb3544b59c991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_modify_profiled_velocity</definition>
        <argsstring>(uint8_t port, const int32_t velocity)</argsstring>
        <name>motor_modify_profiled_velocity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Changes the output velocity for a profiled movement (motor_move_absolute or motor_move_relative). </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> will have no effect if the motor is not following a profiled movement.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_modify_profiled_velocity(1,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor<sp/>early</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="292" column="9" declfile="pros/motors.h" declline="292" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga43583f8ab98cf01f28b0be76b7195a65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_target_position</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_target_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the target position set for the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> target position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Target:<sp/>%d\n&quot;,<sp/>motor_get_target_position(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>100</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="317" column="8" declfile="pros/motors.h" declline="317" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga1eced718381a9b2dcea8c87f7c911823" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_target_velocity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_target_velocity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the velocity commanded to the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move_velocity(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Commanded<sp/>Velocity:<sp/>%d\n&quot;,<sp/>motor_get_target_velocity(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="344" column="9" declfile="pros/motors.h" declline="344" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor telemetry functions</header>
      <description><para>These functions allow programmers to collect telemetry from motors </para>
</description>
      <memberdef kind="function" id="group__c-motors_1gaf6df8e89f7178dfd0617ad19bbee64f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_actual_velocity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_actual_velocity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor_get_actual_velocity(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="377" column="8" declfile="pros/motors.h" declline="377" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga8b479dd7b771dbcc73f31586af58f0b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_current_draw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_current_draw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the current drawn by the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s current in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Draw:<sp/>%d\n&quot;,<sp/>motor_get_current_draw(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="404" column="9" declfile="pros/motors.h" declline="404" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga20534e746af9bf8840f5f9f23709b7b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_direction</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_direction</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the direction of movement for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 for moving in the positive direction, -1 for moving in the negative direction, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Direction:<sp/>%d\n&quot;,<sp/>motor_get_direction(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="431" column="9" declfile="pros/motors.h" declline="431" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga55d36864628b9b95bff9fdc7feaf2812" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_efficiency</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_efficiency</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the efficiency of the motor in percent. </para>
        </briefdescription>
        <detaileddescription>
<para>An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s efficiency in percent or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Efficiency:<sp/>%d\n&quot;,<sp/>motor_get_efficiency(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="462" column="8" declfile="pros/motors.h" declline="462" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga4b1c83c3dc32a0d982f3bf8683d5b501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_over_current</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_is_over_current</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor is drawing over its current limit. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor&apos;s current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Limit<sp/>Hit?:<sp/>%d\n&quot;,<sp/>motor_is_over_current(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="489" column="9" declfile="pros/motors.h" declline="489" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga2dd9459b8f60c62bee8736fdfbc0913e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_over_temp</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_is_over_temp</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor&apos;s temperature is above its limit. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the temperature limit is exceeded and 0 if the the temperature is below the limit, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Temp<sp/>Limit:<sp/>%d\n&quot;,<sp/>motor_is_over_temp(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="516" column="9" declfile="pros/motors.h" declline="516" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga45a429ee4463cce0c1ed82aeb64682e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_stopped</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_is_stopped</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor is stopped. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Although this function forwards data from the motor, the motor presently does not provide any value. <ref refid="structThis" kindref="compound">This</ref> function returns PROS_ERR with errno set to ENOSYS.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor is not moving, 0 if the motor is moving, or PROS_ERR if the operation failed, setting errno</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Is<sp/>the<sp/>motor<sp/>stopped?<sp/>%d\n&quot;,<sp/>motor_is_stopped(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="542" column="9" declfile="pros/motors.h" declline="542" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaebf9256842edc1b710bd01cc381b9cc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_zero_position_flag</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_zero_position_flag</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor is at its zero position. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Although this function forwards data from the motor, the motor presently does not provide any value. <ref refid="structThis" kindref="compound">This</ref> function returns PROS_ERR with errno set to ENOSYS.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor is at zero absolute position, 0 if the motor has moved from its absolute zero, or PROS_ERR if the operation failed, setting errno</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Is<sp/>the<sp/>motor<sp/>at<sp/>its<sp/>zero<sp/>position?<sp/>%d\n&quot;,<sp/>motor_get_zero_position_flag(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="569" column="9" declfile="pros/motors.h" declline="569" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__c-motors_1ga656ac13ffc5dd8f7289b47ac1a019409" prot="public" static="no" strong="no">
        <type></type>
        <name>optical_direction_e</name>
        <enumvalue id="group__c-motors_1gga656ac13ffc5dd8f7289b47ac1a019409acbe9c605984148d16737225356e8bc89" prot="public">
          <name>NO_GESTURE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-motors_1gga656ac13ffc5dd8f7289b47ac1a019409aba595d8bca8bc5e67c37c0a9d89becfa" prot="public">
          <name>UP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para><ref refid="structThe" kindref="compound">The</ref> direction indicating an upward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-motors_1gga656ac13ffc5dd8f7289b47ac1a019409a9b0b4a95b99523966e0e34ffdadac9da" prot="public">
          <name>DOWN</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para><ref refid="structThe" kindref="compound">The</ref> direction indicating a downward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-motors_1gga656ac13ffc5dd8f7289b47ac1a019409aec8379af7490bb9eaaf579cf17876f38" prot="public">
          <name>RIGHT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para><ref refid="structThe" kindref="compound">The</ref> direction indicating a rightward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-motors_1gga656ac13ffc5dd8f7289b47ac1a019409adb45120aafd37a973140edee24708065" prot="public">
          <name>LEFT</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para><ref refid="structThe" kindref="compound">The</ref> direction indicating a leftward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-motors_1gga656ac13ffc5dd8f7289b47ac1a019409a2fd6f336d08340583bd620a7f5694c90" prot="public">
          <name>ERROR</name>
          <initializer>= PROS_ERR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="51" column="33" bodyfile="pros/optical.h" bodystart="51" bodyend="60"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__c-motors_1gaa979ae75e8ec2aa5d2781fd44d0740b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::motor_get_faults</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_faults</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the faults experienced by the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in motor_fault_e_t.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s faults.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Faults:<sp/>%d\n&quot;,<sp/>motor_get_faults(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="629" column="10" declfile="pros/motors.h" declline="629" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga8f79c82be6571e653baf1ec30cea333e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::motor_get_flags</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_flags</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the flags set by the motor&apos;s operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in motor_flag_e_t.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s flags.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Flags:<sp/>%d\n&quot;,<sp/>motor_get_flags(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="686" column="10" declfile="pros/motors.h" declline="686" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gafb4370b4ecb9de65323499aa3ed86a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_raw_position</definition>
        <argsstring>(uint8_t port, uint32_t *const timestamp)</argsstring>
        <name>motor_get_raw_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Gets the raw encoder count of the motor at a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> raw encoder count at the given timestamp or PROS_ERR if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Encoder<sp/>Count:<sp/>%d\n&quot;,<sp/>motor_get_raw_position(1,<sp/>&amp;now));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="718" column="9" declfile="pros/motors.h" declline="718" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gac58430bb6174017c2d9d6d73f5239bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_position</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_position</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the absolute position of the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s absolute position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Position:<sp/>%lf\n&quot;,<sp/>motor_get_position(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="745" column="8" declfile="pros/motors.h" declline="745" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gadf348d43e1996a9f0fe34810a7106a40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_power</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_power</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the power drawn by the motor in Watts. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s power draw in Watts or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Power:<sp/>%lf\n&quot;,<sp/>motor_get_power(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="773" column="8" declfile="pros/motors.h" declline="773" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaf2dd1acfb47af29b6a39219324726f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_temperature</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_temperature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the temperature of the motor in degrees Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s temperature in degrees Celsius or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Temperature:<sp/>%lf\n&quot;,<sp/>motor_get_temperature(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="800" column="8" declfile="pros/motors.h" declline="800" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gac66a8ddb9c51d2620cccf1a60742df63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_torque</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_torque</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the torque generated by the motor in Newton Meters (Nm). </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s torque in Nm or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Torque:<sp/>%lf\n&quot;,<sp/>motor_get_torque(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="827" column="8" declfile="pros/motors.h" declline="827" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga07b5ab6ea79cb1acd1198a737a302e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_voltage</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>motor_get_voltage</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the voltage delivered to the motor in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> motor&apos;s voltage in mV or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Voltage:<sp/>%lf\n&quot;,<sp/>motor_get_voltage(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="854" column="9" declfile="pros/motors.h" declline="854" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Additional example code for this module can be found in its <ref refid="motors" kindref="compound">Tutorial</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
