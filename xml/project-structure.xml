<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="project-structure" kind="page">
    <compoundname>project-structure</compoundname>
    <title>Project Structure</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>PROS projects are internally composed of three parts: the <bold>PROS library</bold> (found in <computeroutput>/firmware</computeroutput>), the <bold>header</bold> files (found in <computeroutput>/include</computeroutput>), and <bold>user code</bold> (found in <computeroutput>/src</computeroutput>).</para>
<sect2 id="project-structure_1autotoc_md20">
<title>firmware</title>
<para>The <bold>PROS library</bold> is a single file containing the core PROS routines. This file does not need to be changed. If there appears to be an issue with a core PROS function, please file an issue on <ulink url="https://github.com/purduesigbots/pros/issues">GitHub</ulink>.</para>
</sect2>
<sect2 id="project-structure_1autotoc_md21">
<title>include</title>
<para>The <bold>header</bold> files are all found in the <computeroutput>include</computeroutput> directory. One header file, <ulink url="../../api/index.html">api.h</ulink>, is required to declare the PROS library functions. This file exists merely to include the individual PROS API headers, all of which can be found in <computeroutput>include/pros</computeroutput>. Each header file in this directory covers a specific aspect of interacting with the V5 hardware, and correlates to the files found in the <ulink url="../../api/index.html">API documentation</ulink>.</para>
<para>The other file, <computeroutput><ref refid="main_8h" kindref="compound">main.h</ref></computeroutput>, is intended for declaring functions and variables shared between the user code files. <computeroutput><ref refid="main_8h" kindref="compound">main.h</ref></computeroutput> also offers a variety of configurable options for tailoring PROS to your needs.</para>
<para><itemizedlist>
<listitem><para><computeroutput>PROS_USE_SIMPLE_NAMES</computeroutput>: If defined, some commonly used enums will have preprocessor macros which give a shorter, more convenient naming pattern. For instance, E_CONTROLLER_MASTER has a shorter name: <computeroutput>CONTROLLER_MASTER</computeroutput>. <computeroutput>E_CONTROLLER_MASTER</computeroutput> is pedantically correct within the PROS styleguide, but not convenient for most student programmers.</para>
</listitem><listitem><para><computeroutput>using namespace pros</computeroutput>: This can be uncommented to be added with the use of <computeroutput>PROS_USE_SIMPLE_NAMES</computeroutput>. This reduces the length of declarations when using C++, allowing you to simply declare a <computeroutput>Motor</computeroutput> instead of a <computeroutput><ref refid="classpros_1_1Motor" kindref="compound">pros::Motor</ref></computeroutput>. This will make the code appear cleaner and will be simpler for newer programmers, but is typically considered <ulink url="https://msdn.microsoft.com/en-us/library/5cb46ksf.aspx">bad practice</ulink>. As a result, this line is commented out by default.</para>
</listitem></itemizedlist>
</para>
<para>New header files can be created in the include directory, as long as the name ends with <computeroutput>.h</computeroutput> (Traditionally for C files) or <computeroutput>.hpp</computeroutput> (for C++ files). See this <ulink url="http://www.learncpp.com/cpp-tutorial/19-header-files/">C++ tutorial</ulink> for more information on how to create header files.</para>
</sect2>
<sect2 id="project-structure_1autotoc_md22">
<title>src</title>
<para><bold>User code</bold> has the actual sequential instructions that govern the robot&apos;s behavior. Prior to PROS kernel 3.2.0, new projects by default split user code into autonomous (<computeroutput>autonomous.c</computeroutput> or <computeroutput>autonomous.cpp</computeroutput>), driver control (<computeroutput>opcontrol.c</computeroutput> or <computeroutput>opcontrol.cpp</computeroutput>), and initialization (<computeroutput>initialize.c</computeroutput> or <computeroutput>initialize.cpp</computeroutput>) files. Code in one file can talk to code in another file using declarations in the header files. Beginning with PROS kernel 3.2.0, new projects by default have a single <computeroutput>main.cpp</computeroutput> file that contains all of the competition task functions.</para>
<para>New user code files can be created in the <computeroutput>src</computeroutput> directory, as long as the name ends with <computeroutput>.c</computeroutput> or <computeroutput>.cpp</computeroutput> it will be compiled with the others.</para>
<para>All user code files should start with: <verbatim>#include &quot;main.h&quot;
</verbatim></para>
<para>This will ensure that the PROS API and other critical definitions are available in each file.</para>
<para>While more complicated than some environments, splitting up code grants powerful modularity and code reusability, especially when combined with source control. </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
