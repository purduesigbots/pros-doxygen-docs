<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__c-optical" kind="group">
    <compoundname>c-optical</compoundname>
    <title>VEX Optical Sensor C API</title>
    <innerfile refid="optical_8h">optical.h</innerfile>
    <innerclass refid="structpros_1_1c_1_1optical__rgb__s" prot="public">pros::c::optical_rgb_s</innerclass>
    <innerclass refid="structpros_1_1c_1_1optical__raw__s" prot="public">pros::c::optical_raw_s</innerclass>
    <innerclass refid="structpros_1_1c_1_1optical__gesture__s" prot="public">pros::c::optical_gesture_s</innerclass>
    <innerclass refid="structoptical__rgb__s__t" prot="public">optical_rgb_s_t</innerclass>
    <innerclass refid="structoptical__raw__s__t" prot="public">optical_raw_s_t</innerclass>
    <innerclass refid="structoptical__gesture__s__t" prot="public">optical_gesture_s_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Functions</header>
      <memberdef kind="function" id="group__c-llemu_1ga50e6ba3fb0f21a6df917edd3f50de276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_hue</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_hue</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color hue. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Hue has a range of 0 to 359.999</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hue value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Hue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_hue(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="132" column="8" declfile="pros/optical.h" declline="132" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga35a880783281c7d2f7f20a52a46fa5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_saturation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_saturation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color saturation. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Saturation has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>saturation value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Saturation<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_saturation(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="162" column="8" declfile="pros/optical.h" declline="162" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaa2221123c7b73a038c628050c5ebcb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_brightness</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_brightness</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color brightness. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Brightness has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>brightness value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_brightness(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="192" column="8" declfile="pros/optical.h" declline="192" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga84cf2173597ccd58a1f390c6d310e710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_proximity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_proximity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected proximity value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. proximity has a range of 0 to 255.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>poximity value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Proximity<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_proximity(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="222" column="9" declfile="pros/optical.h" declline="222" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga2028f86cc74a0e3b1f021743c03b5756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_set_led_pwm</definition>
        <argsstring>(uint8_t port, uint8_t value)</argsstring>
        <name>optical_set_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>value that ranges from 0 to 100</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_set_led_pwm(OPTICAL_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="251" column="9" declfile="pros/optical.h" declline="251" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga5b3af2f98629b5f6e569cd1c12547502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_led_pwm</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LED pwm value that ranges from 0 to 100 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;PWM<sp/>Value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_led_pwm(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="279" column="9" declfile="pros/optical.h" declline="279" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga118d9f2a59afb6ac81ba509e7f8f1b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__rgb__s__t" kindref="compound">optical_rgb_s_t</ref></type>
        <definition>optical_rgb_s_t pros::c::optical_get_rgb</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_rgb</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the processed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rgb value if the operation was successful or an <ref refid="structoptical__rgb__s__t" kindref="compound">optical_rgb_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_rgb_s_t<sp/>RGB_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RGB_values<sp/>=<sp/>optical_get_rgb(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.brightness);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="311" column="17" declfile="pros/optical.h" declline="311" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga8455ca417578452c577dc349b29d2708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__raw__s__t" kindref="compound">optical_raw_s_t</ref></type>
        <definition>optical_raw_s_t pros::c::optical_get_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the raw, unprocessed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>raw rgb value if the operation was successful or an <ref refid="structoptical__raw__s__t" kindref="compound">optical_raw_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_raw_s_t<sp/>raw_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>raw_values<sp/>=<sp/>optical_get_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Clear<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.clear);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="343" column="17" declfile="pros/optical.h" declline="343" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga1591d88e399ed3e534f3d3d8de99f02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_direction_e_t</type>
        <definition>optical_direction_e_t pros::c::optical_get_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Gestures will be cleared after 500mS</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_direction_e_t<sp/>gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gesture<sp/>=<sp/>optical_get_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Gesture<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>gesture);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="374" column="23" declfile="pros/optical.h" declline="374" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga61d526831891d514f499f73059c99ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__gesture__s__t" kindref="compound">optical_gesture_s_t</ref></type>
        <definition>optical_gesture_s_t pros::c::optical_get_gesture_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent raw gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or an <ref refid="structoptical__gesture__s__t" kindref="compound">optical_gesture_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_gesture_s_t<sp/>raw_gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>raw_gesture<sp/>=<sp/>optical_get_gesture_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Up<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.udata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Down<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ddata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Left<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ldata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Right<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.rdata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Type:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Count:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Time:<sp/>%lu<sp/>\n&quot;,<sp/>raw_gesture.time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="409" column="21" declfile="pros/optical.h" declline="409" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga847424925f023e834607165cffa44a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_enable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_enable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Enable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_enable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="436" column="9" declfile="pros/optical.h" declline="436" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga30b26632678e49f288b5e12fd353f3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_disable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_disable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Disable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_disable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="463" column="9" declfile="pros/optical.h" declline="463" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__c-optical_1ga656ac13ffc5dd8f7289b47ac1a019409" prot="public" static="no" strong="no">
        <type></type>
        <name>optical_direction_e</name>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409acbe9c605984148d16737225356e8bc89" prot="public">
          <name>NO_GESTURE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409aba595d8bca8bc5e67c37c0a9d89becfa" prot="public">
          <name>UP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The direction indicating an upward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409a9b0b4a95b99523966e0e34ffdadac9da" prot="public">
          <name>DOWN</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>The direction indicating a downward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409aec8379af7490bb9eaaf579cf17876f38" prot="public">
          <name>RIGHT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The direction indicating a rightward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409adb45120aafd37a973140edee24708065" prot="public">
          <name>LEFT</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>The direction indicating a leftward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409a2fd6f336d08340583bd620a7f5694c90" prot="public">
          <name>ERROR</name>
          <initializer>= PROS_ERR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="51" column="33" bodyfile="pros/optical.h" bodystart="51" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
