<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__c-optical" kind="group">
    <compoundname>c-optical</compoundname>
    <title>VEX Optical Sensor C API</title>
    <innerfile refid="optical_8h">optical.h</innerfile>
    <innerclass refid="structpros_1_1c_1_1optical__rgb__s" prot="public">pros::c::optical_rgb_s</innerclass>
    <innerclass refid="structpros_1_1c_1_1optical__raw__s" prot="public">pros::c::optical_raw_s</innerclass>
    <innerclass refid="structpros_1_1c_1_1optical__gesture__s" prot="public">pros::c::optical_gesture_s</innerclass>
    <innerclass refid="structoptical__rgb__s__t" prot="public">optical_rgb_s_t</innerclass>
    <innerclass refid="structoptical__raw__s__t" prot="public">optical_raw_s_t</innerclass>
    <innerclass refid="structoptical__gesture__s__t" prot="public">optical_gesture_s_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Functions</header>
      <memberdef kind="function" id="group__c-optical_1ga50e6ba3fb0f21a6df917edd3f50de276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_hue</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_hue</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color hue. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Hue has a range of 0 to 359.999</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hue value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Hue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_hue(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="133" column="8" declfile="pros/optical.h" declline="133" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga35a880783281c7d2f7f20a52a46fa5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_saturation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_saturation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color saturation. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Saturation has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>saturation value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Saturation<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_saturation(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="163" column="8" declfile="pros/optical.h" declline="163" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gaa2221123c7b73a038c628050c5ebcb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_brightness</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_brightness</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color brightness. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. Brightness has a range of 0 to 1.0</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>brightness value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_brightness(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="193" column="8" declfile="pros/optical.h" declline="193" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga84cf2173597ccd58a1f390c6d310e710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_proximity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_proximity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected proximity value. </para>
        </briefdescription>
        <detaileddescription>
<para>This is not available if gestures are being detected. proximity has a range of 0 to 255.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>poximity value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Proximity<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_proximity(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="223" column="9" declfile="pros/optical.h" declline="223" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga2028f86cc74a0e3b1f021743c03b5756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_set_led_pwm</definition>
        <argsstring>(uint8_t port, uint8_t value)</argsstring>
        <name>optical_set_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>value that ranges from 0 to 100</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_set_led_pwm(OPTICAL_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="252" column="9" declfile="pros/optical.h" declline="252" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga5b3af2f98629b5f6e569cd1c12547502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_led_pwm</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LED pwm value that ranges from 0 to 100 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;PWM<sp/>Value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_led_pwm(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="280" column="9" declfile="pros/optical.h" declline="280" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga118d9f2a59afb6ac81ba509e7f8f1b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__rgb__s__t" kindref="compound">optical_rgb_s_t</ref></type>
        <definition>optical_rgb_s_t pros::c::optical_get_rgb</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_rgb</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the processed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rgb value if the operation was successful or an <ref refid="structoptical__rgb__s__t" kindref="compound">optical_rgb_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_rgb_s_t<sp/>RGB_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RGB_values<sp/>=<sp/>optical_get_rgb(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.brightness);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="312" column="17" declfile="pros/optical.h" declline="312" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga8455ca417578452c577dc349b29d2708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__raw__s__t" kindref="compound">optical_raw_s_t</ref></type>
        <definition>optical_raw_s_t pros::c::optical_get_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the raw, unprocessed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>raw rgb value if the operation was successful or an <ref refid="structoptical__raw__s__t" kindref="compound">optical_raw_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_raw_s_t<sp/>raw_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>raw_values<sp/>=<sp/>optical_get_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Clear<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.clear);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="344" column="17" declfile="pros/optical.h" declline="344" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga1591d88e399ed3e534f3d3d8de99f02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_direction_e_t</type>
        <definition>optical_direction_e_t pros::c::optical_get_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Gestures will be cleared after 500mS</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_direction_e_t<sp/>gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gesture<sp/>=<sp/>optical_get_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Gesture<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>gesture);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="375" column="23" declfile="pros/optical.h" declline="375" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga61d526831891d514f499f73059c99ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structoptical__gesture__s__t" kindref="compound">optical_gesture_s_t</ref></type>
        <definition>optical_gesture_s_t pros::c::optical_get_gesture_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent raw gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or an <ref refid="structoptical__gesture__s__t" kindref="compound">optical_gesture_s_t</ref> with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_gesture_s_t<sp/>raw_gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>raw_gesture<sp/>=<sp/>optical_get_gesture_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Up<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.udata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Down<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ddata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Left<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ldata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Right<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.rdata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Type:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Count:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Time:<sp/>%lu<sp/>\n&quot;,<sp/>raw_gesture.time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="410" column="21" declfile="pros/optical.h" declline="410" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga847424925f023e834607165cffa44a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_enable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_enable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Enable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_enable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="437" column="9" declfile="pros/optical.h" declline="437" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga30b26632678e49f288b5e12fd353f3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_disable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_disable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Disable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 <ref refid="classpros_1_1v5_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_disable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="464" column="9" declfile="pros/optical.h" declline="464" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gad824e5dc94e77e8d6e7a62e59a97e560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_clear_led</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_clear_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_clear_led(VISION_PORT);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="177" column="9" declfile="pros/vision.h" declline="177" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga9a4161d557e410fff34c4f158aa229d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t pros::c::vision_signature_from_utility</definition>
        <argsstring>(const int32_t id, const int32_t u_min, const int32_t u_max, const int32_t u_mean, const int32_t v_min, const int32_t v_max, const int32_t v_mean, const float range, const int32_t type)</argsstring>
        <name>vision_signature_from_utility</name>
        <param>
          <type>const int32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_mean</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_mean</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a signature from the vision sensor utility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> that can be set using vision_set_signature</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/>values<sp/>acquired<sp/>from<sp/>the<sp/>vision<sp/>utility</highlight></codeline>
<codeline><highlight class="normal">vision_signature_s_t<sp/>RED_SIG<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_from_utility(EXAMPLE_SIG,<sp/>8973,<sp/>11143,<sp/>10058,<sp/>-2119,<sp/>-1053,<sp/>-1586,<sp/>5.4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">vision_set_signature(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>&amp;RED_SIG);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object<sp/>of<sp/>the<sp/>EXAMPLE_SIG<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="223" column="22" declfile="pros/vision.h" declline="223" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga33a33d487f771f21d08c3159e6763418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vision_color_code_t</type>
        <definition>vision_color_code_t pros::c::vision_create_color_code</definition>
        <argsstring>(uint8_t port, const uint32_t sig_id1, const uint32_t sig_id2, const uint32_t sig_id3, const uint32_t sig_id4, const uint32_t sig_id5)</argsstring>
        <name>vision_create_color_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id1</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id2</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id3</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id4</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id5</declname>
        </param>
        <briefdescription>
<para>Creates a color code that represents a combination of the given signature IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>If fewer than 5 signatures are to be a part of the color code, pass 0 for the additional function parameters.</para>
<para>This function uses the following values of errno when an error state is reached: EINVAL - Fewer than two signatures have been provided or one of the signatures is out of its [1-7] range (or 0 when omitted).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id4</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id5</parametername>
</parameternamelist>
<parameterdescription>
<para>The fifth signature id [1-7] to add to the color code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_color_code_t object containing the color code information.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="263" column="21" declfile="pros/vision.h" declline="263" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gad0b47d5910ba2a6e5d52629f2b93c3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::c::vision_get_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id)</argsstring>
        <name>vision_get_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EHOSTDOWN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given size id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_size(VISION_PORT,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="299" column="19" declfile="pros/vision.h" declline="299" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gae53aedc2122f3b4c53d5874fde408a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::c::vision_get_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id)</argsstring>
        <name>vision_get_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given signature according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - sig_id is outside the range [1-8] EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID [1-7] for which an object will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given signature and size_id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object<sp/>of<sp/>the<sp/>EXAMPLE_SIG<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="339" column="19" declfile="pros/vision.h" declline="339" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gaaf91323dda2e39bd1ef885f7a0c32b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::c::vision_get_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code)</argsstring>
        <name>vision_get_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const vision_color_code_t</type>
          <declname>color_code</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given color code according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which an object will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> object corresponding to the given color code and size_id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_code(VISION_PORT,<sp/>0,<sp/>code1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="378" column="19" declfile="pros/vision.h" declline="378" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga6c463892ea46d1cfd4fb7d7e237a4db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_exposure</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the exposure parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current exposure setting from [0,150], PROS_ERR if an error occurred</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_exposure(VISION_PORT)<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_exposure(VISION_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="406" column="9" declfile="pros/vision.h" declline="406" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga5d6c54c6754717e256a6d59976976e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_object_count</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_object_count</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the number of objects currently detected by the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of objects detected on the specified vision sensor. Returns PROS_ERR if the port was invalid or an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Number<sp/>of<sp/>Objects<sp/>Detected:<sp/>%d\n&quot;,<sp/>vision_get_object_count(VISION_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="434" column="9" declfile="pros/vision.h" declline="434" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga698db4dbf0a04384a19d1a7496612d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_white_balance</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the white balance parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current RGB white balance setting of the sensor</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>VISION_WHITE<sp/>0xff</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_white_balance(VISION_PORT)<sp/>!=<sp/>VISION_WHITE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_white_balance(VISION_PORT,<sp/>VISION_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="460" column="9" declfile="pros/vision.h" declline="460" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga2f2007dafb30e5aafeb21d9acba05826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_print_signature</definition>
        <argsstring>(const vision_signature_s_t sig)</argsstring>
        <name>vision_print_signature</name>
        <param>
          <type>const <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Prints the contents of the signature as an initializer list to the terminal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature for which the contents will be printed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_print_signature(sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="481" column="9" declfile="pros/vision.h" declline="481" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga4ec230e74ab6348768a5156c9e5c5a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_size(VISION_PORT,<sp/>0,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>signature<sp/>of<sp/>the<sp/>largest<sp/>object<sp/>found</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="525" column="9" declfile="pros/vision.h" declline="525" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga0f38715b935eae0421d59e5102d98155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID [1-7] for which objects will be returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="573" column="9" declfile="pros/vision.h" declline="573" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga0363eec188a23e6d41e98449a323a091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const vision_color_code_t</type>
          <declname>color_code</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which objects will be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_code(VISION_PORT,<sp/>0,<sp/>code1,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>signature<sp/>of<sp/>the<sp/>largest<sp/>object<sp/>found</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="622" column="9" declfile="pros/vision.h" declline="622" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga42e645bdac1e2eb230fd55205f37dd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t pros::c::vision_get_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id)</argsstring>
        <name>vision_get_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <briefdescription>
<para>Gets the object detection signature with the given id number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> containing information about the signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_print_signature(sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="646" column="22" declfile="pros/vision.h" declline="646" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga7812fb755e22f147e11ae29911149242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id, vision_signature_s_t *const signature_ptr)</argsstring>
        <name>vision_set_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <param>
          <type><ref refid="structvision__signature__s__t" kindref="compound">vision_signature_s_t</ref> *const</type>
          <declname>signature_ptr</declname>
        </param>
        <briefdescription>
<para>Stores the supplied object detection signature onto the vision sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This saves the signature in volatile memory, and the signature will be lost as soon as the sensor is powered down.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to store into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signature_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the signature to save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sig.range<sp/>=<sp/>10.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_signature(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>&amp;sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="675" column="9" declfile="pros/vision.h" declline="675" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga146e2f14c5a77f1a20fc64762910112c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_auto_white_balance</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_auto_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables/disables auto white-balancing on the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor EINVAL - enable was not 0 or 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass 0 to disable, 1 to enable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_auto_white_balance(VISION_PORT,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="703" column="9" declfile="pros/vision.h" declline="703" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga133b8ef84216367d5df385c2eb869ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_exposure</definition>
        <argsstring>(uint8_t port, const uint8_t exposure)</argsstring>
        <name>vision_set_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
<para>Sets the exposure parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The new exposure setting from [0,150]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_exposure(VISION_PORT)<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_exposure(VISION_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="733" column="9" declfile="pros/vision.h" declline="733" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga9a01d95432c9dcd138c11ff718b0b264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_led</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the vision sensor LED color, overriding the automatic behavior. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>An RGB code to set the LED to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_led(VISION_PORT,<sp/>COLOR_BLANCHED_ALMOND);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="760" column="9" declfile="pros/vision.h" declline="760" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1gac3be7d132e62ab6b2bd20f564e9a5c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_white_balance</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the white balance parameter of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>The new RGB white balance setting of the sensor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>VISION_WHITE<sp/>0xff</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_white_balance(VISION_PORT,<sp/>VISION_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="788" column="9" declfile="pros/vision.h" declline="788" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga00226eaa06fb4907a90ac188ec16a6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_zero_point</definition>
        <argsstring>(uint8_t port, vision_zero_e_t zero_point)</argsstring>
        <name>vision_set_zero_point</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>vision_zero_e_t</type>
          <declname>zero_point</declname>
        </param>
        <briefdescription>
<para>Sets the (0,0) coordinate for the Field of View. </para>
        </briefdescription>
        <detaileddescription>
<para>This will affect the coordinates returned for each request for a <ref refid="structvision__object__s__t" kindref="compound">vision_object_s_t</ref> from the sensor, so it is recommended that this function only be used to configure the sensor at the beginning of its use.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_zero_point(VISION_PORT,<sp/>E_VISION_ZERO_CENTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="819" column="9" declfile="pros/vision.h" declline="819" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-optical_1ga86efa93d00dc9646f726eea073068117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_wifi_mode</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_wifi_mode</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Sets the Wi-Fi mode of the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions uses the following values of errno when an error state is reached: ENXIO - The given port is not within the range of V5 ports (1-21) EACCESS - Anothe resources is currently trying to access the port</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Disable Wi-Fi on the <ref refid="classpros_1_1v5_1_1Vision" kindref="compound">Vision</ref> sensor if 0, enable otherwise (e.g. 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_wifi_mode(VISION_PORT,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="846" column="9" declfile="pros/vision.h" declline="846" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__c-optical_1ga656ac13ffc5dd8f7289b47ac1a019409" prot="public" static="no" strong="no">
        <type></type>
        <name>optical_direction_e</name>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409acbe9c605984148d16737225356e8bc89" prot="public">
          <name>NO_GESTURE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409aba595d8bca8bc5e67c37c0a9d89becfa" prot="public">
          <name>UP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The direction indicating an upward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409a9b0b4a95b99523966e0e34ffdadac9da" prot="public">
          <name>DOWN</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>The direction indicating a downward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409aec8379af7490bb9eaaf579cf17876f38" prot="public">
          <name>RIGHT</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The direction indicating a rightward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409adb45120aafd37a973140edee24708065" prot="public">
          <name>LEFT</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>The direction indicating a leftward gesture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-optical_1gga656ac13ffc5dd8f7289b47ac1a019409a2fd6f336d08340583bd620a7f5694c90" prot="public">
          <name>ERROR</name>
          <initializer>= PROS_ERR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="51" column="33" bodyfile="pros/optical.h" bodystart="51" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
