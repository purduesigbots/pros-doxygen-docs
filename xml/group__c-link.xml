<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__c-link" kind="group">
    <compoundname>c-link</compoundname>
    <title>VEX Link C API</title>
    <innerfile refid="link_8h">link.h</innerfile>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__c-link_1gaeb9b97127da30edb91cc281b28f5e8df" prot="public" static="no" strong="no">
        <type></type>
        <name>link_type_e</name>
        <enumvalue id="group__c-link_1ggaeb9b97127da30edb91cc281b28f5e8dfaab8163ecac2542f247939dae82071628" prot="public">
          <name>E_LINK_RECIEVER</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Indicating that the radio is a reciever. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-link_1ggaeb9b97127da30edb91cc281b28f5e8dfa959bf4f7005bdf46615e47d59b1b551e" prot="public">
          <name>E_LINK_TRANSMITTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-link_1ggaeb9b97127da30edb91cc281b28f5e8dfabb07f278cb352fd102c4da036ea4a6e2" prot="public">
          <name>E_LINK_RX</name>
          <initializer>= E_LINK_RECIEVER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-link_1ggaeb9b97127da30edb91cc281b28f5e8dfab0ef9c35843cf88823e252745aaac1bd" prot="public">
          <name>E_LINK_TX</name>
          <initializer>= E_LINK_TRANSMITTER</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="45" column="25" bodyfile="pros/link.h" bodystart="45" bodyend="51"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__c-link_1ga4277232ad855f067803c1fcba9885b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_init</definition>
        <argsstring>(uint8_t port, const char *link_id, link_type_e_t type)</argsstring>
        <name>link_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type>link_type_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initializes a link on a radio port, with an indicated type. </para>
        </briefdescription>
        <detaileddescription>
<para>There might be a 1 to 2 second delay from when this function is called to when the link is initializes. PROS currently only supports the use of one radio per brain.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique link ID in the form of a string, needs to be different from other links in the area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the radio link on the brain is a transmitter or reciever, with the transmitter having double the transmitting bandwidth as the recieving end (1040 bytes/s vs 520 bytes/s).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if initialization fails, 1 if the initialization succeeds.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>LINK_ID<sp/>&quot;ROBOT1&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>link_init(LINK_TRANSMITTER_PORT,<sp/>LINK_ID,<sp/>E_LINK_TRANSMITTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="106" column="10" declfile="pros/link.h" declline="106" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga63e9104523a080995babfd88712bc756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_init_override</definition>
        <argsstring>(uint8_t port, const char *link_id, link_type_e_t type)</argsstring>
        <name>link_init_override</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type>link_type_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initializes a link on a radio port, with an indicated type and the ability for vexlink to override the controller radio. </para>
        </briefdescription>
        <detaileddescription>
<para>There might be a 1 to 2 second delay from when this function is called to when the link is initializes. PROS currently only supports the use of one radio per brain.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique link ID in the form of a string, needs to be different from other links in the area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the radio link on the brain is a transmitter or reciever, with the transmitter having double the transmitting bandwidth as the recieving end (1040 bytes/s vs 520 bytes/s).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if initialization fails, 1 if the initialization succeeds.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>LINK_ID<sp/>&quot;ROBOT1&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>link_init(LINK_PORT,<sp/>LINK_ID,<sp/>E_LINK_TRANSMITTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>link_init_override(LINK_PORT,<sp/>LINK_ID,<sp/>E_LINK_TRANSMITTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="143" column="10" declfile="pros/link.h" declline="143" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga89910cd189b97e358568b117cbedbf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::link_connected</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_connected</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if a radio link on a port is active or not. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If a radio is connected to a port and it&apos;s connected to a link.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(link_connected(LINK_TRANSMITTER_PORT))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Link<sp/>connected!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="173" column="6" declfile="pros/link.h" declline="173" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga176c20419748c6e2b08467c585461376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_raw_receivable_size</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_raw_receivable_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the bytes of data available to be read. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio, else the bytes available to be read by the user.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_RECIVER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>receiveable_size<sp/>=<sp/>link_raw_receivable_size(LINK_RECIVER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;link_raw_receiveable_size:<sp/>%d&quot;,<sp/>receiveable_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="203" column="10" declfile="pros/link.h" declline="203" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1gab4e3a75704ace5aaddc1de05d10b644a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_raw_transmittable_size</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_raw_transmittable_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the bytes of data available in transmission buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio,</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>transmittable_size<sp/>=<sp/>link_raw_transmittable_size(LINK_TRANSMITTER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;link_raw_transmittable_size:<sp/>%d&quot;,<sp/>transmittable_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="232" column="10" declfile="pros/link.h" declline="232" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga31012eb93b7684dcb2c2dfd54a61d8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_transmit_raw</definition>
        <argsstring>(uint8_t port, void *data, uint16_t data_size)</argsstring>
        <name>link_transmit_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Send raw serial data through vexlink. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no room in the FIFO buffer (queue) to transmit the data. EINVAL - The data given is NULL</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully transmitted data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_transmit_raw(LINK_TRANSMITTER_PORT,<sp/>(void*)data,<sp/>sizeof(*data)<sp/>*<sp/>sizeof(data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="269" column="10" declfile="pros/link.h" declline="269" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga5bf96e13a6b61a119b593f7f87613bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_receive_raw</definition>
        <argsstring>(uint8_t port, void *dest, uint16_t data_size)</argsstring>
        <name>link_receive_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive raw serial data through vexlink. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_RECIVER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>expected<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_receive_raw(LINK_RECIVER_PORT,<sp/>(void*)result,<sp/>sizeof(*expected)<sp/>*<sp/>sizeof(expected));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="306" column="10" declfile="pros/link.h" declline="306" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga5a1917d551d4f890f2e3663597b72c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_transmit</definition>
        <argsstring>(uint8_t port, void *data, uint16_t data_size)</argsstring>
        <name>link_transmit</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Send packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no room in the FIFO buffer (queue) to transmit the data. EINVAL - The data given is NULL</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully transmitted data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_transmit(LINK_TRANSMITTER_PORT,<sp/>(void*)data,<sp/>sizeof(*data)<sp/>*<sp/>sizeof(data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="343" column="10" declfile="pros/link.h" declline="343" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1gafbe6fd56ba883a85e6190097ff932154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_receive</definition>
        <argsstring>(uint8_t port, void *dest, uint16_t data_size)</argsstring>
        <name>link_receive</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer. EBADMSG - Protocol error related to start byte, data size, or checksum.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link or protocol error, and the successfully transmitted data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_RECIVER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>result;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>expected<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_receive(LINK_RECIVER_PORT,<sp/>(void*)result,<sp/>sizeof(*expected)<sp/>*<sp/>sizeof(expected));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="381" column="10" declfile="pros/link.h" declline="381" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-link_1ga63e09087ca422aa711ad3ad56934f2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_clear_receive_buf</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_clear_receive_buf</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Clear the receive buffer of the link, and discarding the data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>LINK_TRANSMITTER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char*<sp/>data<sp/>=<sp/>&quot;Hello!&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_transmit(LINK_TRANSMITTER_PORT,<sp/>(void*)data,<sp/>sizeof(*data)<sp/>*<sp/>sizeof(data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>link_clear_receive_buf(LINK_TRANSMITTER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="412" column="10" declfile="pros/link.h" declline="412" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__c-link_1ga74f7a80d93eb19b82627a0565ae77f6d" prot="public" static="no">
        <name>LINK_BUFFER_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="67" column="9" bodyfile="pros/link.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
