<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-gps" kind="group">
    <compoundname>cpp-gps</compoundname>
    <title>VEX GPS Sensor C API</title>
    <innerfile refid="gps_8hpp">gps.hpp</innerfile>
    <innerclass refid="classpros_1_1v5_1_1Gps" prot="public">pros::v5::Gps</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-gps_1ga261f51bd4a7feb468a24a087f490b02e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 <bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1);</highlight></codeline>
</programlisting> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="62" column="10" bodyfile="pros/gps.hpp" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa82632237daee7623ac933916d1c7407" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xInitial, double yInitial, double headingInitial)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X initial position (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y initial position (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial heading (degrees)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1,<sp/>1.30,<sp/>1.20,<sp/>90);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="88" column="10" bodyfile="pros/gps.hpp" bodystart="88" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga29c04631f27c1286f94a65325f41a644" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xOffset, double yOffset)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1,<sp/>1.30,<sp/>1.20);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="114" column="10" bodyfile="pros/gps.hpp" bodystart="114" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga47b6f08a37c3eb91a2b4bf89b22c346e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xInitial, double yInitial, double headingInitial, double xOffset, double yOffset)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial Heading, with 0 being North, 90 being East, 180 being South, and 270 being West (degrees) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1,<sp/>1.30,<sp/>1.20,<sp/>180,<sp/>1.30,<sp/>1.20);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="146" column="10" bodyfile="pros/gps.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga781bfdd4f6f3c9a606a0e2a305d36d34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t initialize_full</definition>
        <argsstring>(double xInitial, double yInitial, double headingInitial, double xOffset, double yOffset) const</argsstring>
        <name>initialize_full</name>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters, as well as its initial position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT,<sp/>1.1,<sp/>1.2,<sp/>180,<sp/>.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>this<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>above<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.initialize_full(1.1,<sp/>1.2,<sp/>180,<sp/>.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="188" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga48b81f1d12b0201c77ef1d78c546e0b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_offset</definition>
        <argsstring>(double xOffset, double yOffset) const</argsstring>
        <name>set_offset</name>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT,<sp/>1.1,<sp/>1.2,<sp/>180,<sp/>.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>this<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>above<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.set_offset(.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="221" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga295d0f023a48eff1fae4a648d137a726" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga8220d838b58329126b90c8cb16c2e6d1" kindref="member">pros::gps_position_s_t</ref></type>
        <definition>virtual pros::gps_position_s_t get_offset</definition>
        <argsstring>() const</argsstring>
        <name>get_offset</name>
        <briefdescription>
<para>Get the GPS&apos;s cartesian location relative to the center of turning/origin in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct (<ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref>) containing the X and Y values if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_position_s_t<sp/>pos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>gps.get_offset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;X<sp/>Offset:<sp/>%4d,<sp/>Y<sp/>Offset:<sp/>%4d&quot;,<sp/>pos.x,<sp/>pos.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="252" column="32"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga3cc7f6e7185a2a59d545e0eefea126aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_position</definition>
        <argsstring>(double xInitial, double yInitial, double headingInitial) const</argsstring>
        <name>set_position</name>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <briefdescription>
<para>Sets the robot&apos;s location relative to the center of the field in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.set_position(1.3,<sp/>1.4,<sp/>180);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Heading:<sp/>%f\n&quot;,<sp/>gps.get_position().x,<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gps.get_position().y,<sp/>gps.get_position().heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="287" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gafb4e63f82dffc58b0fb0569f73250ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_data_rate</definition>
        <argsstring>(std::uint32_t rate) const</argsstring>
        <name>set_data_rate</name>
        <param>
          <type>std::uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the GPS sensor&apos;s data rate in milliseconds, only applies to IMU on GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Data rate in milliseconds (Minimum: 5 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.set_data_rate(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Heading:<sp/>%f\n&quot;,<sp/>gps.get_position().x,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gps.get_position().y,<sp/>gps.get_position().heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="318" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa0d4205475b9b1837a7a96bf81b895ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_error</definition>
        <argsstring>() const</argsstring>
        <name>get_error</name>
        <briefdescription>
<para>Get the possible RMS (Root Mean Squared) error in meters for GPS position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>Possible RMS (Root Mean Squared) error in meters for GPS position. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>double<sp/>error<sp/>=<sp/>gps.get_error();</highlight></codeline>
<codeline><highlight class="normal"><sp/>printf(&quot;Error:<sp/>%f\n&quot;,<sp/>error);</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="344" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gae2b3d0997875c3075acb4d9570d5e974" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga0bebcb6a5be6dc96c165711cbe710aea" kindref="member">pros::gps_status_s_t</ref></type>
        <definition>virtual pros::gps_status_s_t get_status</definition>
        <argsstring>() const</argsstring>
        <name>get_status</name>
        <briefdescription>
<para>Gets the position and roll, yaw, and pitch of the GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>A struct (<ref refid="structgps__status__s__t" kindref="compound">gps_status_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps_status_s_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>gps.get_status();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Heading:<sp/>%f,<sp/>Roll:<sp/>%f,<sp/>Pitch:<sp/>%f,<sp/>Yaw:<sp/>%f\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.x,<sp/>status.y,<sp/>status.heading,<sp/>status.roll,<sp/>status.pitch,<sp/>status.yaw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="376" column="30"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga659b057a308e7f9a7c940dc9681da354" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga8220d838b58329126b90c8cb16c2e6d1" kindref="member">pros::gps_position_s_t</ref></type>
        <definition>virtual pros::gps_position_s_t get_position</definition>
        <argsstring>() const</argsstring>
        <name>get_position</name>
        <briefdescription>
<para>Gets the x and y position on the field of the GPS in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>A struct (<ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps_position_s_t<sp/>position;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>position<sp/>=<sp/>gps.get_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Heading:<sp/>%f\n&quot;,<sp/>position.x,<sp/>position.y,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>position.heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="407" column="32"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga16a339b5f7729298dc79cf4971565043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_heading</definition>
        <argsstring>() const</argsstring>
        <name>get_heading</name>
        <briefdescription>
<para>Get the heading in [0,360) degree values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The heading in [0,360) degree values. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>heading<sp/>=<sp/>gps.get_heading();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%f\n&quot;,<sp/>heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="436" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga7bd68d228dc3cbf251083b50284fa2f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_heading_raw</definition>
        <argsstring>() const</argsstring>
        <name>get_heading_raw</name>
        <briefdescription>
<para>Get the heading in the max double value and min double value scale. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The heading in [DOUBLE_MIN, DOUBLE_MAX] values. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>heading<sp/>=<sp/>gps.get_heading_raw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%f\n&quot;,<sp/>heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="464" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga60630447c3ada8da63dd91e092eeb2fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_rotation</definition>
        <argsstring>() const</argsstring>
        <name>get_rotation</name>
        <briefdescription>
<para>Gets the GPS sensor&apos;s elapsed rotation value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The elased heading in degrees. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>rotation<sp/>=<sp/>gps.get_rotation();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Rotation:<sp/>%f\n&quot;,<sp/>rotation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="492" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gadea479bb033bc10c5864a32ed8d7fe0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_rotation</definition>
        <argsstring>(double target) const</argsstring>
        <name>set_rotation</name>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Set the GPS sensor&apos;s rotation value to target value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target rotation value to set rotation value to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>double<sp/>rotation<sp/>=<sp/>gps.set_rotation(90);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Rotation:<sp/>%f\n&quot;,<sp/>rotation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="522" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa0267b91c2766fc53e5d8d382b1e3ba2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_rotation</definition>
        <argsstring>() const</argsstring>
        <name>tare_rotation</name>
        <briefdescription>
<para>Tare the GPS sensor&apos;s rotation value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.tare_rotation();</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Should<sp/>be<sp/>around<sp/>0<sp/>on<sp/>first<sp/>call<sp/>since<sp/>it<sp/>was<sp/>tared.<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Rotation:<sp/>%f\n&quot;,<sp/>rotation);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="551" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gac4a33a837a2dd1fad50006b0d4c3e100" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga67a9badd3682634a75ad506fd87f7903" kindref="member">pros::gps_gyro_s_t</ref></type>
        <definition>virtual pros::gps_gyro_s_t get_gyro_rate</definition>
        <argsstring>() const</argsstring>
        <name>get_gyro_rate</name>
        <briefdescription>
<para>Get the GPS&apos;s raw gyroscope values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::gps_gyro_s_t<sp/>gyro<sp/>=<sp/>gps.get_gyro_rate();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Gyro:<sp/>%f,<sp/>%f,<sp/>%f\n&quot;,<sp/>gyro.x,<sp/>gyro.y,<sp/>gyro.z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="579" column="28"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga400de3b554f4077e05aae5cd06f2e3bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga207fc83ba7d708bb8fe13855938469ef" kindref="member">pros::gps_accel_s_t</ref></type>
        <definition>virtual pros::gps_accel_s_t get_accel</definition>
        <argsstring>() const</argsstring>
        <name>get_accel</name>
        <briefdescription>
<para>Get the GPS&apos;s raw accelerometer values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS&apos;s port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="595" column="29"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="">
      <memberdef kind="friend" id="group__cpp-gps_1gaf0de0a0195a05974cece8c81f713741b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const pros::Gps &amp;gps)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classpros_1_1v5_1_1Gps" kindref="compound">pros::Gps</ref> &amp;</type>
          <declname>gps</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format: <ref refid="classpros_1_1v5_1_1Gps" kindref="compound">Gps</ref> [port: gps._port, x: (x position), y: (y position), heading: (gps heading), rotation: (gps rotation)]</para>
<para><bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>gps<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="616" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>For a pros-specific usage guide on the GPS, please check out our article here. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
