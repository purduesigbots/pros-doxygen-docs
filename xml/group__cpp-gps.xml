<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-gps" kind="group">
    <compoundname>cpp-gps</compoundname>
    <title>VEX GPS Sensor C API</title>
    <innerfile refid="gps_8hpp">gps.hpp</innerfile>
    <innerclass refid="classpros_1_1v5_1_1Gps" prot="public">pros::v5::Gps</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-gps_1ga261f51bd4a7feb468a24a087f490b02e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 <bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1);</highlight></codeline>
</programlisting> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="61" column="1" bodyfile="pros/gps.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga2cfb581b6e57cfad570482298a34b213" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const Device &amp;device)</argsstring>
        <name>Gps</name>
        <param>
          <type>const Device &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="63" column="1" bodyfile="pros/gps.hpp" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa82632237daee7623ac933916d1c7407" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xInitial, double yInitial, double headingInitial)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X initial position (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y initial position (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial heading (degrees)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1,<sp/>1.30,<sp/>1.20,<sp/>90);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="89" column="10" bodyfile="pros/gps.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga29c04631f27c1286f94a65325f41a644" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xOffset, double yOffset)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1,<sp/>1.30,<sp/>1.20);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="116" column="10" bodyfile="pros/gps.hpp" bodystart="116" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga47b6f08a37c3eb91a2b4bf89b22c346e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>Gps</definition>
        <argsstring>(const std::uint8_t port, double xInitial, double yInitial, double headingInitial, double xOffset, double yOffset)</argsstring>
        <name>Gps</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Creates a GPS object for the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial Heading, with 0 being North, 90 being East, 180 being South, and 270 being West (degrees) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example:</bold> <programlisting><codeline><highlight class="normal">pros::Gps<sp/>gps(1,<sp/>1.30,<sp/>1.20,<sp/>180,<sp/>1.30,<sp/>1.20);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="148" column="10" bodyfile="pros/gps.hpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga781bfdd4f6f3c9a606a0e2a305d36d34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t initialize_full</definition>
        <argsstring>(double xInitial, double yInitial, double headingInitial, double xOffset, double yOffset) const</argsstring>
        <name>initialize_full</name>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters, as well as its initial position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT,<sp/>1.1,<sp/>1.2,<sp/>180,<sp/>.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>this<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>above<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.initialize_full(1.1,<sp/>1.2,<sp/>180,<sp/>.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="191" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga48b81f1d12b0201c77ef1d78c546e0b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_offset</definition>
        <argsstring>(double xOffset, double yOffset) const</argsstring>
        <name>set_offset</name>
        <param>
          <type>double</type>
          <declname>xOffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yOffset</declname>
        </param>
        <briefdescription>
<para>Set the GPS&apos;s offset relative to the center of turning in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant X offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>Cartesian 4-Quadrant Y offset from center of turning (meters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT,<sp/>1.1,<sp/>1.2,<sp/>180,<sp/>.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/>//<sp/>this<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>above<sp/>line</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.set_offset(.4,<sp/>.4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="224" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga09ae0d60372fc6df52a73bb509dcd374" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; Gps &gt;</type>
        <definition>static std::vector&lt;Gps&gt; get_all_devices</definition>
        <argsstring>()</argsstring>
        <name>get_all_devices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="226" column="20"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga295d0f023a48eff1fae4a648d137a726" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga8220d838b58329126b90c8cb16c2e6d1" kindref="member">pros::gps_position_s_t</ref></type>
        <definition>virtual pros::gps_position_s_t get_offset</definition>
        <argsstring>() const</argsstring>
        <name>get_offset</name>
        <briefdescription>
<para>Get the GPS&apos;s cartesian location relative to the center of turning/origin in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 GPS port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A struct (<ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref>) containing the X and Y values if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>gps_position_s_t<sp/>pos;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>=<sp/>gps.get_offset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;X<sp/>Offset:<sp/>%4d,<sp/>Y<sp/>Offset:<sp/>%4d&quot;,<sp/>pos.x,<sp/>pos.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="257" column="32"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga3cc7f6e7185a2a59d545e0eefea126aa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_position</definition>
        <argsstring>(double xInitial, double yInitial, double headingInitial) const</argsstring>
        <name>set_position</name>
        <param>
          <type>double</type>
          <declname>xInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yInitial</declname>
        </param>
        <param>
          <type>double</type>
          <declname>headingInitial</declname>
        </param>
        <briefdescription>
<para>Sets the robot&apos;s location relative to the center of the field in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant X Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial 4-Quadrant Y Position, with (0,0) being at the center of the field (meters) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>headingInitial</parametername>
</parameternamelist>
<parameterdescription>
<para>Heading with 0 being north on the field, in degrees [0,360) going clockwise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.set_position(1.3,<sp/>1.4,<sp/>180);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Heading:<sp/>%f\n&quot;,<sp/>gps.get_position().x,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gps.get_position().y,<sp/>gps.get_position().heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="292" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gafb4e63f82dffc58b0fb0569f73250ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_data_rate</definition>
        <argsstring>(std::uint32_t rate) const</argsstring>
        <name>set_data_rate</name>
        <param>
          <type>std::uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the GPS sensor&apos;s data rate in milliseconds, only applies to IMU on GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>Data rate in milliseconds (Minimum: 5 ms) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps.set_data_rate(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Heading:<sp/>%f\n&quot;,<sp/>gps.get_position().x,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gps.get_position().y,<sp/>gps.get_position().heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="323" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa0d4205475b9b1837a7a96bf81b895ba" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_error</definition>
        <argsstring>() const</argsstring>
        <name>get_error</name>
        <briefdescription>
<para>Get the possible RMS (Root Mean Squared) error in meters for GPS position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>Possible RMS (Root Mean Squared) error in meters for GPS position. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>double<sp/>error<sp/>=<sp/>gps.get_error();</highlight></codeline>
<codeline><highlight class="normal"><sp/>printf(&quot;Error:<sp/>%f\n&quot;,<sp/>error);</highlight></codeline>
<codeline><highlight class="normal"><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="349" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga9d9a19a222b40d311f7a5285967a3e6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga0bebcb6a5be6dc96c165711cbe710aea" kindref="member">pros::gps_status_s_t</ref></type>
        <definition>virtual pros::gps_status_s_t get_position_and_orientation</definition>
        <argsstring>() const</argsstring>
        <name>get_position_and_orientation</name>
        <briefdescription>
<para>Gets the position and roll, yaw, and pitch of the GPS. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>A struct (<ref refid="structgps__status__s__t" kindref="compound">gps_status_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps_status_s_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>gps.get_position_and_orientation();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f,<sp/>Roll:<sp/>%f,<sp/>Pitch:<sp/>%f,<sp/>Yaw:<sp/>%f\n&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status.x,<sp/>status.y,<sp/>status.roll,<sp/>status.pitch,<sp/>status.yaw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="381" column="30"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga659b057a308e7f9a7c940dc9681da354" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga8220d838b58329126b90c8cb16c2e6d1" kindref="member">pros::gps_position_s_t</ref></type>
        <definition>virtual pros::gps_position_s_t get_position</definition>
        <argsstring>() const</argsstring>
        <name>get_position</name>
        <briefdescription>
<para>Gets the x and y position on the field of the GPS in meters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>A struct (<ref refid="structgps__position__s__t" kindref="compound">gps_position_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps_position_s_t<sp/>position;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>position<sp/>=<sp/>gps.get_position();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f,<sp/>Y:<sp/>%f\n&quot;,<sp/>position.x,<sp/>position.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="411" column="32"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga4766d3b068160266998585735127267e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_position_x</definition>
        <argsstring>() const</argsstring>
        <name>get_position_x</name>
        <briefdescription>
<para>Gets the X position in meters of the robot relative to the starting position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The X position in meters. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>pos_x<sp/>=<sp/>gps.get_position_x();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;X:<sp/>%f\n&quot;,<sp/>pos_x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="439" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gae34b23fd86156611ac61c8abb155673d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_position_y</definition>
        <argsstring>() const</argsstring>
        <name>get_position_y</name>
        <briefdescription>
<para>Gets the Y position in meters of the robot relative to the starting position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The Y position in meters. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>pos_y<sp/>=<sp/>gps.get_position_y();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Y:<sp/>%f\n&quot;,<sp/>pos_y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="467" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga16548d0bfb2743172bdc8ddae960e015" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1gadbefe72d8ab68c247a9a89e8cdf6b3f0" kindref="member">pros::gps_orientation_s_t</ref></type>
        <definition>virtual pros::gps_orientation_s_t get_orientation</definition>
        <argsstring>() const</argsstring>
        <name>get_orientation</name>
        <briefdescription>
<para>Gets the pitch, roll, and yaw of the GPS relative to the starting orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>A struct (<ref refid="structgps__orientation__s__t" kindref="compound">gps_orientation_s_t</ref>) containing values mentioned above. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>gps_orientation_s_t<sp/>orientation;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>orientation<sp/>=<sp/>gps.get_orientation();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;pitch:<sp/>%f,<sp/>roll:<sp/>%f,<sp/>yaw:<sp/>%f\n&quot;,<sp/>orientation.pitch,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>orientation.roll,<sp/>orientation.yaw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="498" column="35"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga74b63ffbb1f1a31e6f1bb740b8c4f823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_pitch</definition>
        <argsstring>() const</argsstring>
        <name>get_pitch</name>
        <briefdescription>
<para>Gets the pitch of the robot in degrees relative to the starting oreintation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The pitch in [0,360) degree values. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>pitch<sp/>=<sp/>gps.get_pitch();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;pitch:<sp/>%f\n&quot;,<sp/>pitch);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="526" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga25b06e3629127c64370d43454b04696f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_roll</definition>
        <argsstring>() const</argsstring>
        <name>get_roll</name>
        <briefdescription>
<para>Gets the roll of the robot in degrees relative to the starting oreintation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The roll in [0,360) degree values. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>roll<sp/>=<sp/>gps.get_roll();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;roll:<sp/>%f\n&quot;,<sp/>roll);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="554" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga757ff3f4ff5e6646db7a158bdc951dc2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_yaw</definition>
        <argsstring>() const</argsstring>
        <name>get_yaw</name>
        <briefdescription>
<para>Gets the yaw of the robot in degrees relative to the starting oreintation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The yaw in [0,360) degree values. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>yaw<sp/>=<sp/>gps.get_yaw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;yaw:<sp/>%f\n&quot;,<sp/>yaw);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="582" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga16a339b5f7729298dc79cf4971565043" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_heading</definition>
        <argsstring>() const</argsstring>
        <name>get_heading</name>
        <briefdescription>
<para>Get the heading in [0,360) degree values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The heading in [0,360) degree values. If the operation failed, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>heading<sp/>=<sp/>gps.get_heading();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%f\n&quot;,<sp/>heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="611" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga7bd68d228dc3cbf251083b50284fa2f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_heading_raw</definition>
        <argsstring>() const</argsstring>
        <name>get_heading_raw</name>
        <briefdescription>
<para>Get the heading in the max double value and min double value scale. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The heading in [DOUBLE_MIN, DOUBLE_MAX] values. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>heading<sp/>=<sp/>gps.get_heading_raw();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%f\n&quot;,<sp/>heading);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="639" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gac4a33a837a2dd1fad50006b0d4c3e100" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga67a9badd3682634a75ad506fd87f7903" kindref="member">pros::gps_gyro_s_t</ref></type>
        <definition>virtual pros::gps_gyro_s_t get_gyro_rate</definition>
        <argsstring>() const</argsstring>
        <name>get_gyro_rate</name>
        <briefdescription>
<para>Get the GPS&apos;s raw gyroscope value in z-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw gyroscope value in z-axis. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gyro_z<sp/>=<sp/>gps.get_gyro_z();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;gyro_z:<sp/>%f\n&quot;,<sp/>gyro_z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="667" column="28"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga058ae9789e41d2af5b1ad75e5cedfaff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_gyro_rate_x</definition>
        <argsstring>() const</argsstring>
        <name>get_gyro_rate_x</name>
        <briefdescription>
<para>Get the GPS&apos;s raw gyroscope value in x-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw gyroscope value in x-axis. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>gyro_x<sp/>=<sp/>gps.get_gyro_x();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;gyro_x:<sp/>%f\n&quot;,<sp/>gyro_x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="695" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga9eec5f167adc20ee3c50dbf89e48f6c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_gyro_rate_y</definition>
        <argsstring>() const</argsstring>
        <name>get_gyro_rate_y</name>
        <briefdescription>
<para>Get the GPS&apos;s raw gyroscope value in y-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw gyroscope value in y-axis. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>gyro_y<sp/>=<sp/>gps.get_gyro_y();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;gyro_y:<sp/>%f\n&quot;,<sp/>gyro_y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="723" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaa193599b92dd286766bdb2d33fe25897" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_gyro_rate_z</definition>
        <argsstring>() const</argsstring>
        <name>get_gyro_rate_z</name>
        <briefdescription>
<para>Get the GPS&apos;s raw gyroscope value in z-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw gyroscope value in z-axis. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>double<sp/>gyro_z<sp/>=<sp/>gps.get_gyro_z();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;gyro_z:<sp/>%f\n&quot;,<sp/>gyro_z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="751" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga400de3b554f4077e05aae5cd06f2e3bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="group__c-gps_1ga207fc83ba7d708bb8fe13855938469ef" kindref="member">pros::gps_accel_s_t</ref></type>
        <definition>virtual pros::gps_accel_s_t get_accel</definition>
        <argsstring>() const</argsstring>
        <name>get_accel</name>
        <briefdescription>
<para>Get the GPS&apos;s raw accelerometer values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="765" column="29"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga3b093c96a355d6c7ae360e18f7fe80ac" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_accel_x</definition>
        <argsstring>() const</argsstring>
        <name>get_accel_x</name>
        <briefdescription>
<para>Get the GPS&apos;s raw accelerometer value in x-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw accelerometer value in x-axis. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>accel_x<sp/>=<sp/>gps.get_accel_x();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;accel_x:<sp/>%f\n&quot;,<sp/>accel_x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="793" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1gaf8274aacc773993f3aab269e9a5aa8b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_accel_y</definition>
        <argsstring>() const</argsstring>
        <name>get_accel_y</name>
        <briefdescription>
<para>Get the GPS&apos;s raw accelerometer value in y-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw accelerometer value in y-axis. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>accel_y<sp/>=<sp/>gps.get_accel_y();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;accel_y:<sp/>%f\n&quot;,<sp/>accel_y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="821" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga73538a4dc5d78eb7266410e67d818252" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double get_accel_z</definition>
        <argsstring>() const</argsstring>
        <name>get_accel_z</name>
        <briefdescription>
<para>Get the GPS&apos;s raw accelerometer value in z-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an GPS EAGAIN - The sensor is still calibrating</para>
<para><simplesect kind="return"><para>The raw accelerometer value in z-axis. If the operation fails, returns PROS_ERR_F and errno is set.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>double<sp/>accel_z<sp/>=<sp/>gps.get_accel_z();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;accel_z:<sp/>%f\n&quot;,<sp/>accel_z);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="849" column="16"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-gps_1ga3cd00e25f707498d3974a58fe1ec02f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Gps</type>
        <definition>static Gps get_gps</definition>
        <argsstring>()</argsstring>
        <name>get_gps</name>
        <briefdescription>
<para>Gets a gps sensor that is plugged in to the brain. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The first time this function is called it returns the gps sensor at the lowest port If this function is called multiple times, it will cycle through all the ports. For example, if you have 1 gps sensor on the robot this function will always return a gps sensor object for that port. If you have 2 gps sensors, all the odd numered calls to this function will return objects for the lower port number, all the even number calls will return gps objects for the higher port number</para>
</simplesect>
This functions uses the following values of errno when an error state is reached: ENODEV - No gps sensor is plugged into the brain</para>
<para><simplesect kind="return"><para>A gps object corresponding to a port that a gps sensor is connected to the brain If no gps sensor is plugged in, it returns a gps sensor on port PROS_ERR_BYTE </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="892" column="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="">
      <memberdef kind="friend" id="group__cpp-gps_1gaf0de0a0195a05974cece8c81f713741b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const pros::Gps &amp;gps)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classpros_1_1v5_1_1Gps" kindref="compound">pros::Gps</ref> &amp;</type>
          <declname>gps</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format: <ref refid="classpros_1_1v5_1_1Gps" kindref="compound">Gps</ref> [port: gps._port, x: (x position), y: (y position), heading: (gps heading), rotation: (gps rotation)]</para>
<para><bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GPS_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Gps<sp/>gps(GPS_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>gps<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/gps.hpp" line="870" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>For a pros-specific usage guide on the GPS, please check out our article here. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
