<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1Vision" kind="class" language="C++" prot="public">
    <compoundname>pros::Vision</compoundname>
    <includes refid="vision_8hpp" local="yes">vision.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpros_1_1Vision_1a1e1f1e031f1bb30c0e9865ff647ec000" prot="private" static="no" mutable="no">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::Vision::_port</definition>
        <argsstring></argsstring>
        <name>_port</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="442" column="14" bodyfile="pros/include/pros/vision.hpp" bodystart="442" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1Vision_1a46cdaf74713f630b5bb5f4d0d3259dcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pros::Vision::Vision</definition>
        <argsstring>(std::uint8_t port, vision_zero_e_t zero_point=E_VISION_ZERO_TOPLEFT)</argsstring>
        <name>Vision</name>
        <param>
          <type>std::uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1abac8bfe6003650c52be72f914bb203d0" kindref="member">vision_zero_e_t</ref></type>
          <declname>zero_point</declname>
          <defval><ref refid="vision_8h_1aef7c8269b3fb0dfbf4e597b2d8dd7af5a0ff244c5f3e9771f962986e25b00ff3d" kindref="member">E_VISION_ZERO_TOPLEFT</ref></defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor object on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a00f02cfb09ca224c2a7735be918e941d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::clear_led</definition>
        <argsstring>(void) const</argsstring>
        <name>clear_led</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="56" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1ab50bcfb700b591e2f1654962baac400f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1a71f2011a47e95558bb534b05c16c7f2b" kindref="member">vision_color_code_t</ref></type>
        <definition>vision_color_code_t pros::Vision::create_color_code</definition>
        <argsstring>(const std::uint32_t sig_id1, const std::uint32_t sig_id2, const std::uint32_t sig_id3=0, const std::uint32_t sig_id4=0, const std::uint32_t sig_id5=0) const</argsstring>
        <name>create_color_code</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id1</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id2</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id3</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id4</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id5</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Creates a color code that represents a combination of the given signature IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - Fewer than two signatures have been provided or one of the signatures is out of its [1-7] range (or 0 when omitted).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig_id1</parametername>
</parameternamelist>
<parameterdescription>
<para>The first signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id2</parametername>
</parameternamelist>
<parameterdescription>
<para>The second signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id3</parametername>
</parameternamelist>
<parameterdescription>
<para>The third signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id4</parametername>
</parameternamelist>
<parameterdescription>
<para>The fourth signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id5</parametername>
</parameternamelist>
<parameterdescription>
<para>The fifth signature id [1-7] to add to the color code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_color_code_t object containing the color code information. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="110" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1aa5cca450a5b80278a97bbea786195733" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::Vision::get_by_size</definition>
        <argsstring>(const std::uint32_t size_id) const</argsstring>
        <name>get_by_size</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vision_object_s_t object corresponding to the given size id, or PROS_ERR if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="130" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a10fd89ed3c5e8fe5ce25046a877c7d84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::Vision::get_by_sig</definition>
        <argsstring>(const std::uint32_t size_id, const std::uint32_t sig_id) const</argsstring>
        <name>get_by_sig</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given signature according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EINVAL - sig_id is outside the range [1-8] EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_signature_s_t signature for which an object will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vision_object_s_t object corresponding to the given signature and size_id, or PROS_ERR if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="152" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a4b96f92a2ae2f29fd37709958f48e514" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref></type>
        <definition>vision_object_s_t pros::Vision::get_by_code</definition>
        <argsstring>(const std::uint32_t size_id, const vision_color_code_t color_code) const</argsstring>
        <name>get_by_code</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const <ref refid="vision_8h_1a71f2011a47e95558bb534b05c16c7f2b" kindref="member">vision_color_code_t</ref></type>
          <declname>color_code</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given color code according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which an object will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vision_object_s_t object corresponding to the given color code and size_id, or PROS_ERR if an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="171" column="19"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a80552b2897b8edcdb68bc56477213f2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::get_exposure</definition>
        <argsstring>(void) const</argsstring>
        <name>get_exposure</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the exposure parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>The current exposure parameter from [0,150], PROS_ERR if an error occurred </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="185" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a73869f85b3d2e468ffc51957d80f5a75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::get_object_count</definition>
        <argsstring>(void) const</argsstring>
        <name>get_object_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of objects currently detected by the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>The number of objects detected on the specified vision sensor. Returns PROS_ERR if the port was invalid or an error occurred. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="197" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1af1d1bc18fd7dacfd23d9dfc403b7d419" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref></type>
        <definition>vision_signature_s_t pros::Vision::get_signature</definition>
        <argsstring>(const std::uint8_t signature_id) const</argsstring>
        <name>get_signature</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <briefdescription>
<para>Gets the object detection signature with the given id number. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_signature_s_t containing information about the signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="211" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a7a89ad6812bfd46e24e69e1dc2f55039" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::get_white_balance</definition>
        <argsstring>(void) const</argsstring>
        <name>get_white_balance</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the white balance parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><simplesect kind="return"><para>The current RGB white balance setting of the sensor </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="222" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1af9958688590139df7b1227765f63d5ce" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::Vision::get_port</definition>
        <argsstring>(void) const</argsstring>
        <name>get_port</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the port number of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The vision sensor&apos;s port number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="229" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1adb2a3e6a7c483cda5a32a341d5be0cc6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::read_by_size</definition>
        <argsstring>(const std::uint32_t size_id, const std::uint32_t object_count, vision_object_s_t *const object_arr) const</argsstring>
        <name>read_by_size</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="254" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1af5bb50d41d63d6ff9cf4f6a642046fca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::read_by_sig</definition>
        <argsstring>(const std::uint32_t size_id, const std::uint32_t sig_id, const std::uint32_t object_count, vision_object_s_t *const object_arr) const</argsstring>
        <name>read_by_sig</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EINVAL - sig_id is outside the range [1-8] EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_signature_s_t signature for which an object will be returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="284" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1afbe909146f5cf396b322467885731d04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::Vision::read_by_code</definition>
        <argsstring>(const std::uint32_t size_id, const vision_color_code_t color_code, const std::uint32_t object_count, vision_object_s_t *const object_arr) const</argsstring>
        <name>read_by_code</name>
        <param>
          <type>const std::uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const <ref refid="vision_8h_1a71f2011a47e95558bb534b05c16c7f2b" kindref="member">vision_color_code_t</ref></type>
          <declname>color_code</declname>
        </param>
        <param>
          <type>const std::uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1ae619120558539c13e53b5a6f42fb4375" kindref="member">vision_object_s_t</ref> *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EDOM - size_id is greater than the number of available objects. ENODEV - The port cannot be configured as a vision sensor EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para>The vision_color_code_t for which objects will be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of object signatures copied. This number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="312" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a19cf2d7cf34b763b80da2c6511a61a49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::set_auto_white_balance</definition>
        <argsstring>(const std::uint8_t enable) const</argsstring>
        <name>set_auto_white_balance</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables/disables auto white-balancing on the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass 0 to disable, 1 to enable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="338" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a2ad6faaad1abb936f52022022611ac7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::set_exposure</definition>
        <argsstring>(const std::uint8_t exposure) const</argsstring>
        <name>set_exposure</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
<para>Sets the exposure parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para>The new exposure setting from [0,150].</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="355" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1ada3f1fdd2cc24c15af26bdd7c17bf604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::set_led</definition>
        <argsstring>(const std::int32_t rgb) const</argsstring>
        <name>set_led</name>
        <param>
          <type>const std::int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the vision sensor LED color, overriding the automatic behavior. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>An RGB code to set the LED to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="370" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a71c3c083ad5538a544e377ebc510cb75" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::set_signature</definition>
        <argsstring>(const std::uint8_t signature_id, vision_signature_s_t *const signature_ptr) const</argsstring>
        <name>set_signature</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <param>
          <type><ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref> *const</type>
          <declname>signature_ptr</declname>
        </param>
        <briefdescription>
<para>Stores the supplied object detection signature onto the vision sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>NOTE: This saves the signature in volatile memory, and the signature will be lost as soon as the sensor is powered down.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor EINVAL - sig_id is outside the range [1-8]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature id to store into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signature_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the signature to save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="390" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a923fc18c2b50a42b9c5c6292a476c9b5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::set_white_balance</definition>
        <argsstring>(const std::int32_t rgb) const</argsstring>
        <name>set_white_balance</name>
        <param>
          <type>const std::int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the white balance parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>The new RGB white balance setting of the sensor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="405" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1a89e0a23b112b8632171ef27cc6f57a6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::set_zero_point</definition>
        <argsstring>(vision_zero_e_t zero_point) const</argsstring>
        <name>set_zero_point</name>
        <param>
          <type><ref refid="vision_8h_1abac8bfe6003650c52be72f914bb203d0" kindref="member">vision_zero_e_t</ref></type>
          <declname>zero_point</declname>
        </param>
        <briefdescription>
<para>Sets the (0,0) coordinate for the Field of View. </para>
        </briefdescription>
        <detaileddescription>
<para>This will affect the coordinates returned for each request for a vision_object_s_t from the sensor, so it is recommended that this function only be used to configure the sensor at the beginning of its use.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="424" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1aa41af827ad6f9d6c050ca28c51d173ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::Vision::set_wifi_mode</definition>
        <argsstring>(const std::uint8_t enable) const</argsstring>
        <name>set_wifi_mode</name>
        <param>
          <type>const std::uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Sets the Wi-Fi mode of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>This functions uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Disable Wi-Fi on the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> sensor if 0, enable otherwise (e.g. 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="439" column="14"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classpros_1_1Vision_1aa46f3bfb4956c7061b34764c92fc68fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref></type>
        <definition>static vision_signature_s_t pros::Vision::signature_from_utility</definition>
        <argsstring>(const std::int32_t id, const std::int32_t u_min, const std::int32_t u_max, const std::int32_t u_mean, const std::int32_t v_min, const std::int32_t v_max, const std::int32_t v_mean, const float range, const std::int32_t type)</argsstring>
        <name>signature_from_utility</name>
        <param>
          <type>const std::int32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>u_min</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>u_max</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>u_mean</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>v_min</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>v_max</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>v_mean</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a signature from the vision sensor utility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_signature_s_t that can be set using <ref refid="classpros_1_1Vision_1a71c3c083ad5538a544e377ebc510cb75" kindref="member">Vision::set_signature</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="82" column="29"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Vision_1ada22311366ce088fa9ac08a8e3510800" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>static std::int32_t pros::Vision::print_signature</definition>
        <argsstring>(const vision_signature_s_t sig)</argsstring>
        <name>print_signature</name>
        <param>
          <type>const <ref refid="vision_8h_1a135c729c7277f6cc019c2924088a5fd5" kindref="member">vision_signature_s_t</ref></type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Prints the contents of the signature as an initializer list to the terminal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>The signature for which the contents will be printed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/vision.hpp" line="323" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pros/include/pros/vision.hpp" line="28" column="13" bodyfile="pros/include/pros/vision.hpp" bodystart="28" bodyend="443"/>
    <listofallmembers>
      <member refid="classpros_1_1Vision_1a1e1f1e031f1bb30c0e9865ff647ec000" prot="private" virt="non-virtual"><scope>pros::Vision</scope><name>_port</name></member>
      <member refid="classpros_1_1Vision_1a00f02cfb09ca224c2a7735be918e941d" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>clear_led</name></member>
      <member refid="classpros_1_1Vision_1ab50bcfb700b591e2f1654962baac400f" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>create_color_code</name></member>
      <member refid="classpros_1_1Vision_1a4b96f92a2ae2f29fd37709958f48e514" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_by_code</name></member>
      <member refid="classpros_1_1Vision_1a10fd89ed3c5e8fe5ce25046a877c7d84" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_by_sig</name></member>
      <member refid="classpros_1_1Vision_1aa5cca450a5b80278a97bbea786195733" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_by_size</name></member>
      <member refid="classpros_1_1Vision_1a80552b2897b8edcdb68bc56477213f2e" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_exposure</name></member>
      <member refid="classpros_1_1Vision_1a73869f85b3d2e468ffc51957d80f5a75" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_object_count</name></member>
      <member refid="classpros_1_1Vision_1af9958688590139df7b1227765f63d5ce" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_port</name></member>
      <member refid="classpros_1_1Vision_1af1d1bc18fd7dacfd23d9dfc403b7d419" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_signature</name></member>
      <member refid="classpros_1_1Vision_1a7a89ad6812bfd46e24e69e1dc2f55039" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>get_white_balance</name></member>
      <member refid="classpros_1_1Vision_1ada22311366ce088fa9ac08a8e3510800" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>print_signature</name></member>
      <member refid="classpros_1_1Vision_1afbe909146f5cf396b322467885731d04" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>read_by_code</name></member>
      <member refid="classpros_1_1Vision_1af5bb50d41d63d6ff9cf4f6a642046fca" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>read_by_sig</name></member>
      <member refid="classpros_1_1Vision_1adb2a3e6a7c483cda5a32a341d5be0cc6" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>read_by_size</name></member>
      <member refid="classpros_1_1Vision_1a19cf2d7cf34b763b80da2c6511a61a49" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>set_auto_white_balance</name></member>
      <member refid="classpros_1_1Vision_1a2ad6faaad1abb936f52022022611ac7f" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>set_exposure</name></member>
      <member refid="classpros_1_1Vision_1ada3f1fdd2cc24c15af26bdd7c17bf604" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>set_led</name></member>
      <member refid="classpros_1_1Vision_1a71c3c083ad5538a544e377ebc510cb75" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>set_signature</name></member>
      <member refid="classpros_1_1Vision_1a923fc18c2b50a42b9c5c6292a476c9b5" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>set_white_balance</name></member>
      <member refid="classpros_1_1Vision_1aa41af827ad6f9d6c050ca28c51d173ad" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>set_wifi_mode</name></member>
      <member refid="classpros_1_1Vision_1a89e0a23b112b8632171ef27cc6f57a6c" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>set_zero_point</name></member>
      <member refid="classpros_1_1Vision_1aa46f3bfb4956c7061b34764c92fc68fd" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>signature_from_utility</name></member>
      <member refid="classpros_1_1Vision_1a46cdaf74713f630b5bb5f4d0d3259dcd" prot="public" virt="non-virtual"><scope>pros::Vision</scope><name>Vision</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
