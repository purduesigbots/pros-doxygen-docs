<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="kapi_8h" kind="file" language="C++">
    <compoundname>kapi.h</compoundname>
    <includes refid="api_8h" local="yes">api.h</includes>
    <includes refid="apix_8h" local="yes">pros/apix.h</includes>
    <includes local="yes">rtos/FreeRTOS.h</includes>
    <includes local="yes">rtos/stream_buffer.h</includes>
    <incdepgraph>
      <node id="27">
        <label>stdbool.h</label>
      </node>
      <node id="23">
        <label>pros/include/kapi.h</label>
        <link refid="kapi_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>pros/misc.h</label>
        <link refid="misc_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>display/lvgl.h</label>
      </node>
      <node id="45">
        <label>rtos/stream_buffer.h</label>
      </node>
      <node id="29">
        <label>stdint.h</label>
      </node>
      <node id="31">
        <label>stdlib.h</label>
      </node>
      <node id="25">
        <label>errno.h</label>
      </node>
      <node id="42">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stddef.h</label>
      </node>
      <node id="35">
        <label>pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>pros/llemu.h</label>
        <link refid="llemu_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>unistd.h</label>
      </node>
      <node id="44">
        <label>rtos/FreeRTOS.h</label>
      </node>
      <node id="33">
        <label>pros/adi.h</label>
        <link refid="adi_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>math.h</label>
      </node>
      <node id="41">
        <label>pros/vision.h</label>
        <link refid="vision_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>pros/motors.h</label>
        <link refid="motors_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>pros/serial.h</label>
        <link refid="serial_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>pros/colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="40">
        <label>pros/rtos.h</label>
        <link refid="rtos_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="kapi_8h_1a7cb5988f848e9a61b6f81576ef4fda8a" prot="public" static="no">
        <name>KDBG_FILENO</name>
        <initializer>3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="35" column="9" bodyfile="pros/include/kapi.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1ae722946254739175acaf8b570e77e510" prot="public" static="no">
        <name>warn_printf</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>dprintf(STDERR_FILENO, &quot;%s:%d -- &quot; fmt &quot;\n&quot;, __FILE__, __LINE__, ##__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="37" column="9" bodyfile="pros/include/kapi.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1aa56805b96562808390c620b9a60dec05" prot="public" static="no">
        <name>warn_wprint</name>
        <param><defname>str</defname></param>
        <initializer>wprintf(&quot;%s&quot;, str)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="38" column="9" bodyfile="pros/include/kapi.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1ad6e5f3a8fac274076a837a26e508ffb7" prot="public" static="no">
        <name>kprintf</name>
        <param><defname>fmt</defname></param>
        <param><defname>...</defname></param>
        <initializer>dprintf(<ref refid="kapi_8h_1a7cb5988f848e9a61b6f81576ef4fda8a" kindref="member">KDBG_FILENO</ref>, &quot;%s:%d -- &quot; fmt &quot;\n&quot;, __FILE__, __LINE__, ##__VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="40" column="9" bodyfile="pros/include/kapi.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1a9cdf245d9d4255125fe917cb04da49af" prot="public" static="no">
        <name>kprint</name>
        <param><defname>str</defname></param>
        <initializer><ref refid="kapi_8h_1ad6e5f3a8fac274076a837a26e508ffb7" kindref="member">kprintf</ref>(&quot;%s&quot;, str)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="41" column="9" bodyfile="pros/include/kapi.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1a5c5fecd69dde4a2e5298d6702073c547" prot="public" static="no">
        <name>kassert</name>
        <param><defname>cond</defname></param>
        <initializer>do {                                    \
		if (!(cond)) {                        \
			<ref refid="kapi_8h_1a9cdf245d9d4255125fe917cb04da49af" kindref="member">kprint</ref>(&quot;Assertion failed: &quot; #cond); \
		}                                     \
	} while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="44" column="9" bodyfile="pros/include/kapi.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1a0cad071ca127a35df93166e9ed5b6ada" prot="public" static="no">
        <name>taskSCHEDULER_SUSPENDED</name>
        <initializer>((int32_t)0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="197" column="9" bodyfile="pros/include/kapi.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1a0923fdaae1bfe42ac5cccd9e9ddca9ed" prot="public" static="no">
        <name>taskSCHEDULER_NOT_STARTED</name>
        <initializer>((int32_t)1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="198" column="9" bodyfile="pros/include/kapi.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="kapi_8h_1acbb675035741787d29da475b5a887545" prot="public" static="no">
        <name>taskSCHEDULER_RUNNING</name>
        <initializer>((int32_t)2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="199" column="9" bodyfile="pros/include/kapi.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="kapi_8h_1a184cb36aad264b6917c489bbc2b793a5" prot="public" static="no">
        <type>uint32_t</type>
        <definition>typedef uint32_t task_stack_t</definition>
        <argsstring></argsstring>
        <name>task_stack_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="54" column="1" bodyfile="pros/include/kapi.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="kapi_8h_1afd02377d2e9c5c04feadab70462322fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rtos_suspend_all</definition>
        <argsstring>(void)</argsstring>
        <name>rtos_suspend_all</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Suspends the scheduler without disabling interrupts. context switches will not occur while the scheduler is suspended. RTOS ticks that occur while the scheduler is suspended will be held pending until the scheduler has been unsuspended with <ref refid="kapi_8h_1a1db72fd4961113c9255cce71d169cbfa" kindref="member">rtos_resume_all()</ref></para><para>When used correctly, this function ensures that operations occur atomically w.r.t. multitasking. Functions like task_delay, queue_send, and other functions MUST NOT be called while the scheduler is disabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1a1db72fd4961113c9255cce71d169cbfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t rtos_resume_all</definition>
        <argsstring>(void)</argsstring>
        <name>rtos_resume_all</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resumes the scheduler. It does not resume unsuspended tasks that were previously suspended by task_suspend.</para><para>if(rtos_resume_all()) { task_delay(0); // force context switch } <simplesect kind="return"><para>True if a context switch is necessary. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1a0f24b77c29ca853ea5f03d79acc4b726" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1a1d7e0825b8d8876e8cd8ece3f9115293" kindref="member">task_t</ref></type>
        <definition>task_t task_create_static</definition>
        <argsstring>(task_fn_t task_code, void *const param, uint32_t priority, const size_t stack_size, const char *const name, task_stack_t *const stack_buffer, static_task_s_t *const task_buffer)</argsstring>
        <name>task_create_static</name>
        <param>
          <type><ref refid="rtos_8h_1aece0aa29b1f1538115228d2197239f98" kindref="member">task_fn_t</ref></type>
          <declname>task_code</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>param</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>priority</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>stack_size</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="kapi_8h_1a184cb36aad264b6917c489bbc2b793a5" kindref="member">task_stack_t</ref> *const</type>
          <declname>stack_buffer</declname>
        </param>
        <param>
          <type>static_task_s_t *const</type>
          <declname>task_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a task using statically allocated buffers. All tasks used by the PROS system must use statically allocated buffers. This function uses the following values of errno when an error state is reached: ENOMEM - The stack cannot be used as the TCB was not created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the task entry function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that will be used as a parameter for the task being created. This memory should not typically come from stack, but rather from dynamically (i.e., malloc&apos;d) or statically allocated memory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_depth</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of words (i.e. 4 * stack_depth) available on the task&apos;s stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. This is mainly used to facilitate debugging. The name may be up to 32 characters long.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle by which the newly created task can be referenced. If an error occurred, NULL will be returned and errno can be checked for hints as to why task_create failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1a81b28a183397697dc8dfb94f96f875f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
        <definition>mutex_t mutex_create_static</definition>
        <argsstring>(static_sem_s_t *mutex_buffer)</argsstring>
        <name>mutex_create_static</name>
        <param>
          <type>static_sem_s_t *</type>
          <declname>mutex_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a statically allocated mutex.</para><para>All FreeRTOS primitives must be created statically if they are required for operation of the kernel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">mutex_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to store the mutex in</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to a newly created mutex. If an error occurred, NULL will be returned and errno can be checked for hints as to why mutex_create failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1a00d5fa4e33897eebbb15fced79d92c15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="apix_8h_1abc53a59ab4c3c8f2d7660e63990be7a7" kindref="member">sem_t</ref></type>
        <definition>sem_t sem_create_static</definition>
        <argsstring>(uint32_t max_count, uint32_t init_count, static_sem_s_t *semaphore_buffer)</argsstring>
        <name>sem_create_static</name>
        <param>
          <type>uint32_t</type>
          <declname>max_count</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>init_count</declname>
        </param>
        <param>
          <type>static_sem_s_t *</type>
          <declname>semaphore_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a statically allocated semaphore.</para><para>All FreeRTOS primitives must be created statically if they are required for operation of the kernel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum count value that can be reached. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>init_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial count value assigned to the new semaphore. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">semaphore_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to store the semaphore in</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A newly created semaphore. If an error occurred, NULL will be returned and errno can be checked for hints as to why sem_create failed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1a25237b68d7e177a3b32ece8b36bff9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="apix_8h_1a2d363eefb03348f96e985eadcfb184ab" kindref="member">queue_t</ref></type>
        <definition>queue_t queue_create_static</definition>
        <argsstring>(uint32_t length, uint32_t item_size, uint8_t *storage_buffer, static_queue_s_t *queue_buffer)</argsstring>
        <name>queue_create_static</name>
        <param>
          <type>uint32_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>item_size</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>storage_buffer</declname>
        </param>
        <param>
          <type>static_queue_s_t *</type>
          <declname>queue_buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a statically allocated queue.</para><para>All FreeRTOS primitives must be created statically if they are required for operation of the kernel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of items that the queue can contain. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>item_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes each item in the queue will require. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">storage_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A memory location for data storage </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">queue_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to store the queue in</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to a newly created queue, or NULL if the queue cannot be created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1abc782ea27c8020a7181f1d9620d22d7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void display_error</definition>
        <argsstring>(const char *text)</argsstring>
        <name>display_error</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display a non-fatal error to the built-in LCD/touch screen.</para><para>Note that this function is thread-safe, which requires that the scheduler be in a functioning state. For situations in which it is unclear whether the scheduler is working, use <computeroutput>display_fatal_error</computeroutput> instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text string to display to the screen </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1a0070639864e6a77a016b6262a1eb5e7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void display_fatal_error</definition>
        <argsstring>(const char *text)</argsstring>
        <name>display_fatal_error</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display a fatal error to the built-in LCD/touch screen.</para><para>This function is intended to be used when the integrity of the RTOS cannot be trusted. No thread-safety mechanisms are used and this function only relies on the use of the libv5rts.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text string to display to the screen </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1ae1fae740005d8465ab94006b6ba8629e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kprint_hex</definition>
        <argsstring>(uint8_t *s, size_t len)</argsstring>
        <name>kprint_hex</name>
        <param>
          <type>uint8_t *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints hex characters to the terminal.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s</parametername>
</parameternamelist>
<parameterdescription>
<para>The array of hex characters to print </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of hex characters to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="kapi_8h_1a26e0cd9a9907be72f7d3028164380cda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t xTaskGetSchedulerState</definition>
        <argsstring>()</argsstring>
        <name>xTaskGetSchedulerState</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/kapi.h" line="196" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Kernel API header</para><para>Contains additional declarations for use internally within kernel development. This file includes the FreeRTOS header, which allows for creation of statically allocated FreeRTOS primitives like tasks, semaphores, and queues.</para><para>Copyright (c) 2017-2020, Purdue University ACM SIGBots. All rights reserved.</para><para>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>    </detaileddescription>
    <location file="pros/include/kapi.h"/>
  </compounddef>
</doxygen>
