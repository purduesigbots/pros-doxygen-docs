<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__c-llemu" kind="group">
    <compoundname>c-llemu</compoundname>
    <title>LLEMU (Legacy LCD Emulator) C API</title>
    <innerfile refid="llemu_8h">llemu.h</innerfile>
    <innerclass refid="structpros_1_1lcd__s" prot="public">pros::lcd_s</innerclass>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="user-defined">
      <header>Functions</header>
      <memberdef kind="function" id="group__c-llemu_1gaf43a5a9cea1850757c8f0cc180604705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_is_initialized</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_is_initialized</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks whether the emulated three-button LCD has already been initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the LCD has been initialized or false if not.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Is<sp/>the<sp/>LCD<sp/>initialized?<sp/>%d\n&quot;,<sp/>lcd_is_initialized());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Will<sp/>Display<sp/>True</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="111" column="6" declfile="pros/llemu.h" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates an emulation of the three-button, UART-based VEX LCD on the display. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the LCD was successfully initialized, or false if it has already been initialized.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="127" column="6" declfile="pros/llemu.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaa0195c987d4c988cf9c9b8f6f6d40504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Turns off the Legacy LCD Emulator. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this function will clear the entire display, and you will not be able to call any further LLEMU functions until another call to lcd_initialize.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_shutdown();<sp/>//<sp/>All<sp/>done<sp/>with<sp/>the<sp/>LCD</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="151" column="6" declfile="pros/llemu.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gadb97914cdf57d801b60962f9be046c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_print</definition>
        <argsstring>(int16_t line, const char *fmt,...)</argsstring>
        <name>lcd_print</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Displays a formatted string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_print(0,<sp/>&quot;Buttons<sp/>Bitmap:<sp/>%d\n&quot;,<sp/>lcd_read_buttons());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="185" column="6" declfile="pros/llemu.h" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaac6e7a4915acb7b67424a56ee38e72b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_set_text</definition>
        <argsstring>(int16_t line, const char *text)</argsstring>
        <name>lcd_set_text</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Displays a string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> text to display</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="211" column="6" declfile="pros/llemu.h" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaccbddef45caac238401cb65a464ed306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_clear</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clears the contents of the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_clear();<sp/>//<sp/>No<sp/>more<sp/>text<sp/>will<sp/>be<sp/>displayed</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="233" column="6" declfile="pros/llemu.h" declline="233" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga054b2c7b5c134f6e495e02e6b289416a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_clear_line</definition>
        <argsstring>(int16_t line)</argsstring>
        <name>lcd_clear_line</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clears the contents of a line of the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_clear_line(1);<sp/>//<sp/>No<sp/>more<sp/>text<sp/>will<sp/>be<sp/>displayed</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="258" column="6" declfile="pros/llemu.h" declline="258" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga15de5b08e88b129028b094a1bc96e446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn0_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn0_cb</name>
        <param>
          <type>lcd_btn_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the leftmost button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the leftmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>on_center_button()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>pressed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pressed<sp/>=<sp/>!pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pressed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_set_text(2,<sp/>&quot;I<sp/>was<sp/>pressed!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_clear_line(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_register_btn0_cb(on_center_button);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="294" column="6" declfile="pros/llemu.h" declline="294" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaad5b65ea0cb13a9166b6d078839cf9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn1_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn1_cb</name>
        <param>
          <type>lcd_btn_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the center button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the center button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>on_center_button()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>pressed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pressed<sp/>=<sp/>!pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pressed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_set_text(2,<sp/>&quot;I<sp/>was<sp/>pressed!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_clear_line(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_register_btn1_cb(on_center_button);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="330" column="6" declfile="pros/llemu.h" declline="330" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga6987d7b3dae61fd87cc66e63772e1595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn2_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn2_cb</name>
        <param>
          <type>lcd_btn_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the rightmost button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the rightmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>on_center_button()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>pressed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pressed<sp/>=<sp/>!pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pressed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_set_text(2,<sp/>&quot;I<sp/>was<sp/>pressed!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_clear_line(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_register_btn2_cb(on_center_button);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="366" column="6" declfile="pros/llemu.h" declline="366" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga7dd4fea9a022783060e9c69fb4d9dc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t pros::c::lcd_read_buttons</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_read_buttons</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the button status from the emulated three-button LCD. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThe" kindref="compound">The</ref> value returned is a 3-bit integer where 1 0 0 indicates the left button is pressed, 0 1 0 indicates the center button is pressed, and 0 0 1 indicates the right button is pressed. 0 is returned if no buttons are currently being pressed.</para>
<para>Note that this function is provided for legacy API compatibility purposes, with the caveat that the V5 touch screen does not actually support pressing multiple points on the screen at the same time.</para>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> buttons pressed as a bit mask</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Buttons<sp/>Bitmap:<sp/>%d\n&quot;,<sp/>lcd_read_buttons());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="396" column="9" declfile="pros/llemu.h" declline="396" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gadc8ea2da6bf9308f4cf4c5ff0e9c6486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::lcd_set_background_color</definition>
        <argsstring>(lv_color_t color)</argsstring>
        <name>lcd_set_background_color</name>
        <param>
          <type>lv_color_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Changes the color of the LCD background to a provided color expressed in type lv_color_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>A color of type lv_color_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_background_color(COLOR_BLACK);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="413" column="6" declfile="pros/llemu.h" declline="413" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga17f4e35d4f2d1f970049b1f8b8a2b77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::lcd_set_text_color</definition>
        <argsstring>(lv_color_t color)</argsstring>
        <name>lcd_set_text_color</name>
        <param>
          <type>lv_color_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Changes the text color of the LCD to a provided color expressed in type lv_color_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>A color of type lv_color_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text_color(COLOR_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="430" column="6" declfile="pros/llemu.h" declline="430" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga50e6ba3fb0f21a6df917edd3f50de276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_hue</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_hue</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color hue. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. Hue has a range of 0 to 359.999</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hue value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Hue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_hue(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="129" column="8" declfile="pros/optical.h" declline="129" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga35a880783281c7d2f7f20a52a46fa5f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_saturation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_saturation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color saturation. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. Saturation has a range of 0 to 1.0</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>saturation value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Saturation<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_saturation(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="159" column="8" declfile="pros/optical.h" declline="159" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaa2221123c7b73a038c628050c5ebcb43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::optical_get_brightness</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_brightness</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected color brightness. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. Brightness has a range of 0 to 1.0</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>brightness value if the operation was successful or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>optical_get_brightness(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="189" column="8" declfile="pros/optical.h" declline="189" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga84cf2173597ccd58a1f390c6d310e710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_proximity</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_proximity</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the detected proximity value. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not available if gestures are being detected. proximity has a range of 0 to 255.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>poximity value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Proximity<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_proximity(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="219" column="9" declfile="pros/optical.h" declline="219" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga2028f86cc74a0e3b1f021743c03b5756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_set_led_pwm</definition>
        <argsstring>(uint8_t port, uint8_t value)</argsstring>
        <name>optical_set_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para>value that ranges from 0 to 100</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_set_led_pwm(OPTICAL_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="248" column="9" declfile="pros/optical.h" declline="248" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga5b3af2f98629b5f6e569cd1c12547502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_get_led_pwm</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_led_pwm</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the pwm value of the White LED. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>LED pwm value that ranges from 0 to 100 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;PWM<sp/>Value:<sp/>%d<sp/>\n&quot;,<sp/>optical_get_led_pwm(OPTICAL_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="276" column="9" declfile="pros/optical.h" declline="276" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga118d9f2a59afb6ac81ba509e7f8f1b92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_rgb_s_t</type>
        <definition>optical_rgb_s_t pros::c::optical_get_rgb</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_rgb</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the processed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>rgb value if the operation was successful or an optical_rgb_s_t with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_rgb_s_t<sp/>RGB_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>RGB_values<sp/>=<sp/>optical_get_rgb(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Brightness<sp/>value:<sp/>%lf<sp/>\n&quot;,<sp/>RGB_values.brightness);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="308" column="17" declfile="pros/optical.h" declline="308" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga8455ca417578452c577dc349b29d2708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_raw_s_t</type>
        <definition>optical_raw_s_t pros::c::optical_get_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the raw, unprocessed RGBC data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>raw rgb value if the operation was successful or an optical_raw_s_t with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_raw_s_t<sp/>raw_values;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>raw_values<sp/>=<sp/>optical_get_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Red<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Green<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Blue<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Clear<sp/>value:<sp/>%ld<sp/>\n&quot;,<sp/>raw_values.clear);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="340" column="17" declfile="pros/optical.h" declline="340" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga1591d88e399ed3e534f3d3d8de99f02c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_direction_e_t</type>
        <definition>optical_direction_e_t pros::c::optical_get_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>Gestures will be cleared after 500mS</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_direction_e_t<sp/>gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gesture<sp/>=<sp/>optical_get_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Gesture<sp/>value:<sp/>%d<sp/>\n&quot;,<sp/>gesture);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="371" column="23" declfile="pros/optical.h" declline="371" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga61d526831891d514f499f73059c99ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>optical_gesture_s_t</type>
        <definition>optical_gesture_s_t pros::c::optical_get_gesture_raw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_get_gesture_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the most recent raw gesture data from the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>gesture value if the operation was successful or an optical_gesture_s_t with all fields set to PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">optical_gesture_s_t<sp/>raw_gesture;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>raw_gesture<sp/>=<sp/>optical_get_gesture_raw(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Up<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.udata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Down<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ddata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Left<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.ldata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Right<sp/>data:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.rdata);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Type:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.type);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Count:<sp/>%u<sp/>\n&quot;,<sp/>raw_gesture.count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Time:<sp/>%lu<sp/>\n&quot;,<sp/>raw_gesture.time);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="406" column="21" declfile="pros/optical.h" declline="406" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga847424925f023e834607165cffa44a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_enable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_enable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Enable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_enable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="433" column="9" declfile="pros/optical.h" declline="433" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga30b26632678e49f288b5e12fd353f3bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::optical_disable_gesture</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>optical_disable_gesture</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Disable gesture detection on the sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as an <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 <ref refid="classpros_1_1Optical" kindref="compound">Optical</ref> Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation is successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>OPTICAL_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>optical_disable_gesture(OPTICAL_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/optical.h" line="460" column="9" declfile="pros/optical.h" declline="460" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaa247cd38039665b7ac4b0d0920b83c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::millis</definition>
        <argsstring>(void)</argsstring>
        <name>millis</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of milliseconds since PROS initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of milliseconds since PROS initialized</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay_until(&amp;now,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="185" column="10" declfile="pros/rtos.h" declline="185" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaea905a8de368ac9acc9ed04c66ebb84c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t pros::c::micros</definition>
        <argsstring>(void)</argsstring>
        <name>micros</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of microseconds since PROS initialized,. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of microseconds since PROS initialized</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint64_t<sp/>now<sp/>=<sp/>micros();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay_until(&amp;now,<sp/>2000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="203" column="10" declfile="pros/rtos.h" declline="203" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gab7f6e243b717091fec2bac6405bd3d56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
        <definition>task_t pros::c::task_create</definition>
        <argsstring>(task_fn_t function, void *const parameters, uint32_t prio, const uint16_t stack_depth, const char *const name)</argsstring>
        <name>task_create</name>
        <param>
          <type><ref refid="kapi_8h_1afd273bc26dce33480b445457e89bfaeb" kindref="member">task_fn_t</ref></type>
          <declname>function</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prio</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>stack_depth</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Creates a new task and add it to the list of tasks that are ready to run. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENOMEM - <ref refid="structThe" kindref="compound">The</ref> stack cannot be used as the TCB was not created.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the task entry function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory that will be used as a parameter for the task being created. <ref refid="structThis" kindref="compound">This</ref> memory should not typically come from stack, but rather from dynamically (i.e., malloc&apos;d) or statically allocated memory. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> priority at which the task should run. TASK_PRIO_DEFAULT plus/minus 1 or 2 is typically used. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stack_depth</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of words (i.e. 4 * stack_depth) available on the task&apos;s stack. TASK_STACK_DEPTH_DEFAULT is typically sufficienct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>A descriptive name for the task. <ref refid="structThis" kindref="compound">This</ref> is mainly used to facilitate debugging. <ref refid="structThe" kindref="compound">The</ref> name may be up to 32 characters long.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle by which the newly created task can be referenced. If an error occurred, NULL will be returned and errno can be checked for hints as to why task_create failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="245" column="8" declfile="pros/rtos.h" declline="245" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga9f5bd026f982b738d8761c443af586da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_delete</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_delete</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Removes a task from the RTOS real time kernel&apos;s management. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThe" kindref="compound">The</ref> task being deleted will be removed from all ready, blocked, suspended and event lists.</para>
<para>Memory dynamically allocated by the task is not automatically freed, and should be freed before the task is deleted.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> handle of the task to be deleted. Passing NULL will cause the calling task to be deleted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>other<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delete(my_task);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="274" column="6" declfile="pros/rtos.h" declline="274" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga4954a1ed8e37fd9b758ff98bf3ecf7d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_delay</definition>
        <argsstring>(const uint32_t milliseconds)</argsstring>
        <name>task_delay</name>
        <param>
          <type>const uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Delays a task for a given number of milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> is not the best method to have a task execute code at predefined intervals, as the delay time is measured from when the delay is requested. To delay cyclically, use <ref refid="group__c-llemu_1ga151eaf730a10d101bff15013a76b9aa8" kindref="member">task_delay_until()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>milliseconds</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of milliseconds to wait (1000 milliseconds per second)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="296" column="6" declfile="pros/rtos.h" declline="296" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga6a62f5325d65f95436762552df547d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::delay</definition>
        <argsstring>(const uint32_t milliseconds)</argsstring>
        <name>delay</name>
        <param>
          <type>const uint32_t</type>
          <declname>milliseconds</declname>
        </param>
        <briefdescription>
<para>Gets the number of milliseconds since PROS initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of milliseconds since PROS initialized</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay_until(&amp;now,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="298" column="6" declfile="pros/rtos.h" declline="298" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga151eaf730a10d101bff15013a76b9aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_delay_until</definition>
        <argsstring>(uint32_t *const prev_time, const uint32_t delta)</argsstring>
        <name>task_delay_until</name>
        <param>
          <type>uint32_t *const</type>
          <declname>prev_time</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
<para>Delays a task until a specified time. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function can be used by periodic tasks to ensure a constant execution frequency.</para>
<para><ref refid="structThe" kindref="compound">The</ref> task will be woken up at the time *prev_time + delta, and *prev_time will be updated to reflect the time at which the task will unblock.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev_time</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the location storing the setpoint time. <ref refid="structThis" kindref="compound">This</ref> should typically be initialized to the return value of <ref refid="group__c-llemu_1gaa247cd38039665b7ac4b0d0920b83c80" kindref="member">millis()</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of milliseconds to wait (1000 milliseconds per second)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Do<sp/>opcontrol<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_delay_until(&amp;now,<sp/>2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="324" column="6" declfile="pros/rtos.h" declline="324" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gab49c228af50a4677d45e4622fb5f982b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_get_priority</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_priority</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Gets the priority of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> priority of the task</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Task<sp/>Priority:<sp/>%d\n&quot;,<sp/>task_get_priority(my_task));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="348" column="10" declfile="pros/rtos.h" declline="348" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga6f4a1c359ab23c7811ed524aa8f71e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_set_priority</definition>
        <argsstring>(task_t task, uint32_t prio)</argsstring>
        <name>task_set_priority</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>prio</declname>
        </param>
        <briefdescription>
<para>Sets the priority of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para>If the specified task&apos;s state is available to be scheduled (e.g. not blocked) and new priority is higher than the currently running task, a context switch may occur.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prio</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> new priority of the task</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>things</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Example<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_set_priority(my_task,<sp/>TASK_PRIORITY_DEFAULT<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="375" column="6" declfile="pros/rtos.h" declline="375" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga2e78836b08bab39de392cc6583383c5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>task_state_e_t</type>
        <definition>task_state_e_t pros::c::task_get_state</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_state</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Gets the state of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> state of the task</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Task&apos;s<sp/>State:<sp/>%d\n&quot;,<sp/>task_get_state(my_task));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="399" column="16" declfile="pros/rtos.h" declline="399" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga03b6c85287d209a26f882813f3a29eee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_suspend</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_suspend</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Suspends the specified task, making it ineligible to be scheduled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to suspend</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>things</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Notify<sp/>me!<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_suspend(my_task);<sp/>//<sp/>The<sp/>task<sp/>will<sp/>no<sp/>longer<sp/>execute</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>other<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_resume(my_task);<sp/>//<sp/>The<sp/>task<sp/>will<sp/>resume<sp/>execution</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="423" column="6" declfile="pros/rtos.h" declline="423" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaf44f1148d2f7ede99ebd023479812fba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_resume</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_resume</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Resumes the specified task, making it eligible to be scheduled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to resume</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>things</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Example<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_suspend(my_task);<sp/>//<sp/>The<sp/>task<sp/>will<sp/>no<sp/>longer<sp/>execute</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>other<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_resume(my_task);<sp/>//<sp/>The<sp/>task<sp/>will<sp/>resume<sp/>execution</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="447" column="6" declfile="pros/rtos.h" declline="447" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gabb3a36bf47f6df9c981b1d585b922497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_get_count</definition>
        <argsstring>(void)</argsstring>
        <name>task_get_count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the number of tasks the kernel is currently managing, including all ready, blocked, or suspended tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>A task that has been deleted, but not yet reaped by the idle task will also be included in the count. Tasks recently created may take one context switch to be counted.</para>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of tasks that are currently being managed by the kernel.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Number<sp/>of<sp/>Running<sp/>Tasks:<sp/>%d\n&quot;,<sp/>task_get_count());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="471" column="10" declfile="pros/rtos.h" declline="471" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga1000d8e18af587837b65ab74b79d1cc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pros::c::task_get_name</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_get_name</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Gets the name of the specified task. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to check</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the name of the task</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Task<sp/>Name:<sp/>%d\n&quot;,<sp/>task_get_name(my_task));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="495" column="6" declfile="pros/rtos.h" declline="495" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gace3de5c48a2d91b9843ac9bd62a62d91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
        <definition>task_t pros::c::task_get_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>task_get_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Gets a task handle from the specified name. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThe" kindref="compound">The</ref> operation takes a relatively long time and should be used sparingly.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> name to query</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A task handle with a matching name, or NULL if none were found.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Hello<sp/>%s\n&quot;,<sp/>(char*)param);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>other<sp/>things</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delete(task_get_by_name(&quot;My<sp/>Task&quot;));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="522" column="8" declfile="pros/rtos.h" declline="522" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga663301f01d0cc8ecfd238fbe1346fc4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
        <definition>task_t pros::c::task_get_current</definition>
        <argsstring>()</argsstring>
        <name>task_get_current</name>
        <briefdescription>
<para>Get the currently running task handle. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> could be useful if a task wants to tell another task about itself.</para>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> currently running task handle.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>param)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>this_task<sp/>=<sp/>task_get_current();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(task_get_state(this_take)<sp/>==<sp/>E_TASK_STATE_RUNNING)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;This<sp/>task<sp/>is<sp/>currently<sp/>running\n&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>(void*)&quot;PROS&quot;,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="546" column="8" declfile="pros/rtos.h" declline="546" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaf69af2a08ca85bd16fa3d1b75dbcf790" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_notify</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_notify</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Sends a simple notification to task and increments the notification counter. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to notify</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Always returns true.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(task_notify_take(true,<sp/>TIMEOUT_MAX))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>puts(&quot;I<sp/>was<sp/>unblocked!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Notify<sp/>me!<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>DIGITAL_L1))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_notify(my_task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="578" column="10" declfile="pros/rtos.h" declline="578" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga9fa0dd52656774090c0005eb43ef2827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::task_join</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_join</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Utilizes task notifications to wait until specified task is complete and deleted, then continues to execute the program. </para>
        </briefdescription>
        <detaileddescription>
<para>Analogous to std::thread::join in C++.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> handle of the task to wait on.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_print(1,<sp/>&quot;%s<sp/>running&quot;,<sp/>task_get_name(NULL));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_print(2,<sp/>&quot;End<sp/>of<sp/>%s&quot;,<sp/>task_get_name(NULL));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Example<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(0,<sp/>&quot;Running<sp/>task.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_join(my_task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(3,<sp/>&quot;Task<sp/>completed.&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="610" column="6" declfile="pros/rtos.h" declline="610" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaf21b3326026e04f277e85236f4ff503a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_notify_ext</definition>
        <argsstring>(task_t task, uint32_t value, notify_action_e_t action, uint32_t *prev_value)</argsstring>
        <name>task_notify_ext</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type>notify_action_e_t</type>
          <declname>action</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>prev_value</declname>
        </param>
        <briefdescription>
<para>Sends a notification to a task, optionally performing some action. </para>
        </briefdescription>
        <detaileddescription>
<para>Will also retrieve the value of the notification in the target task before modifying the notification value.</para>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to notify </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> value used in performing the action </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>An action to optionally perform on the receiving task&apos;s notification value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev_value</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to store the previous value of the target task&apos;s notification, may be NULL</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Dependent on the notification action. For NOTIFY_ACTION_NO_WRITE: return 0 if the value could be written without needing to overwrite, 1 otherwise. For all other NOTIFY_ACTION values: always return 0</para>
</simplesect>
<bold>Example</bold> <programlisting></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="641" column="10" declfile="pros/rtos.h" declline="641" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga15f1230bbc0fe029caf775a393b4a897" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::task_notify_take</definition>
        <argsstring>(bool clear_on_exit, uint32_t timeout)</argsstring>
        <name>task_notify_take</name>
        <param>
          <type>bool</type>
          <declname>clear_on_exit</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Waits for a notification to be nonzero. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>clear_on_exit</parametername>
</parameternamelist>
<parameterdescription>
<para>If true (1), then the notification value is cleared. If false (0), then the notification value is decremented. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the amount of time to be spent waiting for a notification to occur.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> value of the task&apos;s notification value before it is decremented or cleared</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ign)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(task_notify_take(true,<sp/>TIMEOUT_MAX))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>puts(&quot;I<sp/>was<sp/>unblocked!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>task_t<sp/>my_task<sp/>=<sp/>task_create(my_task_fn,<sp/>NULL,<sp/>TASK_PRIORITY_DEFAULT,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;Notify<sp/>me!<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if(controller_get_digital(CONTROLLER_MASTER,<sp/>DIGITAL_L1))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task_notify(my_task);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="678" column="10" declfile="pros/rtos.h" declline="678" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga82a2d584952478f46b9bc766395bb8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::task_notify_clear</definition>
        <argsstring>(task_t task)</argsstring>
        <name>task_notify_clear</name>
        <param>
          <type><ref refid="kapi_8h_1af4e78a5aaf6b45938ea1d203bbc5ad12" kindref="member">task_t</ref></type>
          <declname>task</declname>
        </param>
        <briefdescription>
<para>Clears the notification for a task. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html">https://pros.cs.purdue.edu/v5/tutorials/topical/notifications.html</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> task to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>False if there was not a notification waiting, true if there was</para>
</simplesect>
<bold>Example</bold> <programlisting></programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="696" column="6" declfile="pros/rtos.h" declline="696" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga92aa79cdc30ffd13f63a7ffeca64b06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="kapi_8h_1a93e65d556f878c762685fae603d1f95d" kindref="member">mutex_t</ref></type>
        <definition>mutex_t pros::c::mutex_create</definition>
        <argsstring>(void)</argsstring>
        <name>mutex_create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><simplesect kind="return"><para>A handle to a newly created mutex. If an error occurred, NULL will be returned and errno can be checked for hints as to why mutex_create failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>MAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="719" column="9" declfile="pros/rtos.h" declline="719" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga49aa5444b488ff60fc458aea8172adc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::mutex_take</definition>
        <argsstring>(mutex_t mutex, uint32_t timeout)</argsstring>
        <name>mutex_take</name>
        <param>
          <type><ref refid="kapi_8h_1a93e65d556f878c762685fae603d1f95d" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classpros_1_1Mutex" kindref="compound">Mutex</ref> to attempt to lock. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait before the mutex becomes available. A timeout of 0 can be used to poll the mutex. TIMEOUT_MAX can be used to block indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully taken, false otherwise. If false is returned, then errno is set with a hint about why the the mutex couldn&apos;t be taken.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>timeout);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="751" column="6" declfile="pros/rtos.h" declline="751" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga7f20ed94cee8e04d491743b4b34feda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::mutex_give</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_give</name>
        <param>
          <type><ref refid="kapi_8h_1a93e65d556f878c762685fae603d1f95d" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Unlocks a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classpros_1_1Mutex" kindref="compound">Mutex</ref> to unlock.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully returned, false otherwise. If false is returned, then errno is set with a hint about why the mutex couldn&apos;t be returned.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>timeout);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="778" column="6" declfile="pros/rtos.h" declline="778" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaf5995c8132175bc8e76904ccd1f6e39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::mutex_delete</definition>
        <argsstring>(mutex_t mutex)</argsstring>
        <name>mutex_delete</name>
        <param>
          <type><ref refid="kapi_8h_1a93e65d556f878c762685fae603d1f95d" kindref="member">mutex_t</ref></type>
          <declname>mutex</declname>
        </param>
        <briefdescription>
<para>Deletes a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mutex</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classpros_1_1Mutex" kindref="compound">Mutex</ref> to unlock.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">mutex_t<sp/>mutex<sp/>=<sp/>mutex_create();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Acquire<sp/>the<sp/>mutex;<sp/>other<sp/>tasks<sp/>using<sp/>this<sp/>command<sp/>will<sp/>wait<sp/>until<sp/>the<sp/>mutex<sp/>is<sp/>released</highlight></codeline>
<codeline><highlight class="normal">//<sp/>timeout<sp/>can<sp/>specify<sp/>the<sp/>maximum<sp/>time<sp/>to<sp/>wait,<sp/>or<sp/>MAX_DELAY<sp/>to<sp/>wait<sp/>forever</highlight></codeline>
<codeline><highlight class="normal">//<sp/>If<sp/>the<sp/>timeout<sp/>expires,<sp/>&quot;false&quot;<sp/>will<sp/>be<sp/>returned,<sp/>otherwise<sp/>&quot;true&quot;</highlight></codeline>
<codeline><highlight class="normal">mutex_take(mutex,<sp/>MAX_DELAY);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>do<sp/>some<sp/>work</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Release<sp/>the<sp/>mutex<sp/>for<sp/>other<sp/>tasks</highlight></codeline>
<codeline><highlight class="normal">mutex_give(mutex);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Delete<sp/>the<sp/>mutex</highlight></codeline>
<codeline><highlight class="normal">mutex_delete(mutex);</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.h" line="800" column="6" declfile="pros/rtos.h" declline="800" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gad824e5dc94e77e8d6e7a62e59a97e560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_clear_led</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_clear_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Clears the vision sensor LED color, reseting it back to its default behavior, displaying the most prominent object signature color. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_clear_led(VISION_PORT);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="172" column="9" declfile="pros/vision.h" declline="172" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga9a4161d557e410fff34c4f158aa229d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vision_signature_s_t</type>
        <definition>vision_signature_s_t pros::c::vision_signature_from_utility</definition>
        <argsstring>(const int32_t id, const int32_t u_min, const int32_t u_max, const int32_t u_mean, const int32_t v_min, const int32_t v_max, const int32_t v_mean, const float range, const int32_t type)</argsstring>
        <name>vision_signature_from_utility</name>
        <param>
          <type>const int32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>u_mean</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_min</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_max</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>v_mean</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>range</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Creates a signature from the vision sensor utility. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> signature ID </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on U axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v_mean</parametername>
</parameternamelist>
<parameterdescription>
<para>Mean value on V axis </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>Scale factor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Signature type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_signature_s_t that can be set using vision_set_signature</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/>values<sp/>acquired<sp/>from<sp/>the<sp/>vision<sp/>utility</highlight></codeline>
<codeline><highlight class="normal">vision_signature_s_t<sp/>RED_SIG<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_from_utility(EXAMPLE_SIG,<sp/>8973,<sp/>11143,<sp/>10058,<sp/>-2119,<sp/>-1053,<sp/>-1586,<sp/>5.4,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">vision_set_signature(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>&amp;RED_SIG);</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object<sp/>of<sp/>the<sp/>EXAMPLE_SIG<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="218" column="22" declfile="pros/vision.h" declline="218" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga33a33d487f771f21d08c3159e6763418" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vision_color_code_t</type>
        <definition>vision_color_code_t pros::c::vision_create_color_code</definition>
        <argsstring>(uint8_t port, const uint32_t sig_id1, const uint32_t sig_id2, const uint32_t sig_id3, const uint32_t sig_id4, const uint32_t sig_id5)</argsstring>
        <name>vision_create_color_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id1</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id2</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id3</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id4</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id5</declname>
        </param>
        <briefdescription>
<para>Creates a color code that represents a combination of the given signature IDs. </para>
        </briefdescription>
        <detaileddescription>
<para>If fewer than 5 signatures are to be a part of the color code, pass 0 for the additional function parameters.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: EINVAL - Fewer than two signatures have been provided or one of the signatures is out of its [1-7] range (or 0 when omitted).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> first signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> second signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id3</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> third signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id4</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> fourth signature id [1-7] to add to the color code </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sig_id5</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> fifth signature id [1-7] to add to the color code</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_color_code_t object containing the color code information.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="258" column="21" declfile="pros/vision.h" declline="258" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gad0b47d5910ba2a6e5d52629f2b93c3e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vision_object_s_t</type>
        <definition>vision_object_s_t pros::c::vision_get_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id)</argsstring>
        <name>vision_get_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects. EHOSTDOWN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> vision_object_s_t object corresponding to the given size id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_size(VISION_PORT,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="294" column="19" declfile="pros/vision.h" declline="294" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gae53aedc2122f3b4c53d5874fde408a76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vision_object_s_t</type>
        <definition>vision_object_s_t pros::c::vision_get_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id)</argsstring>
        <name>vision_get_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given signature according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor EINVAL - sig_id is outside the range [1-8] EDOM - size_id is greater than the number of available objects. EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> signature ID [1-7] for which an object will be returned.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> vision_object_s_t object corresponding to the given signature and size_id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal">while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object<sp/>of<sp/>the<sp/>EXAMPLE_SIG<sp/>signature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="334" column="19" declfile="pros/vision.h" declline="334" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaaf91323dda2e39bd1ef885f7a0c32b0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vision_object_s_t</type>
        <definition>vision_object_s_t pros::c::vision_get_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code)</argsstring>
        <name>vision_get_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const vision_color_code_t</type>
          <declname>color_code</declname>
        </param>
        <briefdescription>
<para>Gets the nth largest object of the given color code according to size_id. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor EAGAIN - Reading the vision sensor failed for an unknown reason.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> vision_color_code_t for which an object will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> vision_object_s_t object corresponding to the given color code and size_id, or PROS_ERR if an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_object_s_t<sp/>rtn<sp/>=<sp/>vision_get_by_code(VISION_PORT,<sp/>0,<sp/>code1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Gets<sp/>the<sp/>largest<sp/>object</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>rtn.signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="373" column="19" declfile="pros/vision.h" declline="373" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga6c463892ea46d1cfd4fb7d7e237a4db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_exposure</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the exposure parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> current exposure setting from [0,150], PROS_ERR if an error occurred</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_exposure(VISION_PORT)<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_exposure(VISION_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="401" column="9" declfile="pros/vision.h" declline="401" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga5d6c54c6754717e256a6d59976976e25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_object_count</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_object_count</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the number of objects currently detected by the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of objects detected on the specified vision sensor. Returns PROS_ERR if the port was invalid or an error occurred.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Number<sp/>of<sp/>Objects<sp/>Detected:<sp/>%d\n&quot;,<sp/>vision_get_object_count(VISION_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="429" column="9" declfile="pros/vision.h" declline="429" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga698db4dbf0a04384a19d1a7496612d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_get_white_balance</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>vision_get_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the white balance parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> current RGB white balance setting of the sensor</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>VISION_WHITE<sp/>0xff</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_white_balance(VISION_PORT)<sp/>!=<sp/>VISION_WHITE)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_white_balance(VISION_PORT,<sp/>VISION_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="455" column="9" declfile="pros/vision.h" declline="455" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga2f2007dafb30e5aafeb21d9acba05826" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_print_signature</definition>
        <argsstring>(const vision_signature_s_t sig)</argsstring>
        <name>vision_print_signature</name>
        <param>
          <type>const vision_signature_s_t</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
<para>Prints the contents of the signature as an initializer list to the terminal. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> signature for which the contents will be printed</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_print_signature(sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="476" column="9" declfile="pros/vision.h" declline="476" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga4ec230e74ab6348768a5156c9e5c5a0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_size</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type>vision_object_s_t *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of object signatures copied. <ref refid="structThis" kindref="compound">This</ref> number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_size(VISION_PORT,<sp/>0,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>signature<sp/>of<sp/>the<sp/>largest<sp/>object<sp/>found</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="520" column="9" declfile="pros/vision.h" declline="520" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga0f38715b935eae0421d59e5102d98155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_sig</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const uint32_t sig_id, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_sig</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>sig_id</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type>vision_object_s_t *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor EDOM - size_id is greater than the number of available objects.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> signature ID [1-7] for which objects will be returned. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of object signatures copied. <ref refid="structThis" kindref="compound">This</ref> number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_sig(VISION_PORT,<sp/>0,<sp/>EXAMPLE_SIG,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>&quot;sig:<sp/>1&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="568" column="9" declfile="pros/vision.h" declline="568" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga0363eec188a23e6d41e98449a323a091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_read_by_code</definition>
        <argsstring>(uint8_t port, const uint32_t size_id, const vision_color_code_t color_code, const uint32_t object_count, vision_object_s_t *const object_arr)</argsstring>
        <name>vision_read_by_code</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>size_id</declname>
        </param>
        <param>
          <type>const vision_color_code_t</type>
          <declname>color_code</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>object_count</declname>
        </param>
        <param>
          <type>vision_object_s_t *const</type>
          <declname>object_arr</declname>
        </param>
        <briefdescription>
<para>Reads up to object_count object descriptors into object_arr. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21), or fewer than object_count number of objects were found. ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_count</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> number of objects to read </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> object to read from a list roughly ordered by object size (0 is the largest item, 1 is the second largest, etc.) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color_code</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> vision_color_code_t for which objects will be returned </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to copy the objects into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> number of object signatures copied. <ref refid="structThis" kindref="compound">This</ref> number will be less than object_count if there are fewer objects detected by the vision sensor. Returns PROS_ERR if the port was invalid, an error occurred, or fewer objects than size_id were found. All objects in object_arr that were not found are given VISION_OBJECT_ERR_SIG as their signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>OTHER_SIG<sp/>2</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>NUM_VISION_OBJECTS<sp/>4</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_object_s_t<sp/>object_arr[NUM_VISION_OBJECTS];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_color_code_t<sp/>code1<sp/>=<sp/>vision_create_color_code(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>OTHER_SIG,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>vision_read_by_code(VISION_PORT,<sp/>0,<sp/>code1,<sp/>NUM_VISION_OBJECTS,<sp/>object_arr);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;sig:<sp/>%d&quot;,<sp/>object_arr[0].signature);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Prints<sp/>the<sp/>signature<sp/>of<sp/>the<sp/>largest<sp/>object<sp/>found</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="617" column="9" declfile="pros/vision.h" declline="617" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga42e645bdac1e2eb230fd55205f37dd5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vision_signature_s_t</type>
        <definition>vision_signature_s_t pros::c::vision_get_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id)</argsstring>
        <name>vision_get_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <briefdescription>
<para>Gets the object detection signature with the given id number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> signature id to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vision_signature_s_t containing information about the signature.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_print_signature(sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="641" column="22" declfile="pros/vision.h" declline="641" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga7812fb755e22f147e11ae29911149242" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_signature</definition>
        <argsstring>(uint8_t port, const uint8_t signature_id, vision_signature_s_t *const signature_ptr)</argsstring>
        <name>vision_set_signature</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>signature_id</declname>
        </param>
        <param>
          <type>vision_signature_s_t *const</type>
          <declname>signature_ptr</declname>
        </param>
        <briefdescription>
<para>Stores the supplied object detection signature onto the vision sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="structThis" kindref="compound">This</ref> saves the signature in volatile memory, and the signature will be lost as soon as the sensor is powered down.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>signature_id</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> signature id to store into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">signature_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the signature to save</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if no errors occured, PROS_ERR otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EXAMPLE_SIG<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_signature_s_t<sp/>sig<sp/>=<sp/>vision_get_signature(VISION_PORT,<sp/>EXAMPLE_SIG);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sig.range<sp/>=<sp/>10.0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_signature(VISION_PORT,<sp/>EXAMPLE_SIG,<sp/>&amp;sig);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="670" column="9" declfile="pros/vision.h" declline="670" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga146e2f14c5a77f1a20fc64762910112c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_auto_white_balance</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_auto_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enables/disables auto white-balancing on the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor EINVAL - enable was not 0 or 1</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Pass 0 to disable, 1 to enable</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_auto_white_balance(VISION_PORT,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="698" column="9" declfile="pros/vision.h" declline="698" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga133b8ef84216367d5df385c2eb869ef4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_exposure</definition>
        <argsstring>(uint8_t port, const uint8_t exposure)</argsstring>
        <name>vision_set_exposure</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>exposure</declname>
        </param>
        <briefdescription>
<para>Sets the exposure parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting">https://pros.cs.purdue.edu/v5/tutorials/topical/vision.html#exposure-setting</ulink> for more detials.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>percent</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> new exposure setting from [0,150]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(vision_get_exposure(VISION_PORT)<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_exposure(VISION_PORT,<sp/>50);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="728" column="9" declfile="pros/vision.h" declline="728" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga9a01d95432c9dcd138c11ff718b0b264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_led</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_led</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the vision sensor LED color, overriding the automatic behavior. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para>An RGB code to set the LED to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_led(VISION_PORT,<sp/>COLOR_BLANCHED_ALMOND);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="755" column="9" declfile="pros/vision.h" declline="755" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gac3be7d132e62ab6b2bd20f564e9a5c85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_white_balance</definition>
        <argsstring>(uint8_t port, const int32_t rgb)</argsstring>
        <name>vision_set_white_balance</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>rgb</declname>
        </param>
        <briefdescription>
<para>Sets the white balance parameter of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> Sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rgb</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> new RGB white balance setting of the sensor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>VISION_WHITE<sp/>0xff</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_white_balance(VISION_PORT,<sp/>VISION_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="783" column="9" declfile="pros/vision.h" declline="783" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga00226eaa06fb4907a90ac188ec16a6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_zero_point</definition>
        <argsstring>(uint8_t port, vision_zero_e_t zero_point)</argsstring>
        <name>vision_set_zero_point</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>vision_zero_e_t</type>
          <declname>zero_point</declname>
        </param>
        <briefdescription>
<para>Sets the (0,0) coordinate for the Field of View. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> will affect the coordinates returned for each request for a vision_object_s_t from the sensor, so it is recommended that this function only be used to configure the sensor at the beginning of its use.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given value is not within the range of V5 ports (1-21). ENODEV - <ref refid="structThe" kindref="compound">The</ref> port cannot be configured as a vision sensor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zero_point</parametername>
</parameternamelist>
<parameterdescription>
<para>One of vision_zero_e_t to set the (0,0) coordinate for the FOV</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_zero_point(VISION_PORT,<sp/>E_VISION_ZERO_CENTER);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="814" column="9" declfile="pros/vision.h" declline="814" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga86efa93d00dc9646f726eea073068117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::vision_set_wifi_mode</definition>
        <argsstring>(uint8_t port, const uint8_t enable)</argsstring>
        <name>vision_set_wifi_mode</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Sets the Wi-Fi mode of the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> functions uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> given port is not within the range of V5 ports (1-21) EACCESS - Anothe resources is currently trying to access the port</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Disable Wi-Fi on the <ref refid="classpros_1_1Vision" kindref="compound">Vision</ref> sensor if 0, enable otherwise (e.g. 1)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>VISION_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>vision_set_wifi_mode(VISION_PORT,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/vision.h" line="841" column="9" declfile="pros/vision.h" declline="841" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__c-llemu_1ga0f5bb2a3264a6ad95973f9c8e6b3198e" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* lcd_btn_cb_fn_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>lcd_btn_cb_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="56" column="9" bodyfile="pros/llemu.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__c-llemu_1gabf810938417a0fe9860ee5b54ad27e5e" prot="public" static="no" mutable="no">
        <type>lv_obj_t *</type>
        <definition>lv_obj_t* frame</definition>
        <argsstring></argsstring>
        <name>frame</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="77" column="10" bodyfile="pros/llemu.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-llemu_1gac7960df5304aa1a85438a1566699aa5b" prot="public" static="no" mutable="no">
        <type>lv_obj_t *</type>
        <definition>lv_obj_t* screen</definition>
        <argsstring></argsstring>
        <name>screen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="78" column="10" bodyfile="pros/llemu.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-llemu_1gadcb55e9c2e2ee42289cab0db6246ddda" prot="public" static="no" mutable="no">
        <type>lv_obj_t *</type>
        <definition>lv_obj_t* lcd_text[8]</definition>
        <argsstring>[8]</argsstring>
        <name>lcd_text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="79" column="10" bodyfile="pros/llemu.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-llemu_1ga256e54cda684ece00a80638038a1a8f8" prot="public" static="no" mutable="no">
        <type>lv_obj_t *</type>
        <definition>lv_obj_t* btn_container</definition>
        <argsstring></argsstring>
        <name>btn_container</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="80" column="10" bodyfile="pros/llemu.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-llemu_1gad5525fde54ccf5852cc9707355d6866b" prot="public" static="no" mutable="no">
        <type>lv_obj_t *</type>
        <definition>lv_obj_t* btns[3]</definition>
        <argsstring>[3]</argsstring>
        <name>btns</name>
        <briefdescription>
<para>&lt; 0 =&gt; left; 1 =&gt; center; 2 =&gt; right </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="82" column="10" bodyfile="pros/llemu.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-llemu_1gabbec1e6755e014a66a6e88cd7b9e71dc" prot="public" static="no" mutable="no">
        <type>lcd_btn_cb_fn_t</type>
        <definition>lcd_btn_cb_fn_t callbacks[3]</definition>
        <argsstring>[3]</argsstring>
        <name>callbacks</name>
        <briefdescription>
<para>&lt; 0 =&gt; left; 1 =&gt; center; 2 =&gt; right <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="84" column="17" bodyfile="pros/llemu.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__c-llemu_1ga818a94b7da8808b30f13ddd10cb9e442" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>volatile uint8_t touch_bits</definition>
        <argsstring></argsstring>
        <name>touch_bits</name>
        <briefdescription>
<para>&lt; 4 =&gt; left; 2 =&gt; center; 1 =&gt; right (no multitouch support) <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="86" column="18" bodyfile="pros/llemu.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__c-llemu_1gafa86afc6491531fb4b4d7f1e18803852" prot="public" static="no">
        <name>LCD_BTN_LEFT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="61" column="9" bodyfile="pros/llemu.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-llemu_1gabf8903693b4a95a6b653916d5f6fe486" prot="public" static="no">
        <name>LCD_BTN_CENTER</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="66" column="9" bodyfile="pros/llemu.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-llemu_1ga7851ef3eb7573b194efb0a05d88f2c35" prot="public" static="no">
        <name>LCD_BTN_RIGHT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="71" column="9" bodyfile="pros/llemu.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Additional example code for this module can be found in its <ref refid="llemu" kindref="compound">Tutorial</ref>. </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
