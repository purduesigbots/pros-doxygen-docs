<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="motors_8h" kind="file" language="C++">
    <compoundname>motors.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <includedby refid="motors_8hpp" local="yes">pros/motors.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>pros/motors.h</label>
        <link refid="motors_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="6">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="4">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pros/motors.hpp</label>
        <link refid="motors_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pros/motors.h</label>
        <link refid="motors_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="user-defined">
      <header>Motor movement functions</header>
      <description><para>These functions allow programmers to make motors move </para>
</description>
      <memberdef kind="function" id="group__c-motors_1gac76e46064191f91bf2546335caccf6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move</definition>
        <argsstring>(int8_t port, int32_t voltage)</argsstring>
        <name>motor_move</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the voltage for the motor from -127 to 127. </para>
        </briefdescription>
        <detaileddescription>
<para>This is designed to map easily to the input from the controller&apos;s analog stick for simple opcontrol use. The actual behavior of the motor is analogous to use of <ref refid="group__c-motors_1gaa1412c80eedabb6cd86159d51184b283" kindref="member">motor_move_voltage()</ref>, or <ref refid="group__api-legacy_1ga59a0d6bd050cd259ad488e68f856ae81" kindref="member">motorSet()</ref> from the PROS 2 API.</para>
<para><simplesect kind="note"><para>This function will not respect brake modes, and simply sets the voltage to the desired value.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor voltage from -127 to 127</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="80" column="9" declfile="pros/motors.h" declline="80" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaa5f42cf9767315e3bf2f465cf64faf80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_brake</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_brake</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Stops the motor using the currently configured brake mode. </para>
        </briefdescription>
        <detaileddescription>
<para>This function sets motor velocity to zero, which will cause it to act according to the set brake mode. If brake mode is set to MOTOR_BRAKE_HOLD, this function may behave differently than calling motor_move_absolute(port, 0) or motor_move_relative(port, 0).</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting filename=".language-id"><codeline><highlight class="normal">code</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="106" column="9" declfile="pros/motors.h" declline="106" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga75e7ed194eba3e78d281c40fcd10763f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_absolute</definition>
        <argsstring>(int8_t port, const double position, const int32_t velocity)</argsstring>
        <name>motor_move_absolute</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the target absolute position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the position of the motor when initialized or the position when it was most recently reset with <ref refid="namespacepros_1_1c_1a4aec20e889c09650f066f4e28048c19b" kindref="member">motor_set_zero_position()</ref>.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes. The example code shows how to block until a movement is finished.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The absolute position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>This<sp/>will<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_tare_position(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="153" column="9" declfile="pros/motors.h" declline="153" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gad62eb0085dbb0aad697487a1b2c00bc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_relative</definition>
        <argsstring>(int8_t port, const double position, const int32_t velocity)</argsstring>
        <name>motor_move_relative</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the relative target position for the motor to move to. </para>
        </briefdescription>
        <detaileddescription>
<para>This movement is relative to the current position of the motor as given in <ref refid="group__c-motors_1ga113fbf1950304b3a56705722b283c3a1" kindref="member">motor_get_position()</ref>. Providing 10.0 as the position parameter would result in the motor moving clockwise 10 units, no matter what the current position is.</para>
<para><simplesect kind="note"><para>This function simply sets the target for the motor, it does not block program execution until the movement finishes. The example code shows how to block until a movement is finished.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The relative position to move to in the motor&apos;s encoder units </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable velocity for the movement in RPM</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_relative(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_relative(1,<sp/>100,<sp/>100);<sp/>//<sp/>Also<sp/>moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>&lt;<sp/>205)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>&gt;<sp/>195)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="198" column="9" declfile="pros/motors.h" declline="198" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaa33296eaa7d7bddef72e9606e72bcc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_velocity</definition>
        <argsstring>(int8_t port, const int32_t velocity)</argsstring>
        <name>motor_move_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Sets the velocity for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This velocity corresponds to different actual speeds depending on the gearset used for the motor. This results in a range of +-100 for E_MOTOR_GEARSET_36, +-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity is held with PID to ensure consistent speed, as opposed to setting the motor&apos;s voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_velocity(1,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>100<sp/>RPM<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_velocity(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="232" column="9" declfile="pros/motors.h" declline="232" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaa1412c80eedabb6cd86159d51184b283" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_move_voltage</definition>
        <argsstring>(int8_t port, const int32_t voltage)</argsstring>
        <name>motor_move_voltage</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Sets the output voltage for the motor from -12000 to 12000 in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><simplesect kind="note"><para>This function will not respect brake modes, and simply sets the voltage to the desired value.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage value from -12000 to 12000</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_voltage(1,<sp/>12000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>at<sp/>max<sp/>voltage<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_voltage(1,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="262" column="9" declfile="pros/motors.h" declline="262" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga8815309c8900190c036e43c223afc0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_modify_profiled_velocity</definition>
        <argsstring>(int8_t port, const int32_t velocity)</argsstring>
        <name>motor_modify_profiled_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>velocity</declname>
        </param>
        <briefdescription>
<para>Changes the output velocity for a profiled movement (motor_move_absolute or motor_move_relative). </para>
        </briefdescription>
        <detaileddescription>
<para>This will have no effect if the motor is not following a profiled movement.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>velocity</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor velocity from +-100, +-200, or +-600 depending on the motor&apos;s gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_modify_profiled_velocity(1,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor<sp/>early</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="292" column="9" declfile="pros/motors.h" declline="292" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga1d612333c59cacac2b6daf8085605213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_target_position</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_target_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the target position set for the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The target position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Target:<sp/>%d\n&quot;,<sp/>motor_get_target_position(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>100</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="317" column="8" declfile="pros/motors.h" declline="317" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga14476b124c9072efc14ad2cbcf6481ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_target_velocity</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_target_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the velocity commanded to the motor by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The commanded motor velocity from +-100, +-200, or +-600, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move_velocity(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Commanded<sp/>Velocity:<sp/>%d\n&quot;,<sp/>motor_get_target_velocity(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="344" column="9" declfile="pros/motors.h" declline="344" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Motor telemetry functions</header>
      <description><para>These functions allow programmers to collect telemetry from motors </para>
</description>
      <memberdef kind="function" id="group__c-motors_1ga2ad53ef4a029ef4860d840ba3fa27cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_actual_velocity</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_actual_velocity</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the actual velocity of the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s actual velocity in RPM or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Actual<sp/>velocity:<sp/>%lf\n&quot;,<sp/>motor_get_actual_velocity(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="377" column="8" declfile="pros/motors.h" declline="377" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga42567d532e2ca7c25ea54c17ac3c7742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_current_draw</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_current_draw</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the current drawn by the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s current in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Draw:<sp/>%d\n&quot;,<sp/>motor_get_current_draw(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="404" column="9" declfile="pros/motors.h" declline="404" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga0f9c29ae5adda0f2d753b8e7c2af5c6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_direction</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_direction</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the direction of movement for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 for moving in the positive direction, -1 for moving in the negative direction, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Direction:<sp/>%d\n&quot;,<sp/>motor_get_direction(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="431" column="9" declfile="pros/motors.h" declline="431" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga7a974a7c9626135e8fc19525623d3a15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_efficiency</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_efficiency</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the efficiency of the motor in percent. </para>
        </briefdescription>
        <detaileddescription>
<para>An efficiency of 100% means that the motor is moving electrically while drawing no electrical power, and an efficiency of 0% means that the motor is drawing power but not moving.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s efficiency in percent or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Efficiency:<sp/>%d\n&quot;,<sp/>motor_get_efficiency(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="462" column="8" declfile="pros/motors.h" declline="462" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga155b9e37b6dba8e0530cc153cdb5c55e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_over_current</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_is_over_current</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor is drawing over its current limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor&apos;s current limit is being exceeded and 0 if the current limit is not exceeded, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Limit<sp/>Hit?:<sp/>%d\n&quot;,<sp/>motor_is_over_current(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="489" column="9" declfile="pros/motors.h" declline="489" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gad47d180d2620885f1d2b3a1b0d867da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_over_temp</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_is_over_temp</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor&apos;s temperature is above its limit. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the temperature limit is exceeded and 0 if the the temperature is below the limit, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Temp<sp/>Limit:<sp/>%d\n&quot;,<sp/>motor_is_over_temp(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="516" column="9" declfile="pros/motors.h" declline="516" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga7a93f3046d69b0d740b83faabc2b604d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_stopped</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_is_stopped</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if the motor is stopped. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Although this function forwards data from the motor, the motor presently does not provide any value. This function returns PROS_ERR with errno set to ENOSYS.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor is not moving, 0 if the motor is moving, or PROS_ERR if the operation failed, setting errno</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Is<sp/>the<sp/>motor<sp/>stopped?<sp/>%d\n&quot;,<sp/>motor_is_stopped(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="542" column="9" declfile="pros/motors.h" declline="542" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepros_1a6a794029fb7c8da16ee9c883b3c5f1d1" prot="public" static="no" strong="no">
        <type></type>
        <name>motor_fault_e</name>
        <enumvalue id="namespacepros_1ga6a794029fb7c8da16ee9c883b3c5f1d1aa1763132e678a09c2a2299dcb8ca91f2" prot="public">
          <name>E_MOTOR_FAULT_NO_FAULTS</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
<para>No faults. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1ga6a794029fb7c8da16ee9c883b3c5f1d1a19697fdb3bda40d671908094d19bb816" prot="public">
          <name>E_MOTOR_FAULT_MOTOR_OVER_TEMP</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>Analogous to <ref refid="group__c-motors_1gad47d180d2620885f1d2b3a1b0d867da2" kindref="member">motor_is_over_temp()</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1ga6a794029fb7c8da16ee9c883b3c5f1d1a129793cdd6c08a6df63a4ce690a563e9" prot="public">
          <name>E_MOTOR_FAULT_DRIVER_FAULT</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>Indicates a motor h-bridge fault. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1ga6a794029fb7c8da16ee9c883b3c5f1d1ad58554131e6fe018bca28e8447e9da19" prot="public">
          <name>E_MOTOR_FAULT_OVER_CURRENT</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
<para>Analogous to <ref refid="group__c-motors_1ga155b9e37b6dba8e0530cc153cdb5c55e" kindref="member">motor_is_over_current()</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1ga6a794029fb7c8da16ee9c883b3c5f1d1a4261f9f8989960a7aed89cbc8821007c" prot="public">
          <name>E_MOTOR_FAULT_DRV_OVER_CURRENT</name>
          <initializer>= 0x08</initializer>
          <briefdescription>
<para>Indicates an h-bridge over current. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="552" column="27" bodyfile="pros/motors.h" bodystart="552" bodyend="563"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepros_1aefb84700279103f329387cdf6cba0d2b" prot="public" static="no" strong="no">
        <type></type>
        <name>motor_flag_e</name>
        <enumvalue id="namespacepros_1gaefb84700279103f329387cdf6cba0d2bae402dfe134784f10ef577661e751cf25" prot="public">
          <name>E_MOTOR_FLAGS_NONE</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
<para>There are no flags raised. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1gaefb84700279103f329387cdf6cba0d2bacb8e657551c89b6678660318961f8b6b" prot="public">
          <name>E_MOTOR_FLAGS_BUSY</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>Cannot currently communicate to the motor. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1gaefb84700279103f329387cdf6cba0d2ba897fee9d51039554c0cda9e061c2a3e0" prot="public">
          <name>E_MOTOR_FLAGS_ZERO_VELOCITY</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>Analogous to <ref refid="group__c-motors_1ga7a93f3046d69b0d740b83faabc2b604d" kindref="member">motor_is_stopped()</ref> </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1gaefb84700279103f329387cdf6cba0d2bab9db9483c159e4bb272015e6507de0ac" prot="public">
          <name>E_MOTOR_FLAGS_ZERO_POSITION</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
<para>Analogous to motor_get_zero_position_flag() </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="621" column="26" bodyfile="pros/motors.h" bodystart="621" bodyend="630"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepros_1abe00508f1ecabf2dad6bf6d8d323fec7" prot="public" static="no" strong="no">
        <type></type>
        <name>motor_brake_mode_e</name>
        <enumvalue id="namespacepros_1abe00508f1ecabf2dad6bf6d8d323fec7aa2cc502049ad45801c2ce0a4b3d2069e" prot="public">
          <name>E_MOTOR_BRAKE_COAST</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> coasts when stopped, traditional behavior. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1abe00508f1ecabf2dad6bf6d8d323fec7a0ea7e0574d40f6db40525bb6b7aeeba0" prot="public">
          <name>E_MOTOR_BRAKE_BRAKE</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> brakes when stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1abe00508f1ecabf2dad6bf6d8d323fec7aaa23ffec0b250ce72e7159b8de3d4b8d" prot="public">
          <name>E_MOTOR_BRAKE_HOLD</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para><ref refid="classpros_1_1v5_1_1Motor" kindref="compound">Motor</ref> actively holds position when stopped. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1abe00508f1ecabf2dad6bf6d8d323fec7a23e68282557596c84cfecf5e6ec4a023" prot="public">
          <name>E_MOTOR_BRAKE_INVALID</name>
          <initializer>= INT32_MAX</initializer>
          <briefdescription>
<para>Invalid brake mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="860" column="32" bodyfile="pros/motors.h" bodystart="860" bodyend="869"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepros_1a6d94b540f7c22cc42ba611576350193c" prot="public" static="no" strong="no">
        <type></type>
        <name>motor_encoder_units_e</name>
        <enumvalue id="namespacepros_1a6d94b540f7c22cc42ba611576350193ca3f8b78d1687e80752406e90ca3bd9caf" prot="public">
          <name>E_MOTOR_ENCODER_DEGREES</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>Position is recorded as angle in degrees as a floating point number. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a6d94b540f7c22cc42ba611576350193ca5ba6e5cdf81faac8a776a8ce3f735285" prot="public">
          <name>E_MOTOR_ENCODER_ROTATIONS</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Position is recorded as angle in rotations as a floating point number. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a6d94b540f7c22cc42ba611576350193cad1911b04d55f80e665634a2863386e86" prot="public">
          <name>E_MOTOR_ENCODER_COUNTS</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Position is recorded as raw encoder ticks as a whole number. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a6d94b540f7c22cc42ba611576350193ca4ab7c8effccd17c995a4abaf1fa4663f" prot="public">
          <name>E_MOTOR_ENCODER_INVALID</name>
          <initializer>= INT32_MAX</initializer>
          <briefdescription>
<para>Invalid motor encoder units. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="875" column="35" bodyfile="pros/motors.h" bodystart="875" bodyend="884"/>
      </memberdef>
      <memberdef kind="enum" id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92" prot="public" static="no" strong="no">
        <type></type>
        <name>motor_gearset_e</name>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92ad1b0135f1d6fde4ee29590836eb1b856" prot="public">
          <name>E_MOTOR_GEARSET_36</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a1a2e5afdd25ef99a95ba81e8e3f4196c" prot="public">
          <name>E_MOTOR_GEAR_RED</name>
          <initializer>= E_MOTOR_GEARSET_36</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a62a162f59f6d9af4d42d52c6dacfbbe1" prot="public">
          <name>E_MOTOR_GEAR_100</name>
          <initializer>= E_MOTOR_GEARSET_36</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a95444ef9bee438d4bcfebb0c0a399443" prot="public">
          <name>E_MOTOR_GEARSET_18</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a863194b050bc8f03c51a5b66d92eae2f" prot="public">
          <name>E_MOTOR_GEAR_GREEN</name>
          <initializer>= E_MOTOR_GEARSET_18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92ad4d1450466369454f459ff77bddc6f76" prot="public">
          <name>E_MOTOR_GEAR_200</name>
          <initializer>= E_MOTOR_GEARSET_18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a33f143e34739e15a553885015455db37" prot="public">
          <name>E_MOTOR_GEARSET_06</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a43d1c2e07d7affaa13d8498a57c20ef2" prot="public">
          <name>E_MOTOR_GEAR_BLUE</name>
          <initializer>= E_MOTOR_GEARSET_06</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a025b0cf3f6d87be2b65746404500b0df" prot="public">
          <name>E_MOTOR_GEAR_600</name>
          <initializer>= E_MOTOR_GEARSET_06</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1a20a5d12701ec52a5c6bde1c3fe14ab92a934f089388ca6bd6b92df6321dfbe45d" prot="public">
          <name>E_MOTOR_GEARSET_INVALID</name>
          <initializer>= INT32_MAX</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="890" column="29" bodyfile="pros/motors.h" bodystart="890" bodyend="901"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__c-motors_1ga2cbdf023d7dfb10606b70422fe698616" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::motor_get_faults</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_faults</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the faults experienced by the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in motor_fault_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s faults.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Faults:<sp/>%d\n&quot;,<sp/>motor_get_faults(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="611" column="10" declfile="pros/motors.h" declline="611" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga29a31e20d6203737a15b77d7b2479da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::motor_get_flags</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_flags</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the flags set by the motor&apos;s operation. </para>
        </briefdescription>
        <detaileddescription>
<para>Compare this bitfield to the bitmasks in motor_flag_e_t.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A bitfield containing the motor&apos;s flags.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Flags:<sp/>%d\n&quot;,<sp/>motor_get_flags(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="676" column="10" declfile="pros/motors.h" declline="676" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gae7399c7b8bde6a7c371e5a67e85b1d0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_raw_position</definition>
        <argsstring>(int8_t port, uint32_t *const timestamp)</argsstring>
        <name>motor_get_raw_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>timestamp</declname>
        </param>
        <briefdescription>
<para>Gets the raw encoder count of the motor at a given timestamp. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a time in milliseconds for which the encoder count will be returned. If NULL, the timestamp at which the encoder count was read will not be supplied</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw encoder count at the given timestamp or PROS_ERR if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Encoder<sp/>Count:<sp/>%d\n&quot;,<sp/>motor_get_raw_position(1,<sp/>&amp;now));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="708" column="9" declfile="pros/motors.h" declline="708" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga113fbf1950304b3a56705722b283c3a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_position</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the absolute position of the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s absolute position in its encoder units or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Position:<sp/>%lf\n&quot;,<sp/>motor_get_position(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="735" column="8" declfile="pros/motors.h" declline="735" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaaaf993792ce15b7b025b8177b3af01c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_power</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_power</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the power drawn by the motor in Watts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s power draw in Watts or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Power:<sp/>%lf\n&quot;,<sp/>motor_get_power(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="763" column="8" declfile="pros/motors.h" declline="763" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga22a0f1bb6100680ea52d32f9053ec5bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_temperature</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_temperature</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the temperature of the motor in degrees Celsius. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s temperature in degrees Celsius or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Temperature:<sp/>%lf\n&quot;,<sp/>motor_get_temperature(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="790" column="8" declfile="pros/motors.h" declline="790" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1gaea02a297a5d59b4ca640a038e2a90edb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::motor_get_torque</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_torque</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the torque generated by the motor in Newton Meters (Nm). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s torque in Nm or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Torque:<sp/>%lf\n&quot;,<sp/>motor_get_torque(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="817" column="8" declfile="pros/motors.h" declline="817" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-motors_1ga5d1e2d0ca02dfe1b53bc577f8b9a1ffb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_voltage</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_voltage</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the voltage delivered to the motor in millivolts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s voltage in mV or PROS_ERR_F if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Motor<sp/>Voltage:<sp/>%lf\n&quot;,<sp/>motor_get_voltage(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="844" column="9" declfile="pros/motors.h" declline="844" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a4aec20e889c09650f066f4e28048c19b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_zero_position</definition>
        <argsstring>(int8_t port, const double position)</argsstring>
        <name>motor_set_zero_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Sets the position for the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be the future reference point for the motor&apos;s &quot;absolute&quot; position.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The new reference position in its encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> </para>
<para><programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_zero_position(1,<sp/>80);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>80<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1037" column="9" declfile="pros/motors.h" declline="1037" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a712a9fb1e8cb15f75edcf06514ffb5ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_tare_position</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_tare_position</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Sets the &quot;absolute&quot; zero position of the motor to its current position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Continue<sp/>running<sp/>this<sp/>loop<sp/>as<sp/>long<sp/>as<sp/>the<sp/>motor<sp/>is<sp/>not<sp/>within<sp/>+-5<sp/>units<sp/>of<sp/>its<sp/>goal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>This<sp/>does<sp/>not<sp/>cause<sp/>a<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_tare_position(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_move_absolute(1,<sp/>100,<sp/>100);<sp/>//<sp/>Moves<sp/>100<sp/>units<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!((motor_get_position(1)<sp/>-<sp/>100<sp/>&lt;<sp/>105)<sp/>&amp;&amp;<sp/>(motor_get_position(1)<sp/>-<sp/>100<sp/>&gt;<sp/>95)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1074" column="9" declfile="pros/motors.h" declline="1074" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a7000cc1293b6eda984f01fa7282b38f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_brake_mode</definition>
        <argsstring>(int8_t port, const motor_brake_mode_e_t mode)</argsstring>
        <name>motor_set_brake_mode</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const motor_brake_mode_e_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Sets one of motor_brake_mode_e_t to the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The motor_brake_mode_e_t to set for the motor</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_brake_mode(1,<sp/>E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Brake<sp/>Mode:<sp/>%d\n&quot;,<sp/>motor_get_brake_mode(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1100" column="9" declfile="pros/motors.h" declline="1100" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a76d822bc8a190b5dc0c7db692cd50f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_current_limit</definition>
        <argsstring>(int8_t port, const int32_t limit)</argsstring>
        <name>motor_set_current_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Sets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new current limit in mA</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_current_limit(1,<sp/>1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>reduce<sp/>its<sp/>output<sp/>at<sp/>1000<sp/>mA<sp/>instead<sp/>of<sp/>the<sp/>default<sp/>2500<sp/>mA</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1130" column="9" declfile="pros/motors.h" declline="1130" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa73489a83d6cc6ef0ce0c7e54f4ed452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_encoder_units</definition>
        <argsstring>(int8_t port, const motor_encoder_units_e_t units)</argsstring>
        <name>motor_set_encoder_units</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const motor_encoder_units_e_t</type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Sets one of motor_encoder_units_e_t for the motor encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>units</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor encoder units</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_encoder_units(1,<sp/>E_MOTOR_ENCODER_DEGREES);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Encoder<sp/>Units:<sp/>%d\n&quot;,<sp/>motor_get_encoder_units(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1156" column="9" declfile="pros/motors.h" declline="1156" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a6be12015c137a6279f21199bd75913c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_gearing</definition>
        <argsstring>(int8_t port, const motor_gearset_e_t gearset)</argsstring>
        <name>motor_set_gearing</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const motor_gearset_e_t</type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Sets one of motor_gearset_e_t for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor gearset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_gearing(1,<sp/>E_MOTOR_GEARSET_06);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Brake<sp/>Mode:<sp/>%d\n&quot;,<sp/>motor_get_gearing(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1182" column="9" declfile="pros/motors.h" declline="1182" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aad01c082a5899e0ab42abdda37d3d425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_reversed</definition>
        <argsstring>(int8_t port, const bool reverse)</argsstring>
        <name>motor_set_reversed</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Sets the reverse flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This will invert its movements and the values returned for its position.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>True reverses the motor, false is default</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_reversed(1,<sp/>true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Is<sp/>this<sp/>motor<sp/>reversed?<sp/>%d\n&quot;,<sp/>motor_is_reversed(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1210" column="9" declfile="pros/motors.h" declline="1210" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1ac264f3c731cb5a1fcf8005dfa520c088" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_set_voltage_limit</definition>
        <argsstring>(int8_t port, const int32_t limit)</argsstring>
        <name>motor_set_voltage_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Sets the voltage limit for the motor in Volts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage limit in Volts</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>autonomous()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_voltage_limit(1,<sp/>10000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor_move(1,<sp/>controller_get_analog(E_CONTROLLER_MASTER,<sp/>E_CONTROLLER_ANALOG_LEFT_Y));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>The<sp/>motor<sp/>will<sp/>not<sp/>output<sp/>more<sp/>than<sp/>10<sp/>V</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1240" column="9" declfile="pros/motors.h" declline="1240" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a8beaf89dc810ff17908a6bc1056e81b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>motor_brake_mode_e_t</type>
        <definition>motor_brake_mode_e_t pros::c::motor_get_brake_mode</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_brake_mode</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of motor_brake_mode_e_t, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor_set_brake_mode(1,<sp/>E_MOTOR_BRAKE_HOLD);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Brake<sp/>Mode:<sp/>%d\n&quot;,<sp/>motor_get_brake_mode(1));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1264" column="22" declfile="pros/motors.h" declline="1264" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1afd59b63eed6e6f3e8d6a0e6bcd285302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_current_limit</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_current_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 2500 mA.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s current limit in mA or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Current<sp/>Limit:<sp/>%d\n&quot;,<sp/>motor_get_current_limit(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;Motor<sp/>Current<sp/>Limit:<sp/>2500&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1290" column="9" declfile="pros/motors.h" declline="1290" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1abf890e2b403938bcb0d0092b53877eb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>motor_encoder_units_e_t</type>
        <definition>motor_encoder_units_e_t pros::c::motor_get_encoder_units</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_encoder_units</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the encoder units that were set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of motor_encoder_units_e_t according to what is set for the motor or E_MOTOR_ENCODER_INVALID if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1306" column="25" declfile="pros/motors.h" declline="1306" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aed931b677d95aa05e203f4f19ffa1e56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>motor_gearset_e_t</type>
        <definition>motor_gearset_e_t pros::c::motor_get_gearing</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_gearing</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the gearset that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of motor_gearset_e_t according to what is set for the motor, or E_GEARSET_INVALID if the operation failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Encoder<sp/>Units:<sp/>%d\n&quot;,<sp/>motor_get_encoder_units(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>E_MOTOR_ENCODER_DEGREES<sp/>by<sp/>default</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1330" column="19" declfile="pros/motors.h" declline="1330" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1ad78caa8efd1b34a316037a036f1f2ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_is_reversed</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_is_reversed</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the operation direction of the motor as set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor has been reversed and 0 if the motor was not reversed, or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Is<sp/>the<sp/>motor<sp/>reversed?<sp/>%d\n&quot;,<sp/>motor_is_reversed(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>&quot;Is<sp/>the<sp/>motor<sp/>reversed?<sp/>0&quot;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1354" column="9" declfile="pros/motors.h" declline="1354" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a4249989376799f8c7f12b3ebccc8b494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::motor_get_voltage_limit</definition>
        <argsstring>(int8_t port)</argsstring>
        <name>motor_get_voltage_limit</name>
        <param>
          <type>int8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the voltage limit set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Default value is 0V, which means that there is no software limitation imposed on the voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 port number from 1-21</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s voltage limit in V or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Motor<sp/>Voltage<sp/>Limit:<sp/>%d\n&quot;,<sp/>motor_get_voltage_limit(1));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Prints<sp/>0<sp/>by<sp/>default,<sp/>indicating<sp/>no<sp/>limit</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/motors.h" line="1381" column="9" declfile="pros/motors.h" declline="1381" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for the V5 Motor-related functions.</para>
<para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/motors.html">https://pros.cs.purdue.edu/v5/tutorials/topical/motors.html</ulink> to learn more.</para>
<para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2023, Purdue University ACM SIGBots.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/motors.h"/>
  </compounddef>
</doxygen>
