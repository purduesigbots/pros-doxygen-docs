<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1adi_1_1AnalogIn" kind="class" language="C++" prot="public">
    <compoundname>pros::adi::AnalogIn</compoundname>
    <basecompoundref refid="classpros_1_1adi_1_1Port" prot="private" virt="non-virtual">Port</basecompoundref>
    <derivedcompoundref refid="classpros_1_1adi_1_1Potentiometer" prot="public" virt="non-virtual">Potentiometer</derivedcompoundref>
    <includes refid="adi_8hpp" local="yes">adi.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__cpp-adi_1gaa10478efbd65c2e3e591cc6c789f4625" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>AnalogIn</definition>
        <argsstring>(std::uint8_t adi_port)</argsstring>
        <name>AnalogIn</name>
        <param>
          <type>std::uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as an Analog Input. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::ADIAnalogIn<sp/>sensor<sp/>(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>the<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="233" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-adi_1gad2ca30654d82db920fc4ffe249c483b3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>AnalogIn</definition>
        <argsstring>(ext_adi_port_pair_t port_pair)</argsstring>
        <name>AnalogIn</name>
        <param>
          <type><ref refid="namespacepros_1_1adi_1aa8b90563c470741ebd760aeacfd90599" kindref="member">ext_adi_port_pair_t</ref></type>
          <declname>port_pair</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as an Analog Input. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>EXT_ADI_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_PORT<sp/>&apos;a&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::ADIAnalogIn<sp/>sensor<sp/>({{EXT_ADI_SMART_PORT,<sp/>ADI_PORT}});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>the<sp/>sensor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="262" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-adi_1ga2eb97b12f7be6fd44db629dcfe9a4fc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t calibrate</definition>
        <argsstring>() const</argsstring>
        <name>calibrate</name>
        <briefdescription>
<para>Calibrates the analog sensor on the specified port and returns the new calibration value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the pros::AnalogIn::get_value_calibrated() and pros::AnalogIn::get_value_calibrated_HR() functions. These functions will return the difference between this value and the current sensor value when called.</para>
<para>Do not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).</para>
<para><simplesect kind="note"><para>The ADI currently returns data at 10ms intervals, in contrast to the calibrate function’s 1ms sample rate. This sample rate was kept for the sake of being similar to PROS 2, and increasing the sample rate would not have a tangible difference in the function’s performance.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as an analog input</para>
<para><simplesect kind="return"><para>The average sensor value computed by this function</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::adi::AnalogIn<sp/>sensor<sp/>(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sensor.calibrate(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Calibrated<sp/>Reading:&quot;<sp/>&lt;&lt;<sp/>sensor.get_value_calibrated();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>readings<sp/>from<sp/>then<sp/>on<sp/>will<sp/>be<sp/>calibrated</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="303" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-adi_1ga074cb99ddc5bcf9b461c204a5a5fad2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value_calibrated</definition>
        <argsstring>() const</argsstring>
        <name>get_value_calibrated</name>
        <briefdescription>
<para>Gets the 12 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__cpp-adi_1ga2eb97b12f7be6fd44db629dcfe9a4fc4" kindref="member">pros::adi::AnalogIn::calibrate()</ref> function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use <ref refid="group__cpp-adi_1ga2d4a70c5c23555ddf8ea24318d7a8731" kindref="member">pros::adi::AnalogIn::get_value_calibrated_HR()</ref> instead.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as an analog input</para>
<para><simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -4095 to 4095</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::adi::AnalogIn<sp/>sensor<sp/>(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sensor.calibrate(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Calibrated<sp/>Reading:&quot;<sp/>&lt;&lt;<sp/>sensor.get_value_calibrated();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>readings<sp/>from<sp/>then<sp/>on<sp/>will<sp/>be<sp/>calibrated</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="332" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-adi_1ga2d4a70c5c23555ddf8ea24318d7a8731" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value_calibrated_HR</definition>
        <argsstring>() const</argsstring>
        <name>get_value_calibrated_HR</name>
        <briefdescription>
<para>Gets the 16 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__cpp-adi_1ga2eb97b12f7be6fd44db629dcfe9a4fc4" kindref="member">pros::adi::AnalogIn::calibrate()</ref> function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.</para>
<para>The value returned actually has 16 bits of &quot;precision&quot;, even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as an analog input</para>
<para><simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -16384 to</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::adi::AnalogIn<sp/>sensor<sp/>(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>sensor.calibrate(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Calibrated<sp/>Reading:&quot;<sp/>&lt;&lt;<sp/>sensor.get_value_calibrated();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>readings<sp/>from<sp/>then<sp/>on<sp/>will<sp/>be<sp/>calibrated</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="366" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1adi_1_1AnalogIn_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
<para>Reads an analog input channel and returns the 12-bit value. </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is undefined if the analog pin has been switched to a different mode. The meaning of the returned value varies depending on the sensor attached.</para>
<para>Inherited from ADIPort::get_value.</para>
<para>This function uses the following values of errno when an error state is reached: EADDRINUSE - The port is not configured as an analog input (e.g. the port has been reconfigured)</para>
<para><simplesect kind="return"><para>The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::adi::AnalogIn<sp/>sensor<sp/>(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Sensor<sp/>Reading:&quot;<sp/>&lt;&lt;<sp/>sensor.get_value();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="392" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="group__cpp-adi_1gac15ede10c493e1b889462524285829bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, pros::adi::AnalogIn &amp;analog_in)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="classpros_1_1adi_1_1AnalogIn" kindref="compound">pros::adi::AnalogIn</ref> &amp;</type>
          <declname>analog_in</declname>
        </param>
        <briefdescription>
<para>This is the overload for the &lt;&lt; operator for printing to streams. </para>
        </briefdescription>
        <detaileddescription>
<para>Prints in format(this below is all in one line with no new line): <ref refid="classpros_1_1adi_1_1AnalogIn" kindref="compound">AnalogIn</ref> [smart_port: analog_in._smart_port, adi_port: analog_in._adi_port, value calibrated: (12 bit calibrated value), value calibrated HR: (16 bit calibrated value), value: (12 bit value)] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="402" column="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>AnalogIn</label>
        <link refid="classpros_1_1adi_1_1AnalogIn"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>Potentiometer</label>
        <link refid="classpros_1_1adi_1_1Potentiometer"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Port</label>
        <link refid="classpros_1_1adi_1_1Port"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>AnalogIn</label>
        <link refid="classpros_1_1adi_1_1AnalogIn"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Port</label>
        <link refid="classpros_1_1adi_1_1Port"/>
      </node>
    </collaborationgraph>
    <location file="pros/adi.hpp" line="201" column="28" bodyfile="pros/adi.hpp" bodystart="201" bodyend="403"/>
    <listofallmembers>
      <member refid="group__cpp-adi_1gaa10478efbd65c2e3e591cc6c789f4625" prot="public" virt="non-virtual"><scope>pros::adi::AnalogIn</scope><name>AnalogIn</name></member>
      <member refid="group__cpp-adi_1gad2ca30654d82db920fc4ffe249c483b3" prot="public" virt="non-virtual"><scope>pros::adi::AnalogIn</scope><name>AnalogIn</name></member>
      <member refid="group__cpp-adi_1ga2eb97b12f7be6fd44db629dcfe9a4fc4" prot="public" virt="non-virtual"><scope>pros::adi::AnalogIn</scope><name>calibrate</name></member>
      <member refid="classpros_1_1adi_1_1AnalogIn_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" virt="non-virtual"><scope>pros::adi::AnalogIn</scope><name>get_value</name></member>
      <member refid="group__cpp-adi_1ga60987c8e4946650cf9aa40f8e8345f01" prot="private" virt="non-virtual" ambiguityscope="pros::adi::Port::"><scope>pros::adi::AnalogIn</scope><name>get_value</name></member>
      <member refid="group__cpp-adi_1ga074cb99ddc5bcf9b461c204a5a5fad2c" prot="public" virt="non-virtual"><scope>pros::adi::AnalogIn</scope><name>get_value_calibrated</name></member>
      <member refid="group__cpp-adi_1ga2d4a70c5c23555ddf8ea24318d7a8731" prot="public" virt="non-virtual"><scope>pros::adi::AnalogIn</scope><name>get_value_calibrated_HR</name></member>
      <member refid="group__cpp-adi_1gac15ede10c493e1b889462524285829bc" prot="public" virt="non-virtual"><scope>pros::adi::AnalogIn</scope><name>operator&lt;&lt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
