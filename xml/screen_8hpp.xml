<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="screen_8hpp" kind="file" language="C++">
    <compoundname>screen.hpp</compoundname>
    <includes refid="screen_8h" local="yes">pros/screen.h</includes>
    <includes refid="colors_8hpp" local="yes">pros/colors.hpp</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">string</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>pros/screen.h</label>
        <link refid="screen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>pros/colors.hpp</label>
        <link refid="colors_8hpp"/>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>pros/screen.hpp</label>
        <link refid="screen_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="7">
        <label>pros/colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="6">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="1">
        <label>pros/screen.hpp</label>
        <link refid="screen_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1screen">pros::screen</innernamespace>
    <innernamespace refid="namespacepros_1_1lcd">pros::lcd</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__cpp-screen_1gafa86afc6491531fb4b4d7f1e18803852" prot="public" static="no">
        <name>LCD_BTN_LEFT</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Displays a formatted string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call lcd_initialize() first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="496" column="13" bodyfile="pros/screen.hpp" bodystart="496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__cpp-screen_1gabf8903693b4a95a6b653916d5f6fe486" prot="public" static="no">
        <name>LCD_BTN_CENTER</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="500" column="13" bodyfile="pros/screen.hpp" bodystart="500" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__cpp-screen_1ga7851ef3eb7573b194efb0a05d88f2c35" prot="public" static="no">
        <name>LCD_BTN_RIGHT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="504" column="13" bodyfile="pros/screen.hpp" bodystart="504" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__cpp-screen_1ga22ffa85cc6287c5c366fe0cb2416e28a" prot="public" static="no">
        <type>void(*)(void)</type>
        <definition>using lcd_btn_cb_fn_t =  void (*)(void)</definition>
        <argsstring></argsstring>
        <name>lcd_btn_cb_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="403" column="3" bodyfile="pros/screen.hpp" bodystart="403" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-screen_1ga35e9a03f7c633dd5fabc8c5dff91a9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_pen</definition>
        <argsstring>(pros::Color color)</argsstring>
        <name>set_pen</name>
        <param>
          <type><ref refid="namespacepros_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">pros::Color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Screen Graphical Display Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to display shapes on the <ref refid="namespacepros_1_1v5" kindref="compound">v5</ref> screen <linebreak/>
 Set the pen color for subsequent graphics operations</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The pen color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="72" column="19" declfile="pros/screen.hpp" declline="72" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gaf675ab41bd5a23c76ebc0ea060311d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_eraser</definition>
        <argsstring>(pros::Color color)</argsstring>
        <name>set_eraser</name>
        <param>
          <type><ref refid="namespacepros_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">pros::Color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the eraser color for erasing and the current background. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The background color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="87" column="19" declfile="pros/screen.hpp" declline="87" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga16f5bad9cbd8aaf1de2f747bf4c88139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::get_pen</definition>
        <argsstring>()</argsstring>
        <name>get_pen</name>
        <briefdescription>
<para>Get the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current pen color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="100" column="19" declfile="pros/screen.hpp" declline="100" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gac589639dcad1320da01239fa2ee91895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::get_eraser</definition>
        <argsstring>()</argsstring>
        <name>get_eraser</name>
        <briefdescription>
<para>Get the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current eraser color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="113" column="19" declfile="pros/screen.hpp" declline="113" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gaddc37523f02666234b4f87dd5683f2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase</definition>
        <argsstring>()</argsstring>
        <name>erase</name>
        <briefdescription>
<para>Clear display with eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="125" column="19" declfile="pros/screen.hpp" declline="125" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gada1288989c095a51803f3c3ec32f63de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::scroll</definition>
        <argsstring>(const std::int16_t start_line, const std::int16_t lines)</argsstring>
        <name>scroll</name>
        <param>
          <type>const std::int16_t</type>
          <declname>start_line</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines on the display upwards. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line from which scrolling will start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll up</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="140" column="19" declfile="pros/screen.hpp" declline="140" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga54598658b4962091f0dd30474d3c579f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::scroll_area</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1, std::int16_t lines)</argsstring>
        <name>scroll_area</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>std::int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines within a region on the display. </para>
        </briefdescription>
        <detaileddescription>
<para>This function behaves in the same way as <computeroutput>screen_scroll</computeroutput>, except that you specify a rectangular region within which to scroll lines instead of a start line.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll upwards</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="162" column="19" declfile="pros/screen.hpp" declline="162" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gac8b195fde29a483de7fe34156067a92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::copy_area</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1, uint32_t *buf, const std::int32_t stride)</argsstring>
        <name>copy_area</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Copy a screen region (designated by a rectangle) from an off-screen buffer to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer containing screen data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer width in pixels, such that image size is stride-padding</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="183" column="19" declfile="pros/screen.hpp" declline="183" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga5d4493bbada5ff871a44461f0bc71a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_pixel</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y)</argsstring>
        <name>draw_pixel</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Draw a single pixel on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the pixel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="197" column="19" declfile="pros/screen.hpp" declline="197" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gad0a321bd81d028d75feec7f6c1c13e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_pixel</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y)</argsstring>
        <name>erase_pixel</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Erase a pixel from the screen (Sets the location) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the erased</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="211" column="19" declfile="pros/screen.hpp" declline="211" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gae3bef1694428c775fd6dce977cbfa87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_line</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>draw_line</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a line on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="226" column="19" declfile="pros/screen.hpp" declline="226" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga22c2c2ac7ffe36b2946052170c526e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_line</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>erase_line</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a line on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="241" column="19" declfile="pros/screen.hpp" declline="241" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga02af0ec1e3430efbb5b66c4cfe92b735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>draw_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a rectangle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="256" column="19" declfile="pros/screen.hpp" declline="256" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga22199222d41fd80c81799fafe3fbec4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>erase_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a rectangle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="271" column="19" declfile="pros/screen.hpp" declline="271" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga596ee2c64e8d5cb8abcdab741490b884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::fill_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>fill_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Fill a rectangular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="287" column="19" declfile="pros/screen.hpp" declline="287" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga53c5922a466814315bf0c0150838b799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>draw_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Draw a circle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="302" column="19" declfile="pros/screen.hpp" declline="302" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga3ab31a7257cb0d6d0fb776703b17ede3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>erase_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Erase a circle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="317" column="19" declfile="pros/screen.hpp" declline="317" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga7037d11afb655cb5e2d7547d94c5f91a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::fill_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>fill_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Fill a circular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="333" column="19" declfile="pros/screen.hpp" declline="333" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga934a573ccd12290a30af83fbd7ba1140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pros::screen::print</definition>
        <argsstring>(pros::text_format_e_t txt_fmt, const std::int16_t line, const char *text, Params... args)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">pros::text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Screen Text Display Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to display text on the <ref refid="namespacepros_1_1v5" kindref="compound">v5</ref> screen <linebreak/>
 Print a formatted string to the screen, overwrite available for printing at location too.</para>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number on which to print </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="354" column="10" bodyfile="pros/screen.hpp" bodystart="354" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gabca8d131b3c02dc5806c15e3f3f32bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pros::screen::print</definition>
        <argsstring>(pros::text_format_e_t txt_fmt, const std::int16_t x, const std::int16_t y, const char *text, Params... args)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">pros::text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="359" column="10" bodyfile="pros/screen.hpp" bodystart="359" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga4e473df306276304a64218f5cb1afad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structscreen__touch__status__s__t" kindref="compound">screen_touch_status_s_t</ref></type>
        <definition>screen_touch_status_s_t pros::screen::touch_status</definition>
        <argsstring>()</argsstring>
        <name>touch_status</name>
        <briefdescription>
<para>Screen Touch Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to access <linebreak/>
 information about screen touches <linebreak/>
 Gets the touch status of the last touch of the screen.</para>
<para><simplesect kind="return"><para>The last_touch_e_t enum specifier that indicates the last touch status of the screen (E_TOUCH_EVENT_RELEASE, E_TOUCH_EVENT_PRESS, or E_TOUCH_EVENT_PRESS_AND_HOLD). This will be released by default if no action was taken. If an error occured, the <ref refid="structscreen__touch__status__s__t" kindref="compound">screen_touch_status_s_t</ref> will have its last_touch_e_t enum specifier set to E_TOUCH_ERR, and other values set to -1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="378" column="29" declfile="pros/screen.hpp" declline="378" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga8493a48e858cba5e4aa28f6889a79f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::touch_callback</definition>
        <argsstring>(touch_event_cb_fn_t cb, last_touch_e_t event_type)</argsstring>
        <name>touch_callback</name>
        <param>
          <type>touch_event_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>last_touch_e_t</type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
<para>Assigns a callback function to be called when a certain touch event happens. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer to callback when event type happens </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Touch event that will trigger the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="393" column="19" declfile="pros/screen.hpp" declline="393" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga9ad5209075696f6a8c4576179d8b1be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__attribute__((weak)) bool set_text(std __attribute__((weak)) bool clear_line(std</type>
        <definition>__attribute__</definition>
        <argsstring>((weak)) bool initialize(void)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(weak)</type>
        </param>
        <briefdescription>
<para>Displays a string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets the button status from the emulated three-button LCD.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call lcd_initialize() first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text to display</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above. Clears the contents of a line of the emulated three-button LCD screen.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call lcd_initialize() first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above. Creates an emulation of the three-button, UART-based VEX LCD on the display.</para>
</simplesect>
<simplesect kind="return"><para>True if the LCD was successfully initialized, or false if it has already been initialized.</para>
</simplesect>
The value returned is a 3-bit integer where 1 0 0 indicates the left button is pressed, 0 1 0 indicates the center button is pressed, and 0 0 1 indicates the right button is pressed. 0 is returned if no buttons are currently being pressed.</para>
<para>Note that this function is provided for legacy API compatibility purposes, with the caveat that the V5 touch screen does not actually support pressing multiple points on the screen at the same time.</para>
<para><simplesect kind="return"><para>The buttons pressed as a bit mask Registers a callback function for the rightmost button.</para>
</simplesect>
When the rightmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t(void (*cb)(void)) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="445" column="10" bodyfile="pros/screen.hpp" bodystart="509" bodyend="509" declfile="pros/screen.hpp" declline="445" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga9ad5209075696f6a8c4576179d8b1be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((weak)) void lvgl_init()</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(weak)</type>
        </param>
        <briefdescription>
<para>Displays a string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>Gets the button status from the emulated three-button LCD.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call lcd_initialize() first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>The text to display</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above. Clears the contents of a line of the emulated three-button LCD screen.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call lcd_initialize() first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above. Creates an emulation of the three-button, UART-based VEX LCD on the display.</para>
</simplesect>
<simplesect kind="return"><para>True if the LCD was successfully initialized, or false if it has already been initialized.</para>
</simplesect>
The value returned is a 3-bit integer where 1 0 0 indicates the left button is pressed, 0 1 0 indicates the center button is pressed, and 0 0 1 indicates the right button is pressed. 0 is returned if no buttons are currently being pressed.</para>
<para>Note that this function is provided for legacy API compatibility purposes, with the caveat that the V5 touch screen does not actually support pressing multiple points on the screen at the same time.</para>
<para><simplesect kind="return"><para>The buttons pressed as a bit mask Registers a callback function for the rightmost button.</para>
</simplesect>
When the rightmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t(void (*cb)(void)) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="509" column="8" bodyfile="pros/screen.hpp" bodystart="509" bodyend="509"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Brain screen display and touch functions.</para>
<para>Contains user calls to the v5 screen for touching and displaying graphics.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2023, Purdue University ACM SIGBots.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/screen.hpp"/>
  </compounddef>
</doxygen>
