<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="screen_8hpp" kind="file" language="C++">
    <compoundname>screen.hpp</compoundname>
    <includes refid="screen_8h" local="yes">pros/screen.h</includes>
    <includes refid="colors_8hpp" local="yes">pros/colors.hpp</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">string</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>pros/screen.h</label>
        <link refid="screen_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="8">
        <label>pros/colors.hpp</label>
        <link refid="colors_8hpp"/>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>pros/screen.hpp</label>
        <link refid="screen_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="7">
        <label>pros/colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="1">
        <label>pros/screen.hpp</label>
        <link refid="screen_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1screen">pros::screen</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-screen_1ga35e9a03f7c633dd5fabc8c5dff91a9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_pen</definition>
        <argsstring>(pros::Color color)</argsstring>
        <name>set_pen</name>
        <param>
          <type><ref refid="namespacepros_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">pros::Color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Screen Graphical Display Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to display shapes on the <ref refid="namespacepros_1_1v5" kindref="compound">v5</ref> screen <linebreak/>
 Set the pen color for subsequent graphics operations</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The pen color to set (it is recommended to use values from the enum defined in <ref refid="colors_8hpp" kindref="compound">colors.hpp</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="80" column="19" declfile="pros/screen.hpp" declline="80" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga4ed69aedba2817fe21fe710ff190fc8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_pen</definition>
        <argsstring>(std::uint32_t color)</argsstring>
        <name>set_pen</name>
        <param>
          <type>std::uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the pen color for subsequent graphics operations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The pen color to set (in hex form)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//set<sp/>pen<sp/>color<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(0x00FF0000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="103" column="19" declfile="pros/screen.hpp" declline="103" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gaf675ab41bd5a23c76ebc0ea060311d88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_eraser</definition>
        <argsstring>(pros::Color color)</argsstring>
        <name>set_eraser</name>
        <param>
          <type><ref refid="namespacepros_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">pros::Color</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the eraser color for erasing and the current background. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The background color to set (it is recommended to use values from the enum defined in <ref refid="colors_8hpp" kindref="compound">colors.hpp</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//set<sp/>eraser<sp/>color<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_eraser(red);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="127" column="19" declfile="pros/screen.hpp" declline="127" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gac818c20d7c748be206c5825a4fbcb34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::set_eraser</definition>
        <argsstring>(std::uint32_t color)</argsstring>
        <name>set_eraser</name>
        <param>
          <type>std::uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the eraser color for erasing and the current background. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The background color to set to set (in hex form)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//set<sp/>eraser<sp/>color<sp/>to<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_eraser(0x00FF0000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="150" column="19" declfile="pros/screen.hpp" declline="150" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga16f5bad9cbd8aaf1de2f747bf4c88139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::get_pen</definition>
        <argsstring>()</argsstring>
        <name>get_pen</name>
        <briefdescription>
<para>Get the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current pen color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Should<sp/>print<sp/>number<sp/>equivalent<sp/>to<sp/>red<sp/>defined<sp/>in<sp/>colors.hpp.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>get_pen());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="177" column="19" declfile="pros/screen.hpp" declline="177" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gac589639dcad1320da01239fa2ee91895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::get_eraser</definition>
        <argsstring>()</argsstring>
        <name>get_eraser</name>
        <briefdescription>
<para>Get the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current eraser color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_eraser(red);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Should<sp/>print<sp/>number<sp/>equivalent<sp/>to<sp/>red<sp/>defined<sp/>in<sp/>colors.h.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>get_eraser());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="204" column="19" declfile="pros/screen.hpp" declline="204" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gaddc37523f02666234b4f87dd5683f2de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase</definition>
        <argsstring>()</argsstring>
        <name>erase</name>
        <briefdescription>
<para>Clear display with eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<itemizedlist>
<listitem><para><bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_eraser(red);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>turn<sp/>the<sp/>screen<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>erase();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="230" column="19" declfile="pros/screen.hpp" declline="230" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gada1288989c095a51803f3c3ec32f63de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::scroll</definition>
        <argsstring>(const std::int16_t start_line, const std::int16_t lines)</argsstring>
        <name>scroll</name>
        <param>
          <type>const std::int16_t</type>
          <declname>start_line</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines on the display upwards. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line from which scrolling will start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll up</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(TEXT_MEDIUM,<sp/>4,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Scroll<sp/>3<sp/>lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scroll(4,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="254" column="19" declfile="pros/screen.hpp" declline="254" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga54598658b4962091f0dd30474d3c579f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::scroll_area</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1, std::int16_t lines)</argsstring>
        <name>scroll_area</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>std::int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines within a region on the display. </para>
        </briefdescription>
        <detaileddescription>
<para>This function behaves in the same way as <computeroutput>screen_scroll</computeroutput>, except that you specify a rectangular region within which to scroll lines instead of a start line.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll upwards</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Scrolls<sp/>area<sp/>of<sp/>screen<sp/>upwards<sp/>slightly.<sp/>including<sp/>line<sp/>of<sp/>text</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>scroll_area(0,0,<sp/>400,<sp/>200,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="285" column="19" declfile="pros/screen.hpp" declline="285" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gac8b195fde29a483de7fe34156067a92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::copy_area</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1, uint32_t *buf, const std::int32_t stride)</argsstring>
        <name>copy_area</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::int32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Copy a screen region (designated by a rectangle) from an off-screen buffer to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer containing screen data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer width in pixels, such that image size is stride-padding</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t*<sp/>buf<sp/>=<sp/>malloc(sizeof(uint32_t)<sp/>*<sp/>400<sp/>*<sp/>200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Copies<sp/>area<sp/>of<sp/>the<sp/>screen<sp/>including<sp/>text</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>copy_area(0,<sp/>0,<sp/>400,<sp/>200,<sp/>(uint32_t*)buf,<sp/>400<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Equation<sp/>for<sp/>stride<sp/>is<sp/>x2<sp/>-<sp/>x1<sp/>+<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="317" column="19" declfile="pros/screen.hpp" declline="317" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga5d4493bbada5ff871a44461f0bc71a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_pixel</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y)</argsstring>
        <name>draw_pixel</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Draw a single pixel on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the pixel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(i<sp/>&lt;<sp/>200){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>draw_pixel(100,i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Draws<sp/>a<sp/>line<sp/>at<sp/>x<sp/>=<sp/>100<sp/>gradually<sp/>down<sp/>the<sp/>screen,<sp/>pixel<sp/>by<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="343" column="19" declfile="pros/screen.hpp" declline="343" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gad0a321bd81d028d75feec7f6c1c13e49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_pixel</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y)</argsstring>
        <name>erase_pixel</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Erase a pixel from the screen (Sets the location) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the erased</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Color<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fill_rect(0,0,400,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(i<sp/>&lt;<sp/>200){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>erase_pixel(100,i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Erases<sp/>a<sp/>line<sp/>at<sp/>x<sp/>=<sp/>100<sp/>gradually<sp/>down<sp/>the<sp/>screen,<sp/>pixel<sp/>by<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="372" column="19" declfile="pros/screen.hpp" declline="372" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gae3bef1694428c775fd6dce977cbfa87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_line</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>draw_line</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a line on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>line<sp/>down<sp/>the<sp/>screen<sp/>at<sp/>x<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>draw_line(100,0,100,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="396" column="19" declfile="pros/screen.hpp" declline="396" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga22c2c2ac7ffe36b2946052170c526e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_line</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>erase_line</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a line on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Color<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fill_rect(0,0,400,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Erase<sp/>line<sp/>down<sp/>the<sp/>screen<sp/>at<sp/>x<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>erase_line(100,0,100,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="422" column="19" declfile="pros/screen.hpp" declline="422" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga02af0ec1e3430efbb5b66c4cfe92b735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>draw_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a rectangle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>draw_rect(1,1,480,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="445" column="19" declfile="pros/screen.hpp" declline="445" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga22199222d41fd80c81799fafe3fbec4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>erase_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a rectangle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>Box<sp/>Around<sp/>Half<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_eraser(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>erase_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="469" column="19" declfile="pros/screen.hpp" declline="469" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga596ee2c64e8d5cb8abcdab741490b884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::fill_rect</definition>
        <argsstring>(const std::int16_t x0, const std::int16_t y0, const std::int16_t x1, const std::int16_t y1)</argsstring>
        <name>fill_rect</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Fill a rectangular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Fill<sp/>Around<sp/>Half<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="494" column="19" declfile="pros/screen.hpp" declline="494" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga53c5922a466814315bf0c0150838b799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::draw_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>draw_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Draw a circle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>a<sp/>circle<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>draw_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="518" column="19" declfile="pros/screen.hpp" declline="518" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga3ab31a7257cb0d6d0fb776703b17ede3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::erase_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>erase_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Erase a circle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Erase<sp/>a<sp/>circle<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>blue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>set_pen(blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>erase_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="544" column="19" declfile="pros/screen.hpp" declline="544" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga7037d11afb655cb5e2d7547d94c5f91a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::fill_circle</definition>
        <argsstring>(const std::int16_t x, const std::int16_t y, const std::int16_t radius)</argsstring>
        <name>fill_circle</name>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Fill a circular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>set_pen(red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>//<sp/>Fill<sp/>a<sp/>circlular<sp/>area<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>blue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>set_pen(blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>fill_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/>}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="571" column="19" declfile="pros/screen.hpp" declline="571" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga934a573ccd12290a30af83fbd7ba1140" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pros::screen::print</definition>
        <argsstring>(pros::text_format_e_t txt_fmt, const std::int16_t line, const char *text, Params... args)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">pros::text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Screen Text Display Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to display text on the <ref refid="namespacepros_1_1v5" kindref="compound">v5</ref> screen <linebreak/>
 Print a formatted string to the screen, overwrite available for printing at location too.</para>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number on which to print </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="592" column="10" bodyfile="pros/screen.hpp" bodystart="592" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1gabca8d131b3c02dc5806c15e3f3f32bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pros::screen::print</definition>
        <argsstring>(pros::text_format_e_t txt_fmt, const std::int16_t x, const std::int16_t y, const char *text, Params... args)</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="group__c-screen_1ga1793008155ca135d61e68f63e1a77e0f" kindref="member">pros::text_format_e_t</ref></type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const std::int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="597" column="10" bodyfile="pros/screen.hpp" bodystart="597" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga4e473df306276304a64218f5cb1afad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structscreen__touch__status__s__t" kindref="compound">screen_touch_status_s_t</ref></type>
        <definition>screen_touch_status_s_t pros::screen::touch_status</definition>
        <argsstring>()</argsstring>
        <name>touch_status</name>
        <briefdescription>
<para>Screen Touch Functions <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>These functions allow programmers to access <linebreak/>
 information about screen touches <linebreak/>
 Gets the touch status of the last touch of the screen.</para>
<para><simplesect kind="return"><para>The last_touch_e_t enum specifier that indicates the last touch status of the screen (E_TOUCH_EVENT_RELEASE, E_TOUCH_EVENT_PRESS, or E_TOUCH_EVENT_PRESS_AND_HOLD). This will be released by default if no action was taken. If an error occured, the <ref refid="structscreen__touch__status__s__t" kindref="compound">screen_touch_status_s_t</ref> will have its last_touch_e_t enum specifier set to E_TOUCH_ERR, and other values set to -1.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_status_s_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>touch_status();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>print<sp/>various<sp/>information<sp/>about<sp/>the<sp/>last<sp/>touch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Touch<sp/>Status<sp/>(Type):<sp/>%d&quot;,<sp/>status.touch_status);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(TEXT_MEDIUM,<sp/>2,<sp/>&quot;Last<sp/>X:<sp/>%d&quot;,<sp/>status.x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(TEXT_MEDIUM,<sp/>3,<sp/>&quot;Last<sp/>Y:<sp/>%d&quot;,<sp/>status.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(TEXT_MEDIUM,<sp/>4,<sp/>&quot;Press<sp/>Count:<sp/>%d&quot;,<sp/>status.press_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>print(TEXT_MEDIUM,<sp/>5,<sp/>&quot;Release<sp/>Count:<sp/>%d&quot;,<sp/>status.release_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="635" column="29" declfile="pros/screen.hpp" declline="635" declcolumn="29"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-screen_1ga8493a48e858cba5e4aa28f6889a79f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint32_t</type>
        <definition>std::uint32_t pros::screen::touch_callback</definition>
        <argsstring>(touch_event_cb_fn_t cb, last_touch_e_t event_type)</argsstring>
        <name>touch_callback</name>
        <param>
          <type>touch_event_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>last_touch_e_t</type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
<para>Assigns a callback function to be called when a certain touch event happens. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer to callback when event type happens </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Touch event that will trigger the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">touch_event_cb_fn_t<sp/>changePixel(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_status_s_t<sp/>status<sp/>=<sp/>touch_status();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>draw_pixel(status.x,status.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>touch_callback(changePixel(),<sp/>TOUCH_PRESSED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="664" column="19" declfile="pros/screen.hpp" declline="664" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="screen_8hpp_1ac6dd2800b8464c33cb5f27414dbd3542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((weak)) void lvgl_init()</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(weak)</type>
        </param>
        <briefdescription>
<para>Displays a formatted string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The LCD has not been initialized. Call lcd_initialize() first. EINVAL - The line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.hpp" line="671" column="8" bodyfile="pros/screen.hpp" bodystart="671" bodyend="671"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Brain screen display and touch functions.</para>
<para>Contains user calls to the v5 screen for touching and displaying graphics.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2023, Purdue University ACM SIGBots.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/screen.hpp"/>
  </compounddef>
</doxygen>
