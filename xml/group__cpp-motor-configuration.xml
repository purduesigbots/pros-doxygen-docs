<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-motor-configuration" kind="group">
    <compoundname>Cpp-motor-configuration</compoundname>
    <title>Cpp-motor-configuration</title>
      <sectiondef kind="user-defined">
      <header>Motor configuration functions</header>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gade22ea34dd96df6ab9854165830d39d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>MotorBrake</type>
        <definition>virtual MotorBrake get_brake_mode</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_brake_mode</name>
        <reimplementedby refid="group__cpp-motors_1gadf652674fea330ff6bbfc9baff2e675f">get_brake_mode</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gadf652674fea330ff6bbfc9baff2e675f">get_brake_mode</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="765" column="20"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gab4364c7a9b4e20b94ab12b2f22246fdb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; MotorBrake &gt;</type>
        <definition>virtual std::vector&lt;MotorBrake&gt; get_brake_mode_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_brake_mode_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gadd375dd8056a2041c97b8417e7737da3">get_brake_mode_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gadd375dd8056a2041c97b8417e7737da3">get_brake_mode_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the brake mode(s) that was set for the motor(s). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing MotorBrake(s), according to what was set for the motor(s), or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="781" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga6563b486ecfc73a5b35c5b30437979d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_current_limit</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_current_limit</name>
        <reimplementedby refid="group__cpp-motors_1gab00008e6352a854891e9a50bf7b6ef2d">get_current_limit</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gab00008e6352a854891e9a50bf7b6ef2d">get_current_limit</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 2500 mA.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s current limit in mA or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="799" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga15aac288a9d1fcf3f687c68fb2294e76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; get_current_limit_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_current_limit_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gaf3b5722e5212806e17e09cd494f9257d">get_current_limit_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gaf3b5722e5212806e17e09cd494f9257d">get_current_limit_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the current limit(s) for the motor(s) in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>The default value is 2500 mA.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; current limit(s) in mA or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="817" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gafcb73293e651a8af5796054ae42a56bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>MotorUnits</type>
        <definition>virtual MotorUnits get_encoder_units</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_encoder_units</name>
        <reimplementedby refid="group__cpp-motors_1ga3a47d55467ca4af2473d90af1db36fad">get_encoder_units</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga3a47d55467ca4af2473d90af1db36fad">get_encoder_units</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the encoder units that were set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorUnits according to what is set for the motor or E_MOTOR_ENCODER_INVALID if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="833" column="20"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gae4e69deb0d1fe205ad9fa32f52e0335a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; MotorUnits &gt;</type>
        <definition>virtual std::vector&lt;MotorUnits&gt; get_encoder_units_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_encoder_units_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga5055ff527d1c4cf30164fbdae2f1560a">get_encoder_units_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga5055ff527d1c4cf30164fbdae2f1560a">get_encoder_units_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the encoder units that were set for the motor(s). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of MotorUnits according to what is set for the motor(s) or E_MOTOR_ENCODER_INVALID if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="849" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gafd5fce4147f0d9963068ec4223c7876f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>MotorGears</type>
        <definition>virtual MotorGears get_gearing</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_gearing</name>
        <reimplementedby refid="group__cpp-motors_1gada5083bdc60916061ffa826b233a3ba9">get_gearing</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gada5083bdc60916061ffa826b233a3ba9">get_gearing</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the gearset that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorGears according to what is set for the motor, or pros::MotorGears::invalid if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="865" column="20"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga46a6d4b33d86527abe7a4987284edaec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; MotorGears &gt;</type>
        <definition>virtual std::vector&lt;MotorGears&gt; get_gearing_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_gearing_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gae1f58609144579efead285d9880b959e">get_gearing_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gae1f58609144579efead285d9880b959e">get_gearing_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the gearset(s) that was/were set for the motor(s). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of MotorGears according to what is set for the motor(s), or pros::MotorGears::invalid if the operation failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="881" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gadbc5b5c32118443c8774c7f68b1c51f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int8_t &gt;</type>
        <definition>virtual std::vector&lt;std::int8_t&gt; get_port_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_port_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gabb8fbae09af6fc2c53b252cab49a824e">get_port_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gabb8fbae09af6fc2c53b252cab49a824e">get_port_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets returns a vector with all the port numbers in the motor group. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;std::int8_t&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="888" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga0c8735d6e1accc21e975f8ab8e0e9a70" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t get_voltage_limit</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_voltage_limit</name>
        <reimplementedby refid="group__cpp-motors_1ga798ae5447a497e51951b95dac07ac68f">get_voltage_limit</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga798ae5447a497e51951b95dac07ac68f">get_voltage_limit</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the voltage limit set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Default value is 0V, which means that there is no software limitation imposed on the voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The motor&apos;s voltage limit in V or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="907" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga5b86240615e21b03cbf7f6e1191bba76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; get_voltage_limit_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>get_voltage_limit_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga8c6ed4e656b519480604985a03c3725b">get_voltage_limit_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga8c6ed4e656b519480604985a03c3725b">get_voltage_limit_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the voltage limit(s) set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>Default value is 0V, which means that there is no software limitation imposed on the voltage.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector containing the motor&apos;s/motors&apos; voltage limit(s) in V or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="926" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gab3c3c1ff5b5ebcf74a3d13ba8d73dede" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t is_reversed</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>is_reversed</name>
        <reimplementedby refid="group__cpp-motors_1ga88841073df6383bee62f970541dc5b9c">is_reversed</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga88841073df6383bee62f970541dc5b9c">is_reversed</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the operation direction of the motor as set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor has been reversed and 0 if the motor was not reversed, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="942" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gae521d5c43eb13a9d3b29f99ff80cee15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::vector&lt; std::int32_t &gt;</type>
        <definition>virtual std::vector&lt;std::int32_t&gt; is_reversed_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>is_reversed_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga82538aeb3dbc63bca7f9f1f90bdb5ab2">is_reversed_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga82538aeb3dbc63bca7f9f1f90bdb5ab2">is_reversed_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets a vector of the operation direction(s) of the motor(s) as set by the user. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the motor has been reversed and 0 if the motor was not reversed, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="958" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gab3c69370324f5fa215bbc9d4d6e9f41f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_brake_mode</definition>
        <argsstring>(const MotorBrake mode, const std::uint8_t index=0) const =0</argsstring>
        <name>set_brake_mode</name>
        <reimplementedby refid="group__cpp-motors_1gafb95b9ca6edbf9ac13e860909394085e">set_brake_mode</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gafb95b9ca6edbf9ac13e860909394085e">set_brake_mode</reimplementedby>
        <param>
          <type>const MotorBrake</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets one of MotorBrake to the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Works with the C enum and the C++ enum class.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>The MotorBrake to set for the motor</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="978" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gaea2665b2059ac4f0009160a97a102e83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_brake_mode</definition>
        <argsstring>(const pros::motor_brake_mode_e_t mode, const std::uint8_t index=0) const =0</argsstring>
        <name>set_brake_mode</name>
        <reimplementedby refid="group__cpp-motors_1ga1df8e0da3792c8475d3b1bd21924f3f6">set_brake_mode</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga1df8e0da3792c8475d3b1bd21924f3f6">set_brake_mode</reimplementedby>
        <param>
          <type>const pros::motor_brake_mode_e_t</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="979" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga817e7922f8bd29d6686bce19ae6b73f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_brake_mode_all</definition>
        <argsstring>(const MotorBrake mode) const =0</argsstring>
        <name>set_brake_mode_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga3512ed634c47aae498bef221973c32f0">set_brake_mode_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga3512ed634c47aae498bef221973c32f0">set_brake_mode_all</reimplementedby>
        <param>
          <type>const MotorBrake</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="980" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gac93fc14ee73c629a40257228f6290252" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_brake_mode_all</definition>
        <argsstring>(const pros::motor_brake_mode_e_t mode) const =0</argsstring>
        <name>set_brake_mode_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga966b7d1c4fac6aa7371ca961675e909b">set_brake_mode_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga966b7d1c4fac6aa7371ca961675e909b">set_brake_mode_all</reimplementedby>
        <param>
          <type>const pros::motor_brake_mode_e_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="981" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gaae38590659cdc1d30468d94d467ff757" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_current_limit</definition>
        <argsstring>(const std::int32_t limit, const std::uint8_t index=0) const =0</argsstring>
        <name>set_current_limit</name>
        <reimplementedby refid="group__cpp-motors_1ga8aad53c0ac8af0b5af38b95aef627d53">set_current_limit</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga8aad53c0ac8af0b5af38b95aef627d53">set_current_limit</reimplementedby>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the current limit for the motor in mA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new current limit in mA</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="999" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gaca95a81f1a66dd884cc6315b02cc3400" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_current_limit_all</definition>
        <argsstring>(const std::int32_t limit) const =0</argsstring>
        <name>set_current_limit_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gabbbab97ee782806164d4bab7bc150447">set_current_limit_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gabbbab97ee782806164d4bab7bc150447">set_current_limit_all</reimplementedby>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1000" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga5ce52a70e74b5cc2369629e8cfa4ef17" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_encoder_units</definition>
        <argsstring>(const MotorUnits units, const std::uint8_t index=0) const =0</argsstring>
        <name>set_encoder_units</name>
        <reimplementedby refid="group__cpp-motors_1gacc80f1d0fc7d8fc309f8a03782d2a0ca">set_encoder_units</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gacc80f1d0fc7d8fc309f8a03782d2a0ca">set_encoder_units</reimplementedby>
        <param>
          <type>const MotorUnits</type>
          <declname>units</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets one of MotorUnits for the motor encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>Works with the C enum and the C++ enum class.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>units</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor encoder units</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1019" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga3a722463eaf12facff45ee3f0ee6e6d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_encoder_units</definition>
        <argsstring>(const pros::motor_encoder_units_e_t units, const std::uint8_t index=0) const =0</argsstring>
        <name>set_encoder_units</name>
        <reimplementedby refid="group__cpp-motors_1ga99e5f206ed2d44297b4dac9f6782c45b">set_encoder_units</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga99e5f206ed2d44297b4dac9f6782c45b">set_encoder_units</reimplementedby>
        <param>
          <type>const pros::motor_encoder_units_e_t</type>
          <declname>units</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1020" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga719c9c45eef9bb83006aa7a49e303dbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_encoder_units_all</definition>
        <argsstring>(const MotorUnits units) const =0</argsstring>
        <name>set_encoder_units_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga9a9f925242c3bb9a131ea6502d5e089f">set_encoder_units_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga9a9f925242c3bb9a131ea6502d5e089f">set_encoder_units_all</reimplementedby>
        <param>
          <type>const MotorUnits</type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1021" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gaf013a53abbf17d411c3e5bedc21b3239" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_encoder_units_all</definition>
        <argsstring>(const pros::motor_encoder_units_e_t units) const =0</argsstring>
        <name>set_encoder_units_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga77c808b80dd6bda3097a58250c660ef3">set_encoder_units_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga77c808b80dd6bda3097a58250c660ef3">set_encoder_units_all</reimplementedby>
        <param>
          <type>const pros::motor_encoder_units_e_t</type>
          <declname>units</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1022" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga67ec9c9563ae2be426f8eae8b4762c5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_gearing</definition>
        <argsstring>(const MotorGears gearset, const std::uint8_t index=0) const =0</argsstring>
        <name>set_gearing</name>
        <reimplementedby refid="group__cpp-motors_1gab439888fea5c3ed84ebbc2fc2e59719f">set_gearing</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gab439888fea5c3ed84ebbc2fc2e59719f">set_gearing</reimplementedby>
        <param>
          <type>const MotorGears</type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets one of the gear cartridge (red, green, blue) for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>Usable with the C++ enum class and the C enum.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gearset</parametername>
</parameternamelist>
<parameterdescription>
<para>The new motor gearset</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1041" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gade6d7d4eaff9e6980ac031a4004f2bee" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_gearing</definition>
        <argsstring>(const pros::motor_gearset_e_t gearset, const std::uint8_t index=0) const =0</argsstring>
        <name>set_gearing</name>
        <reimplementedby refid="group__cpp-motors_1ga1f5b46e976df878204b0d6e8c307e4ab">set_gearing</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga1f5b46e976df878204b0d6e8c307e4ab">set_gearing</reimplementedby>
        <param>
          <type>const pros::motor_gearset_e_t</type>
          <declname>gearset</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1042" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga47b3d925f7e68794028a8676e0730c73" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_gearing_all</definition>
        <argsstring>(const MotorGears gearset) const =0</argsstring>
        <name>set_gearing_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gafdf31ec9f0881bb4b62f5965486891a3">set_gearing_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gafdf31ec9f0881bb4b62f5965486891a3">set_gearing_all</reimplementedby>
        <param>
          <type>const MotorGears</type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1043" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gaab3a51c5b14e52fa9c1175bdd7ff6b02" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_gearing_all</definition>
        <argsstring>(const pros::motor_gearset_e_t gearset) const =0</argsstring>
        <name>set_gearing_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gaf14e216a5e5a4a081fc40781086711c2">set_gearing_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gaf14e216a5e5a4a081fc40781086711c2">set_gearing_all</reimplementedby>
        <param>
          <type>const pros::motor_gearset_e_t</type>
          <declname>gearset</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1044" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga5ea389bffe1e9a6185ed6b84d0f72eb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_reversed</definition>
        <argsstring>(const bool reverse, const std::uint8_t index=0)=0</argsstring>
        <name>set_reversed</name>
        <reimplementedby refid="group__cpp-motors_1gac0f2e82f2189a9ecd8a093f24b0aa482">set_reversed</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gac0f2e82f2189a9ecd8a093f24b0aa482">set_reversed</reimplementedby>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the reverse flag for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This will invert its movements and the values returned for its position.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>True reverses the motor, false is default</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1065" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gae5fd7b1f0b63e66d04ec63c6ba65d212" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_reversed_all</definition>
        <argsstring>(const bool reverse)=0</argsstring>
        <name>set_reversed_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga6c66d9fc7507bb188d80670176a45f80">set_reversed_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga6c66d9fc7507bb188d80670176a45f80">set_reversed_all</reimplementedby>
        <param>
          <type>const bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1066" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga799423364a866e61678b00e31f5db590" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_voltage_limit</definition>
        <argsstring>(const std::int32_t limit, const std::uint8_t index=0) const =0</argsstring>
        <name>set_voltage_limit</name>
        <reimplementedby refid="group__cpp-motors_1ga26abd01e8510f3c62c5d0eff7f9708a1">set_voltage_limit</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga26abd01e8510f3c62c5d0eff7f9708a1">set_voltage_limit</reimplementedby>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the voltage limit for the motor in Volts. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>limit</parametername>
</parameternamelist>
<parameterdescription>
<para>The new voltage limit in Volts</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1085" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga0b31dce13a5183f5837eaa42f54a934d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_voltage_limit_all</definition>
        <argsstring>(const std::int32_t limit) const =0</argsstring>
        <name>set_voltage_limit_all</name>
        <reimplementedby refid="group__cpp-motor-group_1ga929a8dd819a0a9c0c8dd56c1bd13d459">set_voltage_limit_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1ga929a8dd819a0a9c0c8dd56c1bd13d459">set_voltage_limit_all</reimplementedby>
        <param>
          <type>const std::int32_t</type>
          <declname>limit</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1086" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gaef47e9be34d06e6a1dc536454838f600" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_zero_position</definition>
        <argsstring>(const double position, const std::uint8_t index=0) const =0</argsstring>
        <name>set_zero_position</name>
        <reimplementedby refid="group__cpp-motors_1ga61f0f94aa4680c4d17708d0dcfbbf06a">set_zero_position</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga61f0f94aa4680c4d17708d0dcfbbf06a">set_zero_position</reimplementedby>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the position for the motor in its encoder units. </para>
        </briefdescription>
        <detaileddescription>
<para>This will be the future reference point for the motor&apos;s &quot;absolute&quot; position.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The new reference position in its encoder units</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1108" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga0ad12cb55da3c56f7fdd9999cc02c7d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t set_zero_position_all</definition>
        <argsstring>(const double position) const =0</argsstring>
        <name>set_zero_position_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gae58fdf485731e60b4a0624ceea40c8fa">set_zero_position_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gae58fdf485731e60b4a0624ceea40c8fa">set_zero_position_all</reimplementedby>
        <param>
          <type>const double</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1109" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga7e0ff8c8dc55252157fe4f8347dcd4cb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_position</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>tare_position</name>
        <reimplementedby refid="group__cpp-motors_1ga34dd566945ba585c9ddc7ea4eec5cf45">tare_position</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga34dd566945ba585c9ddc7ea4eec5cf45">tare_position</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Sets the &quot;absolute&quot; zero position of the motor to its current position. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1125" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga8add269f5b6158f6d84d97a3dacbffca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int32_t</type>
        <definition>virtual std::int32_t tare_position_all</definition>
        <argsstring>(void) const =0</argsstring>
        <name>tare_position_all</name>
        <reimplementedby refid="group__cpp-motor-group_1gab0fa2fe74ab0c7da760c252e7c7f7a71">tare_position_all</reimplementedby>
        <reimplementedby refid="group__cpp-motors_1gab0fa2fe74ab0c7da760c252e7c7f7a71">tare_position_all</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1126" column="22"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1ga0beec8f9f9323683e07493e076dba649" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int8_t</type>
        <definition>virtual std::int8_t get_port</definition>
        <argsstring>(const std::uint8_t index=0) const =0</argsstring>
        <name>get_port</name>
        <reimplementedby refid="group__cpp-motors_1ga58fa63da3d1dcbc00dd616bbff0ac16e">get_port</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1ga58fa63da3d1dcbc00dd616bbff0ac16e">get_port</reimplementedby>
        <param>
          <type>const std::uint8_t</type>
          <declname>index</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Gets the brake mode that was set for the motor. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port cannot be configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional parameter. The index of the motor to get the target position of. By default index is 0, and will return an error for an out of bounds index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of MotorBrake, according to what was set for the motor, or E_MOTOR_BRAKE_INVALID if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1127" column="21"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-motor-configuration_1gae47f39cb9d71df51bb3e3b8189d1740c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::int8_t</type>
        <definition>virtual std::int8_t size</definition>
        <argsstring>(void) const =0</argsstring>
        <name>size</name>
        <reimplementedby refid="group__cpp-motors_1gaea6e734c75989d4f96734d5c70d39d5b">size</reimplementedby>
        <reimplementedby refid="group__cpp-motor-group_1gaea6e734c75989d4f96734d5c70d39d5b">size</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the number of objects. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::int8_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/abstract_motor.hpp" line="1133" column="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>These functions allow programmers to configure the behavior of motors </para>
    </detaileddescription>
  </compounddef>
</doxygen>
