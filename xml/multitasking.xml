<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="multitasking" kind="page">
    <compoundname>multitasking</compoundname>
    <title>Multitasking</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>For a full list of functions for interacting with Tasks, see its <ref refid="group__c-rtos" kindref="compound">C API</ref> and <ref refid="group__cpp-rtos" kindref="compound">C++ API</ref>. Tasks are a great tool to do multiple things at once, but they can be difficult to use properly. The most important thing to remember when using tasks is that tasks aren&apos;t truly running in the background - they are run one at a time and swapped out by the PROS scheduler. If your task performs some repeated action (e.g. a <computeroutput>while</computeroutput> loop), you should include a <computeroutput><ref refid="namespacepros_1_1c_1a6a62f5325d65f95436762552df547d73" kindref="member">delay()</ref></computeroutput> or <computeroutput><ref refid="namespacepros_1_1c_1a151eaf730a10d101bff15013a76b9aa8" kindref="member">task_delay_until()</ref></computeroutput>. Without a <computeroutput><ref refid="namespacepros_1_1c_1a6a62f5325d65f95436762552df547d73" kindref="member">delay()</ref></computeroutput> statement, your task could starve the processor of resources and prevent the kernel from running properly.</para>
</simplesect>
The PROS task scheduler is a preemptive, priority-based, round-robin scheduler. This means that tasks are preempted (interrupted) every millisecond to determine if another task ought to run. PROS decides which task to run next based on all of the ready tasks&apos; priorities.</para>
<para><blockquote><para><itemizedlist>
<listitem><para>Tasks which are eligible for execution are called &quot;ready.&quot; Tasks are typically not ready because they may be sleeping (in a <computeroutput>task_delay</computeroutput>) or blocked waiting for a synchronization mechanism (e.g. a mutex or semaphore).</para>
</listitem><listitem><para>The higher the priority, the more crucial the task is considered, and more CPU time will be awarded to the task. Ready tasks of higher priority will always run in preference to lower priority tasks.</para>
</listitem><listitem><para>Tasks of equal priority take preference when a task is preempted. In other words, if tasks A and B have equal priority, then when A is interrupted, B will run next, even if A is still eligible for execution. This is called round-robin scheduling. </para>
</listitem></itemizedlist>
</para>
</blockquote></para>
<sect2 id="multitasking_1autotoc_md53">
<title>On the Abuse of Tasks</title>
<para>Tasks are very often misused and abused in ways that make the PROS kernel behave in unintended ways. The following list are some commonly made mistakes and guidelines for using Tasks in PROS.</para>
<para><blockquote><para><itemizedlist>
<listitem><para>Tasks in real-time operating systems should be long-living. That is, tasks should not typically perform a short operation and then die. Consider re-working the logic of your program to enable such behavior.</para>
</listitem><listitem><para>&quot;Task functions&quot; are not special, except that their signature needs to be correct. In other programming environments for VEX, tasks must be marked with a special keyword. With most modern programming environments, tasks are just functions that get executed asynchronously.</para>
</listitem><listitem><para>It was mentioned above, but it&apos;s important enough for a second mention: every tasks&apos; loop should have a <computeroutput><ref refid="namespacepros_1_1c_1a6a62f5325d65f95436762552df547d73" kindref="member">delay()</ref></computeroutput> statement. </para>
</listitem></itemizedlist>
</para>
</blockquote></para>
<sect3 id="multitasking_1autotoc_md54">
<title>Task Management</title>
<para>Tasks in PROS are simple to create:</para>
<para>The <ulink url="../../api/c/rtos.html#task_create">task_create</ulink> function takes in a function where the task starts, an argument to the function, a priority for the task, and two new fields not yet discussed: stack size and name.</para>
<para>Stack size describes the amount of stack space that is allocated for the task. The stack is an area for your program to store variables, return addresses for functions, and more. Real-time operating systems like PROS work in limited-memory situations and do not allow for a dynamically resizable stack. Modern desktop operating systems do not need to worry about stack space as much as you would in a RTOS. The good news is that most tasks should opt to use <computeroutput>TASK_STACK_DEPTH_DEFAULT</computeroutput>, which should provide ample stack space for nearly any task. Very rudimentary and simple tasks (e.g. not many nested functions, no floating point context, few variables, only C) may be able to use <computeroutput>TASK_STACK_DEPTH_MIN</computeroutput>.</para>
<para>The last parameter is the task name. The task name allows you to give a task a human-friendly name for the task. It is primarily for debugging purposes and allows you (the human) to easily identify tasks if performing advanced task management. Task names may be up to 32 characters long, and you may pass NULL or an empty string into the function. In API2, <ulink url="../../../cortex/api/index.html#taskCreate">taskCreate</ulink> will automatically make the task name an empty string.</para>
</sect3>
<sect3 id="multitasking_1autotoc_md55">
<title>Synchronization</title>
<para>One problem which one often runs into when dealing with tasks is the problem of synchronization. If two tasks try to read the same sensor or control the same motor at the same time, unexpected behavior may occur since two tasks are trying to write to the same piece of data or variable (i.e. <ulink url="https://en.wikipedia.org/wiki/Race_condition#Software">race conditions</ulink>). The concept of writing code which has protections against race conditions is called thread safety. There are many different ways to implement thread safety, and PROS has several facilities to help maintain thread safety.</para>
<para>The simplest way to ensure thread safety is to design tasks which will never access the same variables or data. You may design your code to have each subsystem of your robot in its own task. Ensuring that tasks never write to the same variables is called division of responsibility or separation of domain.</para>
<para><programlisting filename=".c"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task1_variable<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Task1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>task1_variable<sp/>=<sp/>4;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Task2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>I<sp/>can<sp/>read<sp/>task1_variable,<sp/>but<sp/>NOT<sp/>write<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>task1_variable);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Sometimes this is impossible: suppose you wanted to write a PID controller on its own task and you wanted to change the target of the PID controller. PROS features two types of synchronization structures, <emphasis>mutexes</emphasis> and <emphasis>notifications</emphasis> that can be used to coordinate tasks.</para>
</sect3>
</sect2>
<sect2 id="multitasking_1autotoc_md56">
<title>Mutexes</title>
<para>Mutexes stand for mutual exclusion; only one task can hold a mutex at any given time. Other tasks must wait for the first task to finish (and release the mutex) before they may continue.</para>
<para>Mutexes do not magically prevent concurrent writing, but provide the ability for tasks to create &quot;contracts&quot; with each other. You can write your code such that a variable is never written to unless the task owns a mutex designated for that variable.</para>
</sect2>
<sect2 id="multitasking_1autotoc_md57">
<title>Notifications</title>
<para>Task notifications are a powerful new feature in PROS 3 which allows direct-to-task synchronization. A full tutorial on task notifications can be found <ref refid="notifications" kindref="compound">Task Notifications</ref>. </para>
</sect2>
    </detaileddescription>
  </compounddef>
</doxygen>
