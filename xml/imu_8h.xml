<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="imu_8h" kind="file" language="C++">
    <compoundname>imu.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">pros/include/api.h</includedby>
    <includedby refid="imu_8hpp" local="yes">pros/include/pros/imu.hpp</includedby>
    <incdepgraph>
      <node id="133">
        <label>stdbool.h</label>
      </node>
      <node id="134">
        <label>stdint.h</label>
      </node>
      <node id="132">
        <label>pros/include/pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="133" relation="include">
        </childnode>
        <childnode refid="134" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="137">
        <label>pros/include/kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="140">
        <label>pros/include/pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="138">
        <label>pros/include/pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="137" relation="include">
        </childnode>
      </node>
      <node id="135">
        <label>pros/include/pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="136" relation="include">
        </childnode>
        <childnode refid="141" relation="include">
        </childnode>
      </node>
      <node id="136">
        <label>pros/include/api.h</label>
        <link refid="api_8h"/>
        <childnode refid="137" relation="include">
        </childnode>
        <childnode refid="138" relation="include">
        </childnode>
        <childnode refid="139" relation="include">
        </childnode>
        <childnode refid="140" relation="include">
        </childnode>
      </node>
      <node id="141">
        <label>pros/include/pros/imu.hpp</label>
        <link refid="imu_8hpp"/>
      </node>
      <node id="139">
        <label>pros/include/main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structimu__raw__s" prot="public">imu_raw_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="imu_8h_1a25e3767f95baf952241c93391c939702" prot="public" static="no">
        <name>IMU_MINIMUM_DATA_RATE</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="59" column="9" bodyfile="pros/include/pros/imu.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="imu_8h_1a74af1f93aaa6112117b4436b4b1f230d" prot="public" static="no">
        <name>imu_status_e</name>
        <enumvalue id="imu_8h_1a74af1f93aaa6112117b4436b4b1f230da67fb53f117f53122424f7862cd150a60" prot="public">
          <name>E_IMU_STATUS_CALIBRATING</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="imu_8h_1a74af1f93aaa6112117b4436b4b1f230da00266d26728436035f878ec88e6aba88" prot="public">
          <name>E_IMU_STATUS_ERROR</name>
          <initializer>= 0xFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="31" column="1" bodyfile="pros/include/pros/imu.h" bodystart="31" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="imu_8h_1a7d3682de24c3a459dddda55d65793309" prot="public" static="no">
        <type>enum <ref refid="imu_8h_1a74af1f93aaa6112117b4436b4b1f230d" kindref="member">imu_status_e</ref></type>
        <definition>typedef enum imu_status_e  imu_status_e_t</definition>
        <argsstring></argsstring>
        <name>imu_status_e_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="typedef" id="imu_8h_1a5b9e240cfb181cce3c741e29efbbbf23" prot="public" static="no">
        <type>struct <ref refid="structimu__raw__s" kindref="compound">imu_raw_s</ref></type>
        <definition>typedef struct imu_raw_s imu_gyro_s_t</definition>
        <argsstring></argsstring>
        <name>imu_gyro_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="42" column="1" bodyfile="pros/include/pros/imu.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="imu_8h_1a70eb3173193f4f46266eade4c243f662" prot="public" static="no">
        <type>struct <ref refid="structimu__raw__s" kindref="compound">imu_raw_s</ref></type>
        <definition>typedef struct imu_raw_s imu_accel_s_t</definition>
        <argsstring></argsstring>
        <name>imu_accel_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="42" column="1" bodyfile="pros/include/pros/imu.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="imu_8h_1a1f3d4bf4251e6ce7cb374297de6390a1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quaternion_s_t</definition>
        <argsstring></argsstring>
        <name>quaternion_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="42" column="1" bodyfile="pros/include/pros/imu.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="imu_8h_1a93e80020ec907b7e11ac7166e5d01c55" prot="public" static="no" mutable="no">
        <type></type>
        <definition>euler_s_t</definition>
        <argsstring></argsstring>
        <name>euler_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="57" column="1" bodyfile="pros/include/pros/imu.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="imu_8h_1a1befded5164e4754bf64b55078704b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>struct __attribute__</definition>
        <argsstring>((__packed__)) quaternion_s</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(__packed__)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This structure contains a descriptor of an object detected by the Vision Sensor </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="456" column="1" bodyfile="pros/include/pros/imu.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1ac337b759e9a31606de5a3dd29c2183a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t imu_reset</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_reset</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calibrate IMU</para><para>This takes approximately 2 seconds, and is a non-blocking operation.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is already calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1abe5420ec27a4441123e6db20ef0b342c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t imu_set_data_rate</definition>
        <argsstring>(uint8_t port, uint32_t rate)</argsstring>
        <name>imu_set_data_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the Inertial Sensor&apos;s refresh interval in milliseconds.</para><para>The rate may be specified in increments of 5ms, and will be rounded down to the nearest increment. The minimum allowable refresh rate is 5ms. The default rate is 10ms.</para><para>As values are copied into the shared memory buffer only at 10ms intervals, setting this value to less than 10ms does not mean that you can poll the sensor&apos;s values any faster. However, it will guarantee that the data is as recent as possible.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>The data refresh interval in milliseconds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1a204ed360524681aae9aa2bebd0689c90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double imu_get_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the total number of degrees the Inertial Sensor has spun about the z-axis</para><para>This value is theoretically unbounded. Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1a5ec8091dbf6cef9141fc71e833d45747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double imu_get_heading</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Inertial Sensor&apos;s heading relative to the initial direction of its x-axis</para><para>This value is bounded by (-360,360). Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1aa790f5a228ba33925b907e7e646fad46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="imu_8h_1a1f3d4bf4251e6ce7cb374297de6390a1" kindref="member">quaternion_s_t</ref></type>
        <definition>quaternion_s_t imu_get_quaternion</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_quaternion</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a quaternion representing the Inertial Sensor&apos;s orientation</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quaternion representing the sensor&apos;s orientation. If the operation failed, all the quaternion&apos;s members are filled with PROS_ERR_F and errno is set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1a3d82505efa7e78611714c0054cbadd08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="imu_8h_1a93e80020ec907b7e11ac7166e5d01c55" kindref="member">euler_s_t</ref></type>
        <definition>euler_s_t imu_get_euler</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Euler angles representing the Inertial Sensor&apos;s orientation</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euler angles representing the sensor&apos;s orientation. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1a228afc37753efdfcb75f9d6944e3ded9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double imu_get_pitch</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Inertial Sensor&apos;s pitch angle</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pitch angle, or PROS_ERR_F if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1a819aa65166cb9cde50fc4b7522a6d88f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double imu_get_roll</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Inertial Sensor&apos;s roll angle</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The roll angle, or PROS_ERR_F if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1a25ec23db069f8c9d5b4f623d75922fd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double imu_get_yaw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Inertial Sensor&apos;s yaw angle</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The yaw angle, or PROS_ERR_F if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1ad36c33d12e7419399fcda73e1a6156d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="imu_8h_1a5b9e240cfb181cce3c741e29efbbbf23" kindref="member">imu_gyro_s_t</ref></type>
        <definition>imu_gyro_s_t imu_get_gyro_rate</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_gyro_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Inertial Sensor&apos;s raw gyroscope values</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1a0951539163dfe35978cb147d35447069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="imu_8h_1a70eb3173193f4f46266eade4c243f662" kindref="member">imu_accel_s_t</ref></type>
        <definition>imu_accel_s_t imu_get_accel</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_accel</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Inertial Sensor&apos;s raw acceleroneter values</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="imu_8h_1abb86118f8e2efa99ed978dbff39d4129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="imu_8h_1a7d3682de24c3a459dddda55d65793309" kindref="member">imu_status_e_t</ref></type>
        <definition>imu_status_e_t imu_get_status</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_status</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the Inertial Sensor&apos;s status</para><para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Inertial Sensor&apos;s status code, or PROS_ERR if the operation failed, setting errno. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="273" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for functions related to the VEX Inertial sensor.</para><para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/imu.html">https://pros.cs.purdue.edu/v5/tutorials/topical/imu.html</ulink> to learn more.</para><para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para><para>Copyright (c) 2017-2020, Purdue University ACM SIGBots.</para><para>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>    </detaileddescription>
    <location file="pros/include/pros/imu.h"/>
  </compounddef>
</doxygen>
