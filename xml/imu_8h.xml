<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="imu_8h" kind="file" language="C++">
    <compoundname>imu.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <includedby refid="imu_8hpp" local="yes">pros/imu.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="8">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="6">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pros/optical.hpp</label>
        <link refid="optical_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pros/imu.hpp</label>
        <link refid="imu_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pros/optical.h</label>
        <link refid="optical_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="imu_8h_1a25e3767f95baf952241c93391c939702" prot="public" static="no">
        <name>IMU_MINIMUM_DATA_RATE</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="59" column="9" bodyfile="pros/imu.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230d" prot="public" static="no" strong="no">
        <type></type>
        <name>imu_status_e</name>
        <enumvalue id="namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230da67fb53f117f53122424f7862cd150a60" prot="public">
          <name>E_IMU_STATUS_CALIBRATING</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230da00266d26728436035f878ec88e6aba88" prot="public">
          <name>E_IMU_STATUS_ERROR</name>
          <initializer>= 0xFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="31" column="26" bodyfile="pros/imu.h" bodystart="31" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacepros_1_1c_1a5b9e240cfb181cce3c741e29efbbbf23" prot="public" static="no">
        <type>struct imu_raw_s</type>
        <definition>typedef struct imu_raw_s imu_gyro_s_t</definition>
        <argsstring></argsstring>
        <name>imu_gyro_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="42" column="2" bodyfile="pros/imu.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepros_1_1c_1a70eb3173193f4f46266eade4c243f662" prot="public" static="no">
        <type>struct imu_raw_s</type>
        <definition>typedef struct imu_raw_s imu_accel_s_t</definition>
        <argsstring></argsstring>
        <name>imu_accel_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="42" column="2" bodyfile="pros/imu.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepros_1_1c_1a1f3d4bf4251e6ce7cb374297de6390a1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quaternion_s_t</definition>
        <argsstring></argsstring>
        <name>quaternion_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="42" column="2" bodyfile="pros/imu.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepros_1_1c_1a93e80020ec907b7e11ac7166e5d01c55" prot="public" static="no" mutable="no">
        <type></type>
        <definition>euler_s_t</definition>
        <argsstring></argsstring>
        <name>euler_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="57" column="2" bodyfile="pros/imu.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepros_1_1c_1a180d5d84012c16d5d28c19d7607b931e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>struct __attribute__</definition>
        <argsstring>((__packed__)) gps_status_s</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(__packed__)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>&lt; X Position (meters)</para>
<para>&lt; Y Position (meters)</para>
<para>&lt; Percieved Pitch based on GPS + IMU</para>
<para>&lt; Percieved Roll based on GPS + IMU</para>
<para>&lt; Percieved Yaw based on GPS + IMU</para>
        </inbodydescription>
        <location file="pros/gps.h" line="1" column="0" bodyfile="pros/gps.h" bodystart="31" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a0ea1e99bb730db27d613f31a11e933c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_reset</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_reset</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Calibrate IMU. </para>
        </briefdescription>
        <detaileddescription>
<para>Calibration takes approximately 2 seconds, but this function only blocks until the IMU status flag is set properly to E_IMU_STATUS_CALIBRATING, with a minimum blocking time of 5ms.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is already calibrating, or time out setting the status flag.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="79" column="9" declfile="pros/imu.h" declline="79" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a73029aa0aa910f9b740ffe6def05e830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_data_rate</definition>
        <argsstring>(uint8_t port, uint32_t rate)</argsstring>
        <name>imu_set_data_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Set the Inertial Sensor&apos;s refresh interval in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para>The rate may be specified in increments of 5ms, and will be rounded down to the nearest increment. The minimum allowable refresh rate is 5ms. The default rate is 10ms.</para>
<para>As values are copied into the shared memory buffer only at 10ms intervals, setting this value to less than 10ms does not mean that you can poll the sensor&apos;s values any faster. However, it will guarantee that the data is as recent as possible.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>The data refresh interval in milliseconds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="106" column="9" declfile="pros/imu.h" declline="106" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa44bc46059f8aca47f3317320f1cd5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the total number of degrees the Inertial Sensor has spun about the z-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is theoretically unbounded. Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="126" column="8" declfile="pros/imu.h" declline="126" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1acca94d74756713e9ca0bd36490c6acc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_heading</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s heading relative to the initial direction of its x-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is bounded by [0,360). Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="147" column="8" declfile="pros/imu.h" declline="147" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1afdacdac1c6beeed1cce3829b67ebe473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quaternion_s_t</type>
        <definition>quaternion_s_t pros::c::imu_get_quaternion</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_quaternion</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get a quaternion representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quaternion representing the sensor&apos;s orientation. If the operation failed, all the quaternion&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="164" column="16" declfile="pros/imu.h" declline="164" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a8d16738ae5c652c2c72479e793f4f09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>euler_s_t</type>
        <definition>euler_s_t pros::c::imu_get_euler</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Euler angles representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euler angles representing the sensor&apos;s orientation. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="181" column="11" declfile="pros/imu.h" declline="181" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a44a4f2d6c27854606ca35247b97dc68d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_pitch</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s pitch angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pitch angle, or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="197" column="8" declfile="pros/imu.h" declline="197" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa913785ee0bf907fafd049145f735e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_roll</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s roll angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The roll angle, or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="212" column="8" declfile="pros/imu.h" declline="212" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa1b43b44cf94a724d4917bf363db2299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_yaw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s yaw angle bounded by (-180,180) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The yaw angle, or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="227" column="8" declfile="pros/imu.h" declline="227" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1afe88178fca4b6dd69cae69469bb58e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>imu_gyro_s_t</type>
        <definition>imu_gyro_s_t pros::c::imu_get_gyro_rate</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_gyro_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw gyroscope values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="243" column="14" declfile="pros/imu.h" declline="243" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aae2df998074e80a7531de57c1161f47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>imu_accel_s_t</type>
        <definition>imu_accel_s_t pros::c::imu_get_accel</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_accel</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw acceleroneter values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="259" column="15" declfile="pros/imu.h" declline="259" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a1ccf1cf41bf15e416c89d64093d63764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>imu_status_e_t</type>
        <definition>imu_status_e_t pros::c::imu_get_status</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_status</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s status. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Inertial Sensor&apos;s status code, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="275" column="16" declfile="pros/imu.h" declline="275" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a7613cb8ad7dbe92244f862f038040077" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_heading</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s heading to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="296" column="9" declfile="pros/imu.h" declline="296" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a33ea7dacd1ee92bc6bf011cb109cadd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s rotation to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="312" column="9" declfile="pros/imu.h" declline="312" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a0ec5652dee78d7b6582436ca72753eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_pitch</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s pitch to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="328" column="9" declfile="pros/imu.h" declline="328" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a1c0d6e494b558d012fc29c2e0f565d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_roll</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s roll to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="344" column="9" declfile="pros/imu.h" declline="344" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a8d220ae04071a4ac25be52108e561166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_yaw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets the current reading of the Inertial Sensor&apos;s yaw to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="360" column="9" declfile="pros/imu.h" declline="360" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aee27c5a8ea8e51afee3c80e4ef3d1e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare_euler</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Reset all 3 euler values of the Inertial Sensor to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="376" column="9" declfile="pros/imu.h" declline="376" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a5ae349cec6a99b52cf632267f1c2c332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_tare</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_tare</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Resets all 5 values of the Inertial Sensor to 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="392" column="9" declfile="pros/imu.h" declline="392" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1abd5e3389b5026622463ccf5e9a9ee5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_euler</definition>
        <argsstring>(uint8_t port, euler_s_t target)</argsstring>
        <name>imu_set_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>euler_s_t</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s euler values to target euler values. </para>
        </briefdescription>
        <detaileddescription>
<para>Will default to +/- 180 if target exceeds +/- 180.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target euler values for the euler values to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="412" column="9" declfile="pros/imu.h" declline="412" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a33890996b538599d7c635a895e3da8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_rotation</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s rotation to target value. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the rotation value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="430" column="9" declfile="pros/imu.h" declline="430" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a35127112436baa43237fc52c683a9e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_heading</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s heading to target value Target will default to 360 if above 360 and default to 0 if below 0. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the heading value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="449" column="9" declfile="pros/imu.h" declline="449" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a87a5b4f797d70c502fd862320ba733da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_pitch</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s pitch to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the pitch value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="468" column="9" declfile="pros/imu.h" declline="468" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a52386f7153795d5be0acda3352600834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_roll</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s roll to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the roll value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="487" column="9" declfile="pros/imu.h" declline="487" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aee4fcba55ec253943b6396c8c1e24c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_set_yaw</definition>
        <argsstring>(uint8_t port, double target)</argsstring>
        <name>imu_set_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>target</declname>
        </param>
        <briefdescription>
<para>Sets the current reading of the Inertial Sensor&apos;s yaw to target value Will default to +/- 180 if target exceeds +/- 180. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>Target value for the yaw value to be set to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/imu.h" line="506" column="9" declfile="pros/imu.h" declline="506" declcolumn="9"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for functions related to the VEX Inertial sensor.</para>
<para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/imu.html">https://pros.cs.purdue.edu/v5/tutorials/topical/imu.html</ulink> to learn more.</para>
<para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para>Copyright (c) 2017-2022, Purdue University ACM SIGBots.</para>
<para>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/imu.h"/>
  </compounddef>
</doxygen>
