<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="imu_8h" kind="file" language="C++">
    <compoundname>imu.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">pros/include/api.h</includedby>
    <includedby refid="imu_8hpp" local="yes">pros/include/pros/imu.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>pros/include/pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>pros/include/kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="6">
        <label>pros/include/pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="4">
        <label>pros/include/pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pros/include/pros/imu.h</label>
        <link refid="imu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pros/include/api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>pros/include/pros/imu.hpp</label>
        <link refid="imu_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>pros/include/main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230d" prot="public" static="no" strong="no">
        <type></type>
        <name>imu_status_e</name>
        <enumvalue id="namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230da67fb53f117f53122424f7862cd150a60" prot="public">
          <name>E_IMU_STATUS_CALIBRATING</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230da00266d26728436035f878ec88e6aba88" prot="public">
          <name>E_IMU_STATUS_ERROR</name>
          <initializer>= 0xFF</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="31" column="26" bodyfile="pros/include/pros/imu.h" bodystart="31" bodyend="35"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacepros_1_1c_1ad400ca11ddcffb8a9ec6b67eba2a466d" prot="public" static="no">
        <type>enum <ref refid="namespacepros_1_1c_1a74af1f93aaa6112117b4436b4b1f230d" kindref="member">pros::c::imu_status_e</ref></type>
        <definition>typedef enum pros::c::imu_status_e imu_status_e_t</definition>
        <argsstring></argsstring>
        <name>imu_status_e_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="35" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepros_1_1c_1a5b9e240cfb181cce3c741e29efbbbf23" prot="public" static="no">
        <type>struct imu_raw_s</type>
        <definition>typedef struct imu_raw_s imu_gyro_s_t</definition>
        <argsstring></argsstring>
        <name>imu_gyro_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="42" column="2" bodyfile="pros/include/pros/imu.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepros_1_1c_1a70eb3173193f4f46266eade4c243f662" prot="public" static="no">
        <type>struct imu_raw_s</type>
        <definition>typedef struct imu_raw_s imu_accel_s_t</definition>
        <argsstring></argsstring>
        <name>imu_accel_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="42" column="2" bodyfile="pros/include/pros/imu.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepros_1_1c_1a1f3d4bf4251e6ce7cb374297de6390a1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>quaternion_s_t</definition>
        <argsstring></argsstring>
        <name>quaternion_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="42" column="2" bodyfile="pros/include/pros/imu.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacepros_1_1c_1a93e80020ec907b7e11ac7166e5d01c55" prot="public" static="no" mutable="no">
        <type></type>
        <definition>euler_s_t</definition>
        <argsstring></argsstring>
        <name>euler_s_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="57" column="2" bodyfile="pros/include/pros/imu.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepros_1_1c_1a1befded5164e4754bf64b55078704b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>struct __attribute__</definition>
        <argsstring>((__packed__)) quaternion_s</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(__packed__)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="1" column="0" bodyfile="pros/include/pros/imu.h" bodystart="37" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a0ea1e99bb730db27d613f31a11e933c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::imu_reset</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_reset</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Calibrate IMU. </para>
        </briefdescription>
        <detaileddescription>
<para>This takes approximately 2 seconds, and is a non-blocking operation.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is already calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="75" column="9" declfile="pros/include/pros/imu.h" declline="75" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa44bc46059f8aca47f3317320f1cd5bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_rotation</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_rotation</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the total number of degrees the Inertial Sensor has spun about the z-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is theoretically unbounded. Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="95" column="8" declfile="pros/include/pros/imu.h" declline="95" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1acca94d74756713e9ca0bd36490c6acc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_heading</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_heading</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s heading relative to the initial direction of its x-axis. </para>
        </briefdescription>
        <detaileddescription>
<para>This value is bounded by (-360,360). Clockwise rotations are represented with positive degree values, while counterclockwise rotations are represented with negative ones.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The degree value or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="116" column="8" declfile="pros/include/pros/imu.h" declline="116" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1afdacdac1c6beeed1cce3829b67ebe473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>quaternion_s_t</type>
        <definition>quaternion_s_t pros::c::imu_get_quaternion</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_quaternion</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get a quaternion representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The quaternion representing the sensor&apos;s orientation. If the operation failed, all the quaternion&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="133" column="16" declfile="pros/include/pros/imu.h" declline="133" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a8d16738ae5c652c2c72479e793f4f09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>euler_s_t</type>
        <definition>euler_s_t pros::c::imu_get_euler</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_euler</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Euler angles representing the Inertial Sensor&apos;s orientation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Euler angles representing the sensor&apos;s orientation. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="150" column="11" declfile="pros/include/pros/imu.h" declline="150" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a44a4f2d6c27854606ca35247b97dc68d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_pitch</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_pitch</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s pitch angle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pitch angle, or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="166" column="8" declfile="pros/include/pros/imu.h" declline="166" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa913785ee0bf907fafd049145f735e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_roll</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_roll</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s roll angle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The roll angle, or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="181" column="8" declfile="pros/include/pros/imu.h" declline="181" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aa1b43b44cf94a724d4917bf363db2299" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::imu_get_yaw</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_yaw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s yaw angle. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The yaw angle, or PROS_ERR_F if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="196" column="8" declfile="pros/include/pros/imu.h" declline="196" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1afe88178fca4b6dd69cae69469bb58e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>imu_gyro_s_t</type>
        <definition>imu_gyro_s_t pros::c::imu_get_gyro_rate</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_gyro_rate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw gyroscope values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw gyroscope values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="212" column="14" declfile="pros/include/pros/imu.h" declline="212" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1aae2df998074e80a7531de57c1161f47d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>imu_accel_s_t</type>
        <definition>imu_accel_s_t pros::c::imu_get_accel</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_accel</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s raw acceleroneter values. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The raw accelerometer values. If the operation failed, all the structure&apos;s members are filled with PROS_ERR_F and errno is set. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="228" column="15" declfile="pros/include/pros/imu.h" declline="228" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a1ccf1cf41bf15e416c89d64093d63764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>imu_status_e_t</type>
        <definition>imu_status_e_t pros::c::imu_get_status</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>imu_get_status</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Get the Inertial Sensor&apos;s status. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as an Inertial Sensor EAGAIN - The sensor is still calibrating</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The V5 Inertial Sensor port number from 1-21 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The Inertial Sensor&apos;s status code, or PROS_ERR if the operation failed, setting errno. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/imu.h" line="244" column="16" declfile="pros/include/pros/imu.h" declline="244" declcolumn="16"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for functions related to the VEX Inertial sensor.</para>
<para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/imu.html">https://pros.cs.purdue.edu/v5/tutorials/topical/imu.html</ulink> to learn more.</para>
<para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para>Copyright (c) 2017-2020, Purdue University ACM SIGBots.</para>
<para>This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/include/pros/imu.h"/>
  </compounddef>
</doxygen>
