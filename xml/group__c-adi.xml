<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__c-adi" kind="group">
    <compoundname>c-adi</compoundname>
    <title>ADI (TriPort) C API</title>
    <innerfile refid="adi_8h">adi.h</innerfile>
      <sectiondef kind="user-defined">
      <header>General ADI Use Functions</header>
      <description><para>These functions allow for interaction with any ADI port type </para>
</description>
      <memberdef kind="function" id="group__c-adi_1gab1441b4f7106ca07eabeb274a94d5e2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_port_config_e_t</type>
        <definition>adi_port_config_e_t pros::c::adi_port_get_config</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_port_get_config</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the configuration for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which to return the configuration</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ADI configuration for the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Displays<sp/>the<sp/>value<sp/>of<sp/>E_ADI_ANALOG_IN</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Port<sp/>Type:<sp/>%d\n&quot;,<sp/>adi_port_get_config(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="183" column="21" declfile="pros/adi.h" declline="183" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gabe2a3c30fa74bb9c4ba202d79e636d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_port_get_value</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_port_get_value</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the value for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The value stored for the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Port<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_get_value(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="208" column="9" declfile="pros/adi.h" declline="208" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga280137f3b1ec70ac5d22462cdc7b715d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_port_set_config</definition>
        <argsstring>(uint8_t port, adi_port_config_e_t type)</argsstring>
        <name>adi_port_set_config</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>adi_port_config_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as a given sensor type. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration type for the port</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(ANALOG_SENSOR_PORT,<sp/>E_ADI_ANALOG_IN);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="234" column="9" declfile="pros/adi.h" declline="234" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga2cf397ea5cb6d0927e5f5c93ec34bb3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_port_set_value</definition>
        <argsstring>(uint8_t port, int32_t value)</argsstring>
        <name>adi_port_set_value</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the value for the given ADI port. </para>
        </briefdescription>
        <detaileddescription>
<para>This only works on ports configured as outputs, and the behavior will change depending on the configuration of the port.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be set </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to set the ADI port to</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_port_set_config(DIGITAL_SENSOR_PORT,<sp/>E_ADI_DIGITAL_OUT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_set_value(DIGITAL_SENSOR_PORT,<sp/>HIGH);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="265" column="9" declfile="pros/adi.h" declline="265" declcolumn="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>PROS 2 Compatibility Functions</header>
      <description><para>These functions provide similar functionality to the PROS 2 API </para>
</description>
      <memberdef kind="typedef" id="group__c-adi_1gadc7331a863ca648693c688af1ae9a940" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_encoder_t</definition>
        <argsstring></argsstring>
        <name>adi_encoder_t</name>
        <briefdescription>
<para>Reference type for an initialized encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the encoder, unlike its use as an object to store encoder data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="682" column="17" bodyfile="pros/adi.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__c-adi_1ga642e06a44cad02177d4111261e17c3df" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_ultrasonic_t</definition>
        <argsstring></argsstring>
        <name>adi_ultrasonic_t</name>
        <briefdescription>
<para>Reference type for an initialized ultrasonic. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the ultrasonic, unlike its use as an object to store ultrasonic data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="818" column="17" bodyfile="pros/adi.h" bodystart="818" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__c-adi_1ga9c451728d4193f1a4e59d7dc489ac292" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_gyro_t</definition>
        <argsstring></argsstring>
        <name>adi_gyro_t</name>
        <briefdescription>
<para>Reference type for an initialized gyroscope. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the gyroscope, unlike its use as an object to store gyro data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="928" column="17" bodyfile="pros/adi.h" bodystart="928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__c-adi_1ga57a45eab54fec9fc2d0a16117a64ad96" prot="public" static="no">
        <type>int32_t</type>
        <definition>typedef int32_t adi_potentiometer_t</definition>
        <argsstring></argsstring>
        <name>adi_potentiometer_t</name>
        <briefdescription>
<para>Reference type for an initialized potentiometer. </para>
        </briefdescription>
        <detaileddescription>
<para>This merely contains the port number for the potentiometer, unlike its use as an object to store gyro data in PROS 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1088" column="17" bodyfile="pros/adi.h" bodystart="1088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_calibrate</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_calibrate</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Calibrates the analog sensor on the specified port and returns the new calibration value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method assumes that the true sensor value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the <ref refid="group__c-adi_1ga34a3205b4beecc2efb561a068ac869e7" kindref="member">adi_analog_read_calibrated()</ref> and <ref refid="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" kindref="member">adi_analog_read_calibrated_HR()</ref> functions. These functions will return the difference between this value and the current sensor value when called.</para>
<para>Do not use this function when the sensor value might be unstable (gyro rotation, accelerometer movement).</para>
<para><simplesect kind="note"><para>The ADI currently returns data at 10ms intervals, in constrast to the calibrate function’s 1ms sample rate. This sample rate was kept for the sake of being similar to PROS 2, and increasing the sample rate would not have a tangible difference in the function’s performance.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to calibrate (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The average sensor value computed by this function</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_analog_calibrate(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Calibrated<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read_calibrated(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>All<sp/>readings<sp/>from<sp/>then<sp/>on<sp/>will<sp/>be<sp/>calibrated</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="352" column="9" declfile="pros/adi.h" declline="352" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gaaec9c097a2fb6ae1632954591eea35d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_read</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_read</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the 12-bit value of the specified port. </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is undefined if the analog pin has been switched to a different mode.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="384" column="9" declfile="pros/adi.h" declline="384" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga34a3205b4beecc2efb561a068ac869e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_read_calibrated</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_read_calibrated</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the 12 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" kindref="member">adi_analog_calibrate()</ref> function must be run first. This function is inappropriate for sensor values intended for integration, as round-off error can accumulate causing drift over time. Use <ref refid="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" kindref="member">adi_analog_read_calibrated_HR()</ref> instead.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -4095 to 4095</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read_calibrated(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="418" column="9" declfile="pros/adi.h" declline="418" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga0a62ec5516d617b8282f9f1c21e68e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_analog_read_calibrated_HR</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_analog_read_calibrated_HR</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the 16 bit calibrated value of an analog input port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="group__c-adi_1gadebbf89bed5c3464bd77712c4c53edef" kindref="member">adi_analog_calibrate()</ref> function must be run first. This is intended for integrated sensor values such as gyros and accelerometers to reduce drift due to round-off, and should not be used on a sensor such as a line tracker or potentiometer.</para>
<para>The value returned actually has 16 bits of &quot;precision&quot;, even though the ADC only reads 12 bits, so that error induced by the average value being between two values when integrated over time is trivial. Think of the value as the true value times 16.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an analog input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) for which the value will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The difference of the sensor value from its calibrated default from -16384 to 16384</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_analog_calibrate(ANALOG_SENSOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Reading:<sp/>%d\n&quot;,<sp/>adi_analog_read_calibrated_HR(ANALOG_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="458" column="9" declfile="pros/adi.h" declline="458" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga4acc4110678a3f4ae8f6b793b2dc1793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_digital_read</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_digital_read</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the digital value (1 or 0) of a port configured as a digital input. </para>
        </briefdescription>
        <detaileddescription>
<para>If the port is configured as some other mode, the digital value which reflects the current state of the port is returned, which may or may not differ from the currently set value. The return value is undefined for ports configured as any mode other than a Digital Input.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the pin is HIGH, or false if it is LOW</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Sensor<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_digital_read(DIGITAL_SENSOR_PORT));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="490" column="9" declfile="pros/adi.h" declline="490" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gaf67d01f4e0aad2806c699e249d869977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_digital_get_new_press</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_digital_get_new_press</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets a rising-edge case for a digital button press. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> A calls this function for buttons 1 and 2. <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital input</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button is pressed and had not been pressed the last time this function was called, 0 otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(adi_digital_get_new_press(DIGITAL_SENSOR_PORT))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Toggle<sp/>pneumatics<sp/>or<sp/>other<sp/>state<sp/>operations</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="528" column="9" declfile="pros/adi.h" declline="528" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gadbbe71d4934bbe5218b33405207f5f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_digital_write</definition>
        <argsstring>(uint8_t port, bool value)</argsstring>
        <name>adi_digital_write</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the digital value (1 or 0) of a port configured as a digital output. </para>
        </briefdescription>
        <detaileddescription>
<para>If the port is configured as some other mode, behavior is undefined.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a digital output</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>An expression evaluating to &quot;true&quot; or &quot;false&quot; to set the output to HIGH or LOW respectively, or the constants HIGH or LOW themselves</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>DIGITAL_SENSOR_PORT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>state<sp/>=<sp/>LOW;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>state<sp/>!=<sp/>state;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>adi_digital_write(DIGITAL_SENSOR_PORT,<sp/>state);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);<sp/>//<sp/>toggle<sp/>the<sp/>sensor<sp/>value<sp/>every<sp/>50ms</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="563" column="9" declfile="pros/adi.h" declline="563" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga81c189bfd3e3d2c7dff5d26459ecd6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_pin_mode</definition>
        <argsstring>(uint8_t port, uint8_t mode)</argsstring>
        <name>adi_pin_mode</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Configures the port as an input or output with a variety of settings. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to read (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>One of INPUT, INPUT_ANALOG, INPUT_FLOATING, OUTPUT, or OUTPUT_OD</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ANALOG_SENSOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_pin_mode(ANALOG_SENSOR_PORT,<sp/>INPUT_ANALOG);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="589" column="9" declfile="pros/adi.h" declline="589" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga4f0f74ad94f8d1ea90581ed55674241c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_motor_set</definition>
        <argsstring>(uint8_t port, int8_t speed)</argsstring>
        <name>adi_motor_set</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>speed</declname>
        </param>
        <briefdescription>
<para>Sets the speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to set (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>speed</parametername>
</parameternamelist>
<parameterdescription>
<para>The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="619" column="9" declfile="pros/adi.h" declline="619" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gacff400470df9136fc1c05e51644e08c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_motor_get</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_motor_get</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Gets the last set speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to get (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The last set speed of the motor on the given port</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Commanded<sp/>Motor<sp/>Power:<sp/>%d\n&quot;,<sp/>adi_motor_get(MOTOR_PORT));<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="646" column="9" declfile="pros/adi.h" declline="646" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gabeb2cc7e1edda5a9370a1ae268db08ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_motor_stop</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_motor_stop</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Stops the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to set (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_set(MOTOR_PORT,<sp/>127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>adi_motor_set(MOTOR_PORT,<sp/>0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_motor_stop(MOTOR_PORT);<sp/>//<sp/>use<sp/>this<sp/>instead</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="674" column="9" declfile="pros/adi.h" declline="674" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga22e55a80b8f8e20bc8b787a92d9253f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_encoder_get</definition>
        <argsstring>(adi_encoder_t enc)</argsstring>
        <name>adi_encoder_get</name>
        <param>
          <type>adi_encoder_t</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Gets the number of ticks recorded by the encoder. </para>
        </briefdescription>
        <detaileddescription>
<para>There are 360 ticks in one revolution.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The signed and cumulative number of counts since the last start or reset</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Encoder<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_encoder_get(enc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="714" column="9" declfile="pros/adi.h" declline="714" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_encoder_t</type>
        <definition>adi_encoder_t pros::c::adi_encoder_init</definition>
        <argsstring>(uint8_t port_top, uint8_t port_bottom, bool reverse)</argsstring>
        <name>adi_encoder_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port_top</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>port_bottom</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reverse</declname>
        </param>
        <briefdescription>
<para>Creates an encoder object and configures the specified ports accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_top</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;top&quot; wire from the encoder sensor with the removable cover side up. This should be in port 1, 3, 5, or 7 (&apos;A&apos;, &apos;C&apos;, &apos;E&apos;, or &apos;G&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>The &quot;bottom&quot; wire from the encoder sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reverse</parametername>
</parameternamelist>
<parameterdescription>
<para>If &quot;true&quot;, the sensor will count in the opposite direction</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_encoder_t object to be stored and used for later calls to encoder functions</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Encoder<sp/>Value:<sp/>%d\n&quot;,<sp/>adi_encoder_get(enc));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="750" column="15" declfile="pros/adi.h" declline="750" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga0aa1c29410c89a930400c779b9093ed8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_encoder_reset</definition>
        <argsstring>(adi_encoder_t enc)</argsstring>
        <name>adi_encoder_reset</name>
        <param>
          <type>adi_encoder_t</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Sets the encoder value to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>It is safe to use this method while an encoder is enabled. It is not necessary to call this method before stopping or starting an encoder.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to reset</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);<sp/>//<sp/>Move<sp/>the<sp/>encoder<sp/>around<sp/>in<sp/>this<sp/>time</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_reset(enc);<sp/>//<sp/>The<sp/>encoder<sp/>is<sp/>now<sp/>zero<sp/>again</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="782" column="9" declfile="pros/adi.h" declline="782" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gad9821a0243b2e14d0dac5099872129ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_encoder_shutdown</definition>
        <argsstring>(adi_encoder_t enc)</argsstring>
        <name>adi_encoder_shutdown</name>
        <param>
          <type>adi_encoder_t</type>
          <declname>enc</declname>
        </param>
        <briefdescription>
<para>Disables the encoder and voids the configuration on its ports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an encoder</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enc</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_encoder_t object from <ref refid="group__c-adi_1gac21579276dee544ecfedd917cfef27e0" kindref="member">adi_encoder_init()</ref> to stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_TOP<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_BOTTOM<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_t<sp/>enc<sp/>=<sp/>adi_encoder_init(PORT_TOP,<sp/>PORT_BOTTOM,<sp/>false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Use<sp/>the<sp/>encoder</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_encoder_shutdown(enc);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="810" column="9" declfile="pros/adi.h" declline="810" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga65ac514a03673a535cdf43e7f57e2716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_ultrasonic_get</definition>
        <argsstring>(adi_ultrasonic_t ult)</argsstring>
        <name>adi_ultrasonic_get</name>
        <param>
          <type>adi_ultrasonic_t</type>
          <declname>ult</declname>
        </param>
        <briefdescription>
<para>Gets the current ultrasonic sensor value in centimeters. </para>
        </briefdescription>
        <detaileddescription>
<para>If no object was found, zero is returned. If the ultrasonic sensor was never started, the return value is undefined. Round and fluffy objects can cause inaccurate values to be returned.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ult</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_ultrasonic_t object from <ref refid="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" kindref="member">adi_ultrasonic_init()</ref> to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The distance to the nearest object in m^-4 (10000 indicates 1 meter), measured from the sensor&apos;s mounting points.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_t<sp/>ult<sp/>=<sp/>adi_ultrasonic_init(PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="853" column="9" declfile="pros/adi.h" declline="853" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_ultrasonic_t</type>
        <definition>adi_ultrasonic_t pros::c::adi_ultrasonic_init</definition>
        <argsstring>(uint8_t port_ping, uint8_t port_echo)</argsstring>
        <name>adi_ultrasonic_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port_ping</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>port_echo</declname>
        </param>
        <briefdescription>
<para>Creates an ultrasonic object and configures the specified ports accordingly. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_ping</parametername>
</parameternamelist>
<parameterdescription>
<para>The port connected to the orange OUTPUT cable. This should be in port 1, 3, 5, or 7 (&apos;A&apos;, &apos;C&apos;, &apos;E&apos;, &apos;G&apos;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port_echo</parametername>
</parameternamelist>
<parameterdescription>
<para>The port connected to the yellow INPUT cable. This should be in the next highest port following port_ping.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_ultrasonic_t object to be stored and used for later calls to ultrasonic functions</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_t<sp/>ult<sp/>=<sp/>adi_ultrasonic_init(PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="888" column="18" declfile="pros/adi.h" declline="888" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga38f7e3b4d99f5dc21972a9f178f5908f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_ultrasonic_shutdown</definition>
        <argsstring>(adi_ultrasonic_t ult)</argsstring>
        <name>adi_ultrasonic_shutdown</name>
        <param>
          <type>adi_ultrasonic_t</type>
          <declname>ult</declname>
        </param>
        <briefdescription>
<para>Disables the ultrasonic sensor and voids the configuration on its ports. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as an ultrasonic</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ult</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_ultrasonic_t object from <ref refid="group__c-adi_1ga2bd844aa49e221c1e68c0b94d148c3b4" kindref="member">adi_ultrasonic_init()</ref> to stop</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>PORT_PING<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>PORT_ECHO<sp/>2</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_t<sp/>ult<sp/>=<sp/>adi_ultrasonic_init(PORT_PING,<sp/>PORT_ECHO);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>distance<sp/>read<sp/>by<sp/>the<sp/>ultrasonic</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Distance:<sp/>%d\n&quot;,<sp/>adi_ultrasonic_get(ult));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_ultrasonic_shutdown(ult);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="920" column="9" declfile="pros/adi.h" declline="920" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga7ee7cf11c1a604af68b9373f4b7c8799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::adi_gyro_get</definition>
        <argsstring>(adi_gyro_t gyro)</argsstring>
        <name>adi_gyro_get</name>
        <param>
          <type>adi_gyro_t</type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Gets the current gyro angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.</para>
<para>There are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The gyro angle in degrees.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="963" column="8" declfile="pros/adi.h" declline="963" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga6ee6e73d3be33d0b2f5c4bfbe37f2d4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_gyro_t</type>
        <definition>adi_gyro_t pros::c::adi_gyro_init</definition>
        <argsstring>(uint8_t port, double multiplier)</argsstring>
        <name>adi_gyro_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
        </param>
        <briefdescription>
<para>Initializes a gyroscope on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given port has not previously been configured as a gyro, then this function starts a 1300 ms calibration period.</para>
<para>It is highly recommended that this function be called from <ref refid="main_8h_1a9efe22aaead3a5e936b5df459de02eba" kindref="member">initialize()</ref> when the robot is stationary to ensure proper calibration.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar value that will be multiplied by the gyro heading value supplied by the ADI</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_gyro_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1002" column="12" declfile="pros/adi.h" declline="1002" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga79a193e42f59415cf1f860812a7248d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_gyro_reset</definition>
        <argsstring>(adi_gyro_t gyro)</argsstring>
        <name>adi_gyro_reset</name>
        <param>
          <type>adi_gyro_t</type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Resets the gyroscope value to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(millis()<sp/>-<sp/>now<sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>gyro<sp/>every<sp/>2<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adi_gyro_reset(gyro);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1041" column="9" declfile="pros/adi.h" declline="1041" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga618baab8adbdec65f418f68cf98325d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::c::adi_gyro_shutdown</definition>
        <argsstring>(adi_gyro_t gyro)</argsstring>
        <name>adi_gyro_shutdown</name>
        <param>
          <type>adi_gyro_t</type>
          <declname>gyro</declname>
        </param>
        <briefdescription>
<para>Disables the gyro and voids the configuration on its port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a gyro</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gyro</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_gyro_t object to be shut down</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>GYRO_MULTIPLIER<sp/>1<sp/>//<sp/>Standard<sp/>behavior</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_gyro_t<sp/>gyro<sp/>=<sp/>adi_gyro_init(GYRO_PORT,<sp/>GYRO_MULTIPLIER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>now<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>gyro&apos;s<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Heading:<sp/>%lf\n&quot;,<sp/>adi_gyro_get(gyro));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(millis()<sp/>-<sp/>now<sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adi_gyro_shutdown(gyro);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Shut<sp/>down<sp/>the<sp/>gyro<sp/>after<sp/>two<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1080" column="9" declfile="pros/adi.h" declline="1080" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga6c866c2d7e65da244268b94fa1ce131c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_potentiometer_t</type>
        <definition>adi_potentiometer_t pros::c::adi_potentiometer_init</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>adi_potentiometer_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Initializes a potentiometer on the given port of the original potentiometer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_potentiometer_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>POTENTIOMETER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_potentiometer_t<sp/>potentiometer<sp/>=<sp/>adi_potentiometer_init(POTENTIOMETER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>potentiometer&apos;s<sp/>angle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Angle:<sp/>%lf\n&quot;,<sp/>adi_potentiometer_get_angle(potentiometer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1118" column="21" declfile="pros/adi.h" declline="1118" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1gadb7056020a04bc6988314deb0c787d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>adi_potentiometer_t</type>
        <definition>adi_potentiometer_t pros::c::adi_potentiometer_type_init</definition>
        <argsstring>(uint8_t port, adi_potentiometer_type_e_t potentiometer_type)</argsstring>
        <name>adi_potentiometer_type_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>adi_potentiometer_type_e_t</type>
          <declname>potentiometer_type</declname>
        </param>
        <briefdescription>
<para>Initializes a potentiometer on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>potentiometer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An adi_potentiometer_type_e_t enum value specifying the potentiometer version type</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An adi_potentiometer_t object containing the given port, or PROS_ERR if the initialization failed.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>POTENTIOMETER_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>POTENTIOMETER_TYPE<sp/>E_ADI_POT_EDR</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_potentiometer_t<sp/>potentiometer<sp/>=<sp/>adi_potentiometer_type_init(POTENTIOMETER_PORT,<sp/>POTENTIOMETER_TYPE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>potentiometer&apos;s<sp/>angle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Angle:<sp/>%lf\n&quot;,<sp/>adi_potentiometer_get_angle(potentiometer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1151" column="21" declfile="pros/adi.h" declline="1151" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__c-adi_1ga9cb484f9bc42af2cdd9904fd65c71224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::c::adi_potentiometer_get_angle</definition>
        <argsstring>(adi_potentiometer_t potentiometer)</argsstring>
        <name>adi_potentiometer_get_angle</name>
        <param>
          <type>adi_potentiometer_t</type>
          <declname>potentiometer</declname>
        </param>
        <briefdescription>
<para>Gets the current potentiometer angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>The original potentiometer rotates 250 degrees thus returning an angle between 0-250 degrees. Potentiometer V2 rotates 330 degrees thus returning an angle between 0-330 degrees.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>potentiometer</parametername>
</parameternamelist>
<parameterdescription>
<para>The adi_potentiometer_t object for which the angle will be returned</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The potentiometer angle in degrees.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>POTENTIOMETER_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>adi_potentiometer_t<sp/>potentiometer<sp/>=<sp/>adi_potentiometer_t(POTENTIOMETER_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Print<sp/>the<sp/>potnetiometer&apos;s<sp/>angle</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Angle:<sp/>%lf\n&quot;,<sp/>adi_potentiometer_get_angle(potentiometer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(5);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="1183" column="8" declfile="pros/adi.h" declline="1183" declcolumn="8"/>
      </memberdef>
      <memberdef kind="define" id="group__c-adi_1ga5bb885982ff66a2e0a0a45a8ee9c35e2" prot="public" static="no">
        <name>HIGH</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Used for <ref refid="group__c-adi_1gadbbe71d4934bbe5218b33405207f5f39" kindref="member">adi_digital_write()</ref> to specify a logic HIGH state to output. </para>
        </briefdescription>
        <detaileddescription>
<para>In reality, using any non-zero expression or &quot;true&quot; will work to set a pin to HIGH. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="287" column="9" bodyfile="pros/adi.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-adi_1gab811d8c6ff3a505312d3276590444289" prot="public" static="no">
        <name>LOW</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Used for <ref refid="group__c-adi_1gadbbe71d4934bbe5218b33405207f5f39" kindref="member">adi_digital_write()</ref> to specify a logic LOW state to output. </para>
        </briefdescription>
        <detaileddescription>
<para>In reality, using a zero expression or &quot;false&quot; will work to set a pin to LOW. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="293" column="9" bodyfile="pros/adi.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-adi_1ga1bb283bd7893b9855e2f23013891fc82" prot="public" static="no">
        <name>INPUT</name>
        <initializer>0x00</initializer>
        <briefdescription>
<para><ref refid="group__c-adi_1ga81c189bfd3e3d2c7dff5d26459ecd6b9" kindref="member">adi_pin_mode()</ref> state for a digital input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="298" column="9" bodyfile="pros/adi.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-adi_1ga61a3c9a18380aafb6e430e79bf596557" prot="public" static="no">
        <name>OUTPUT</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para><ref refid="group__c-adi_1ga81c189bfd3e3d2c7dff5d26459ecd6b9" kindref="member">adi_pin_mode()</ref> state for a digital output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="302" column="9" bodyfile="pros/adi.h" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-adi_1ga877f7490feac007f3a904ece06afe87a" prot="public" static="no">
        <name>INPUT_ANALOG</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para><ref refid="group__c-adi_1ga81c189bfd3e3d2c7dff5d26459ecd6b9" kindref="member">adi_pin_mode()</ref> state for an analog input. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="306" column="9" bodyfile="pros/adi.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-adi_1gaf4be32f492e2bcaa4691e665df0592e7" prot="public" static="no">
        <name>OUTPUT_ANALOG</name>
        <initializer>0x03</initializer>
        <briefdescription>
<para><ref refid="group__c-adi_1ga81c189bfd3e3d2c7dff5d26459ecd6b9" kindref="member">adi_pin_mode()</ref> state for an analog output. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="311" column="9" bodyfile="pros/adi.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__c-adi_1gad5f9ddf0fd9de73c4b23fa5485144b7f" prot="public" static="no" strong="no">
        <type></type>
        <name>adi_port_config_e</name>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fad0a7bcc9cc1afab74574c968e398218e" prot="public">
          <name>E_ADI_ANALOG_IN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa38965ad11f779512181510198b1f295c" prot="public">
          <name>E_ADI_ANALOG_OUT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faf9bb3aab6efa231ff5bfc014e880e7b6" prot="public">
          <name>E_ADI_DIGITAL_IN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa291cfb590ab68d822095e2047d0c6b19" prot="public">
          <name>E_ADI_DIGITAL_OUT</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa2a40a89102061b63ec36da8d0515bbc2" prot="public">
          <name>_DEPRECATE_DIGITAL_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01" prot="public">
          <name>_DEPRECATE_ANALOG_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa2a40a89102061b63ec36da8d0515bbc2" prot="public">
          <name>_DEPRECATE_DIGITAL_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01" prot="public">
          <name>_DEPRECATE_ANALOG_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa2a40a89102061b63ec36da8d0515bbc2" prot="public">
          <name>_DEPRECATE_DIGITAL_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01" prot="public">
          <name>_DEPRECATE_ANALOG_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01" prot="public">
          <name>_DEPRECATE_ANALOG_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01" prot="public">
          <name>_DEPRECATE_ANALOG_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faa4353dc20c129036f937f582eb6f7541" prot="public">
          <name>E_ADI_LEGACY_GYRO</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7faf66ad69b6d2d7504f09bf54f1598cb01" prot="public">
          <name>_DEPRECATE_ANALOG_IN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa64e8c424fa7583513860321fb268494c" prot="public">
          <name>E_ADI_LEGACY_SERVO</name>
          <initializer>= 12</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa9676667cf9b2184460e7beda21f914e5" prot="public">
          <name>E_ADI_LEGACY_PWM</name>
          <initializer>= 13</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa2f4f849fce4638f96c206d24049c4a5e" prot="public">
          <name>E_ADI_LEGACY_ENCODER</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa112941f306553d05fd0dd1759d3c4d89" prot="public">
          <name>E_ADI_LEGACY_ULTRASONIC</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa37e9d6ebc03d88c58db1904a7f2b7373" prot="public">
          <name>E_ADI_TYPE_UNDEFINED</name>
          <initializer>= 255</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1ggad5f9ddf0fd9de73c4b23fa5485144b7fa33d9a21daeabc122fcef7259fa6602f2" prot="public">
          <name>E_ADI_ERR</name>
          <initializer>= PROS_ERR</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Represents the port type for an ADI port. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="50" column="31" bodyfile="pros/adi.h" bodystart="50" bodyend="85"/>
      </memberdef>
      <memberdef kind="enum" id="group__c-adi_1ga7034f9d1751c13d2c874a8ab2cad7cb4" prot="public" static="no" strong="no">
        <type></type>
        <name>adi_potentiometer_type_e</name>
        <enumvalue id="group__c-adi_1gga7034f9d1751c13d2c874a8ab2cad7cb4a5cce3fb6b2c38616774bb4c71492053b" prot="public">
          <name>E_ADI_POT_EDR</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-adi_1gga7034f9d1751c13d2c874a8ab2cad7cb4a89436a293b1f0b560881b7278f4e03b8" prot="public">
          <name>E_ADI_POT_V2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.h" line="91" column="38" bodyfile="pros/adi.h" bodystart="91" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>The external ADI API can be found <ref refid="group__ext-adi" kindref="compound">here.</ref> </para>
</simplesect>
<simplesect kind="note"><para>Additional example code for this module can be found in its <ref refid="adi" kindref="compound">Tutorial.</ref> </para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
