<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="screen_8h" kind="file" language="C++">
    <compoundname>screen.h</compoundname>
    <includes local="no">stdarg.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdint.h</includes>
    <includes refid="colors_8h" local="yes">pros/colors.h</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <includedby refid="screen_8hpp" local="yes">pros/screen.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>stdarg.h</label>
      </node>
      <node id="1">
        <label>pros/screen.h</label>
        <link refid="screen_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>pros/colors.h</label>
        <link refid="colors_8h"/>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>pros/screen.h</label>
        <link refid="screen_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="8">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="9">
        <label>pros/screen.hpp</label>
        <link refid="screen_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pros/optical.hpp</label>
        <link refid="optical_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pros/optical.h</label>
        <link refid="optical_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="user-defined">
      <header>Enumerated Values</header>
      <description><para>Enum indicating what the current touch status is for the touchscreen. </para>
</description>
      <memberdef kind="enum" id="group__c-rtos_1ga1793008155ca135d61e68f63e1a77e0f" prot="public" static="no" strong="no">
        <type></type>
        <name>text_format_e_t</name>
        <enumvalue id="group__c-rtos_1gga1793008155ca135d61e68f63e1a77e0fa1420d9a2d680d6b75be24db3f7c91a1f" prot="public">
          <name>E_TEXT_SMALL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-rtos_1gga1793008155ca135d61e68f63e1a77e0faeba36f74589e9ba489e3db823dd4f8c1" prot="public">
          <name>E_TEXT_MEDIUM</name>
          <briefdescription>
<para>Small text font size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-rtos_1gga1793008155ca135d61e68f63e1a77e0fae5abef25575129786bd0eed837981692" prot="public">
          <name>E_TEXT_LARGE</name>
          <briefdescription>
<para>Normal/Medium text font size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-rtos_1gga1793008155ca135d61e68f63e1a77e0fad64d5ae2fb3be6df5070d9a0e3f245ab" prot="public">
          <name>E_TEXT_MEDIUM_CENTER</name>
          <briefdescription>
<para>Large text font size. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-rtos_1gga1793008155ca135d61e68f63e1a77e0fa8b45e760f21eae2742e22bf0d6ee4bf2" prot="public">
          <name>E_TEXT_LARGE_CENTER</name>
          <briefdescription>
<para>Medium centered text. </para>
          </briefdescription>
          <detaileddescription>
<para>Large centered text </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="49" column="14" bodyfile="pros/screen.h" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="group__c-rtos_1ga8b8f74db7628fd14444f3da9505d333e" prot="public" static="no" strong="no">
        <type></type>
        <name>last_touch_e_t</name>
        <enumvalue id="group__c-rtos_1gga8b8f74db7628fd14444f3da9505d333eac51cdc28392272fa9c60de2ee0716474" prot="public">
          <name>E_TOUCH_RELEASED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-rtos_1gga8b8f74db7628fd14444f3da9505d333ea69e0a85308d29a97ea0de44acbcd76ae" prot="public">
          <name>E_TOUCH_PRESSED</name>
          <briefdescription>
<para>Last interaction with screen was a quick press. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-rtos_1gga8b8f74db7628fd14444f3da9505d333eaa84fff7f05937c11fd5ccef4dc22c5d6" prot="public">
          <name>E_TOUCH_HELD</name>
          <briefdescription>
<para>Last interaction with screen was a release. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__c-rtos_1gga8b8f74db7628fd14444f3da9505d333ea4512d5eccf96e4d80a87bf834544fa7d" prot="public">
          <name>E_TOUCH_ERROR</name>
          <briefdescription>
<para>User is holding screen down. </para>
          </briefdescription>
          <detaileddescription>
<para>An error occured while taking/returning the mutex </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="61" column="14" bodyfile="pros/screen.h" bodystart="61" bodyend="66"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Typedefs</header>
      <description><para>A callback function for a screen callback</para>
<para>This will be called each time its corresponding touch type happens. </para>
</description>
      <memberdef kind="typedef" id="group__c-screen_1ga48080ef3890c1cc5698a1fbc59587d18" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* touch_event_cb_fn_t) (int16_t, int16_t)</definition>
        <argsstring>)(int16_t, int16_t)</argsstring>
        <name>touch_event_cb_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="108" column="9" bodyfile="pros/screen.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Screen Graphical Display Functions</header>
      <description><para>These functions allow programmers to display shapes on the v5 screen </para>
</description>
      <memberdef kind="function" id="group__c-screen_1gaeac8e37f4757bfb311cd8cc6874243f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_set_pen</definition>
        <argsstring>(uint32_t color)</argsstring>
        <name>screen_set_pen</name>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the pen color for subsequent graphics operations. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The pen color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>print<sp/>in<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print_line(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>iter++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="146" column="10" declfile="pros/screen.h" declline="146" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga35cdf0324b200ec8c55f5cd8a5e49869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_set_eraser</definition>
        <argsstring>(uint32_t color)</argsstring>
        <name>screen_set_eraser</name>
        <param>
          <type>uint32_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Set the eraser color for erasing and the current background. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>The background color to set (it is recommended to use values from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 1 if the mutex was successfully returned, or PROS_ERR if there was an error either taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_eraser(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>turn<sp/>the<sp/>screen<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_erase();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="175" column="10" declfile="pros/screen.h" declline="175" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga5c1c1ab2cb822b8a9b88d65c96baaeac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_get_pen</definition>
        <argsstring>(void)</argsstring>
        <name>screen_get_pen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current pen color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Should<sp/>print<sp/>number<sp/>equivalent<sp/>to<sp/>COLOR_RED<sp/>defined<sp/>in<sp/>colors.h.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>screen_get_pen());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="202" column="10" declfile="pros/screen.h" declline="202" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga339ca7e36849e25855e2a70df2520458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_get_eraser</definition>
        <argsstring>(void)</argsstring>
        <name>screen_get_eraser</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>The current eraser color in the form of a value from the enum defined in <ref refid="colors_8h" kindref="compound">colors.h</ref>, or PROS_ERR if there was an error taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Should<sp/>print<sp/>number<sp/>equivalent<sp/>to<sp/>COLOR_RED<sp/>defined<sp/>in<sp/>colors.h.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;%d&quot;,<sp/>screen_get_eraser());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="229" column="10" declfile="pros/screen.h" declline="229" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gabb188a937e9bcb8fcc26ddf20209cbbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase</definition>
        <argsstring>(void)</argsstring>
        <name>screen_erase</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear display with eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_eraser(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>should<sp/>turn<sp/>the<sp/>screen<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_erase();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="255" column="10" declfile="pros/screen.h" declline="255" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga9d58e4ea8059aebbfb432c9255d974b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_scroll</definition>
        <argsstring>(int16_t start_line, int16_t lines)</argsstring>
        <name>screen_scroll</name>
        <param>
          <type>int16_t</type>
          <declname>start_line</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines on the display upwards. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line from which scrolling will start </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll up</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>4,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Scroll<sp/>3<sp/>lines</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_scroll(4,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="279" column="10" declfile="pros/screen.h" declline="279" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gae7310746647aa0e71fc1e802487434d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_scroll_area</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t lines)</argsstring>
        <name>screen_scroll_area</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>lines</declname>
        </param>
        <briefdescription>
<para>Scroll lines within a region on the display. </para>
        </briefdescription>
        <detaileddescription>
<para>This function behaves in the same way as <computeroutput>screen_scroll</computeroutput>, except that you specify a rectangular region within which to scroll lines instead of a start line.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lines</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of lines to scroll upwards</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Scrolls<sp/>area<sp/>of<sp/>screen<sp/>upwards<sp/>slightly.<sp/>including<sp/>line<sp/>of<sp/>text</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_scroll(0,0,<sp/>400,<sp/>200,<sp/>3);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="310" column="10" declfile="pros/screen.h" declline="310" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga9c7e679921b09aa5bd7ce8f0c0dba8b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_copy_area</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint32_t *buf, int32_t stride)</argsstring>
        <name>screen_copy_area</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>stride</declname>
        </param>
        <briefdescription>
<para>Copy a screen region (designated by a rectangle) from an off-screen buffer to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second corner of the rectangular region of the screen </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer containing screen data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stride</parametername>
</parameternamelist>
<parameterdescription>
<para>Off-screen buffer width in pixels, such that image size is stride-padding</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t*<sp/>buf<sp/>=<sp/>malloc(sizeof(uint32_t)<sp/>*<sp/>400<sp/>*<sp/>200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Line<sp/>Here&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Copies<sp/>area<sp/>of<sp/>the<sp/>screen<sp/>including<sp/>text</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_copy_area(0,<sp/>0,<sp/>400,<sp/>200,<sp/>(uint32_t*)buf,<sp/>400<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Equation<sp/>for<sp/>stride<sp/>is<sp/>x2<sp/>-<sp/>x1<sp/>+<sp/>1</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="342" column="10" declfile="pros/screen.h" declline="342" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga6149bf6f5f546a5d3604bf0bd13cebf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_pixel</definition>
        <argsstring>(int16_t x, int16_t y)</argsstring>
        <name>screen_draw_pixel</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Draw a single pixel on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the pixel</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(i<sp/>&lt;<sp/>200){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_draw_pixel(100,i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Draws<sp/>a<sp/>line<sp/>at<sp/>x<sp/>=<sp/>100<sp/>gradually<sp/>down<sp/>the<sp/>screen,<sp/>pixel<sp/>by<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="368" column="10" declfile="pros/screen.h" declline="368" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaa7815c66ed6d99cccb79c68d92f4b6b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_pixel</definition>
        <argsstring>(int16_t x, int16_t y)</argsstring>
        <name>screen_erase_pixel</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Erase a pixel from the screen (Sets the location) </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the erased</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Color<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(0,0,400,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(i<sp/>&lt;<sp/>200){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_erase_pixel(100,i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Erases<sp/>a<sp/>line<sp/>at<sp/>x<sp/>=<sp/>100<sp/>gradually<sp/>down<sp/>the<sp/>screen,<sp/>pixel<sp/>by<sp/>pixel</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="397" column="10" declfile="pros/screen.h" declline="397" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga4dc1379a3cd3fb351f56d48a994c5427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_line</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_draw_line</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a line on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>line<sp/>down<sp/>the<sp/>screen<sp/>at<sp/>x<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_line(100,0,100,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="420" column="10" declfile="pros/screen.h" declline="420" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaad5fa17bd86eecd01c013ed03cbaa865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_line</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_erase_line</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a line on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the first point of the line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x, y) coordinates of the second point of the line</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Color<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(0,0,400,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Erase<sp/>line<sp/>down<sp/>the<sp/>screen<sp/>at<sp/>x<sp/>=<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_erase_line(100,0,100,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="446" column="10" declfile="pros/screen.h" declline="446" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga0554c9959d142f5137507098d2354775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_rect</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_draw_rect</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Draw a rectangle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Color<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_rect(1,1,480,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="470" column="10" declfile="pros/screen.h" declline="470" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaff45f2b8356f9a109450d976407eb3cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_rect</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_erase_rect</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Erase a rectangle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>Box<sp/>Around<sp/>Half<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_eraser(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_erase_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="494" column="10" declfile="pros/screen.h" declline="494" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga03fc49294b8f59b266416fe02e3e82be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_fill_rect</definition>
        <argsstring>(int16_t x0, int16_t y0, int16_t x1, int16_t y1)</argsstring>
        <name>screen_fill_rect</name>
        <param>
          <type>int16_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y1</declname>
        </param>
        <briefdescription>
<para>Fill a rectangular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x0</parametername>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the first point of the rectangle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the second point of the rectangle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Fill<sp/>Around<sp/>Half<sp/>the<sp/>Screen<sp/>in<sp/>Red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="519" column="10" declfile="pros/screen.h" declline="519" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gae50f44cc8353ecd86b4a2f4bf2c11486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_draw_circle</definition>
        <argsstring>(int16_t x, int16_t y, int16_t radius)</argsstring>
        <name>screen_draw_circle</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Draw a circle on the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Draw<sp/>a<sp/>circle<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="543" column="10" declfile="pros/screen.h" declline="543" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga8bd9e289968087aca262d3b103f705b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_erase_circle</definition>
        <argsstring>(int16_t x, int16_t y, int16_t radius)</argsstring>
        <name>screen_erase_circle</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Erase a circle on the screen using the current eraser color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Erase<sp/>a<sp/>circle<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>COLOR_BLUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_erase_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="569" column="10" declfile="pros/screen.h" declline="569" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gae22682b7250e24a2356e59c64d57d682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_fill_circle</definition>
        <argsstring>(int16_t x, int16_t y, int16_t radius)</argsstring>
        <name>screen_fill_circle</name>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
<para>Fill a circular region of the screen using the current pen color. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the center of the circle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The radius of the circle</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_RED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_rect(5,5,240,200);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Fill<sp/>a<sp/>circlular<sp/>area<sp/>with<sp/>radius<sp/>of<sp/>100<sp/>in<sp/>COLOR_BLUE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_fill_circle(240,<sp/>200,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="596" column="10" declfile="pros/screen.h" declline="596" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Screen Text Display Functions</header>
      <description><para>These functions allow programmers to display text on the v5 screen </para>
</description>
      <memberdef kind="function" id="group__c-screen_1gafb3b25b95dbe02402210feb01c6437fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_print</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t line, const char *text,...)</argsstring>
        <name>screen_print</name>
        <param>
          <type>text_format_e_t</type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen on the specified line. </para>
        </briefdescription>
        <detaileddescription>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number on which to print </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>print<sp/>seconds<sp/>started<sp/>since<sp/>program<sp/>started<sp/>on<sp/>line<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>3,<sp/>&quot;Seconds<sp/>Passed:<sp/>%3d&quot;,<sp/>i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="631" column="10" declfile="pros/screen.h" declline="631" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga2b5405f7234ed31b3a9926bfe939518d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_print_at</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t x, const int16_t y, const char *text,...)</argsstring>
        <name>screen_print_at</name>
        <param>
          <type>text_format_e_t</type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen at the specified point. </para>
        </briefdescription>
        <detaileddescription>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para>Text formats medium_center and large_center will default to medium and large respectively.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is small, medium, or large. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The y coordinate of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The x coordinate of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_set_pen(COLOR_BLUE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>print<sp/>seconds<sp/>started<sp/>since<sp/>program<sp/>started.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print_at(TEXT_SMALL,<sp/>3,<sp/>&quot;Seconds<sp/>Passed:<sp/>%3d&quot;,<sp/>i++);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="663" column="10" declfile="pros/screen.h" declline="663" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga8cd03ca39124708f7904013435e7e5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_vprintf</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t line, const char *text, va_list args)</argsstring>
        <name>screen_vprintf</name>
        <param>
          <type>text_format_e_t</type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen on the specified line. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <computeroutput>display_printf</computeroutput> except that this uses a <computeroutput>va_list</computeroutput> instead of the ellipsis operator so this can be used by other functions.</para>
<para>Will default to a medium sized font by default if invalid txt_fmt is given. Exposed mostly for writing libraries and custom functions.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is medium, large, medium_center, or large_center. (DOES NOT SUPPORT SMALL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number on which to print </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="687" column="10" declfile="pros/screen.h" declline="687" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1gaff632a5957fe84aaff544ed4d194ccd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_vprintf_at</definition>
        <argsstring>(text_format_e_t txt_fmt, const int16_t x, const int16_t y, const char *text, va_list args)</argsstring>
        <name>screen_vprintf_at</name>
        <param>
          <type>text_format_e_t</type>
          <declname>txt_fmt</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Print a formatted string to the screen at the specified coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as <computeroutput>display_printf_at</computeroutput> except that this uses a <computeroutput>va_list</computeroutput> instead of the ellipsis operator so this can be used by other functions.</para>
<para>Will default to a medium sized font by default if invalid txt_fmt is given.</para>
<para>Text formats medium_center and large_center will default to medium and large respectively. Exposed mostly for writing libraries and custom functions.</para>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>txt_fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Text format enum that determines if the text is small, medium, or large. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The (x,y) coordinates of the top left corner of the string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>List of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="713" column="10" declfile="pros/screen.h" declline="713" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Screen Touch Functions</header>
      <description><para>These functions allow programmers to access information about screen touches </para>
</description>
      <memberdef kind="function" id="group__c-screen_1ga7a4ea5fa7c4dea56dac94c0b3159868c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>screen_touch_status_s_t</type>
        <definition>screen_touch_status_s_t pros::c::screen_touch_status</definition>
        <argsstring>(void)</argsstring>
        <name>screen_touch_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the touch status of the last touch of the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last_touch_e_t enum specifier that indicates the last touch status of the screen (E_TOUCH_EVENT_RELEASE, E_TOUCH_EVENT_PRESS, or E_TOUCH_EVENT_PRESS_AND_HOLD). This will be released by default if no action was taken. If an error occured, the screen_touch_status_s_t will have its last_touch_e_t enum specifier set to E_TOUCH_ERR, and other values set to -1.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_status_s_t<sp/>status;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/>screen_touch_status();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Will<sp/>print<sp/>various<sp/>information<sp/>about<sp/>the<sp/>last<sp/>touch</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>1,<sp/>&quot;Touch<sp/>Status<sp/>(Type):<sp/>%d&quot;,<sp/>status.touch_status);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>2,<sp/>&quot;Last<sp/>X:<sp/>%d&quot;,<sp/>status.x);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>3,<sp/>&quot;Last<sp/>Y:<sp/>%d&quot;,<sp/>status.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>4,<sp/>&quot;Press<sp/>Count:<sp/>%d&quot;,<sp/>status.press_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>screen_print(TEXT_MEDIUM,<sp/>5,<sp/>&quot;Release<sp/>Count:<sp/>%d&quot;,<sp/>status.release_count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="748" column="25" declfile="pros/screen.h" declline="748" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__c-screen_1ga001f29d360d7be749ff683853de89808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::screen_touch_callback</definition>
        <argsstring>(touch_event_cb_fn_t cb, last_touch_e_t event_type)</argsstring>
        <name>screen_touch_callback</name>
        <param>
          <type>touch_event_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>last_touch_e_t</type>
          <declname>event_type</declname>
        </param>
        <briefdescription>
<para>Assigns a callback function to be called when a certain touch event happens. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCESS - Another resource is currently trying to access the screen mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>Function pointer to callback when event type happens </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>event_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Touch event that will trigger the callback.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if there were no errors, or PROS_ERR if an error occured while taking or returning the screen mutex.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">touch_event_cb_fn_t<sp/>changePixel(){</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_status_s_t<sp/>status<sp/>=<sp/>screen_touch_status();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_draw_pixel(status.x,status.y);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>screen_touch_callback(changePixel(),<sp/>TOUCH_PRESSED);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while(1)<sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="777" column="10" declfile="pros/screen.h" declline="777" declcolumn="10"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="screen_8h_1a369266c24eacffb87046522897a570d5" prot="public" static="no">
        <name>_GNU_SOURCE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/screen.h" line="24" column="11" bodyfile="pros/screen.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Brain screen display and touch functions.</para>
<para>Contains user calls to the v5 screen for touching and displaying graphics.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2022, Purdue University ACM SIGBots.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/screen.h"/>
  </compounddef>
</doxygen>
