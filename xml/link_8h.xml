<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="link_8h" kind="file" language="C++">
    <compoundname>link.h</compoundname>
    <includes local="no">stdbool.h</includes>
    <includes local="no">stdint.h</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <includedby refid="link_8hpp" local="yes">pros/link.hpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="1">
        <label>pros/link.h</label>
        <link refid="link_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="8">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="6">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>pros/link.hpp</label>
        <link refid="link_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pros/link.h</label>
        <link refid="link_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pros/optical.hpp</label>
        <link refid="optical_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pros/optical.h</label>
        <link refid="optical_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="link_8h_1a74f7a80d93eb19b82627a0565ae77f6d" prot="public" static="no">
        <name>LINK_BUFFER_SIZE</name>
        <initializer>512</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="38" column="9" bodyfile="pros/link.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepros_1aeb9b97127da30edb91cc281b28f5e8df" prot="public" static="no" strong="no">
        <type></type>
        <name>link_type_e</name>
        <enumvalue id="namespacepros_1aeb9b97127da30edb91cc281b28f5e8dfaab8163ecac2542f247939dae82071628" prot="public">
          <name>E_LINK_RECIEVER</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepros_1aeb9b97127da30edb91cc281b28f5e8dfa959bf4f7005bdf46615e47d59b1b551e" prot="public">
          <name>E_LINK_TRANSMITTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="33" column="25" bodyfile="pros/link.h" bodystart="33" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacepros_1_1c_1a4277232ad855f067803c1fcba9885b24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_init</definition>
        <argsstring>(uint8_t port, const char *link_id, link_type_e_t type)</argsstring>
        <name>link_init</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type>link_type_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initializes a link on a radio port, with an indicated type. </para>
        </briefdescription>
        <detaileddescription>
<para>There might be a 1 to 2 second delay from when this function is called to when the link is initializes.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique link ID in the form of a string, needs to be different from other links in the area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the radio link on the brain is a transmitter or reciever, with the transmitter having double the transmitting bandwidth as the recieving end (1040 bytes/s vs 520 bytes/s).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if initialization fails, 1 if the initialization succeeds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="66" column="10" declfile="pros/link.h" declline="66" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a63e9104523a080995babfd88712bc756" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_init_override</definition>
        <argsstring>(uint8_t port, const char *link_id, link_type_e_t type)</argsstring>
        <name>link_init_override</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>link_id</declname>
        </param>
        <param>
          <type>link_type_e_t</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Initializes a link on a radio port, with an indicated type and the ability for vexlink to override the controller radio. </para>
        </briefdescription>
        <detaileddescription>
<para>There might be a 1 to 2 second delay from when this function is called to when the link is initializes.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>link_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Unique link ID in the form of a string, needs to be different from other links in the area. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates whether the radio link on the brain is a transmitter or reciever, with the transmitter having double the transmitting bandwidth as the recieving end (1040 bytes/s vs 520 bytes/s).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if initialization fails, 1 if the initialization succeeds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="91" column="10" declfile="pros/link.h" declline="91" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a89910cd189b97e358568b117cbedbf05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::link_connected</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_connected</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Checks if a radio link on a port is active or not. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If a radio is connected to a port and it&apos;s connected to a link. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="107" column="6" declfile="pros/link.h" declline="107" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a176c20419748c6e2b08467c585461376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_raw_receivable_size</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_raw_receivable_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the bytes of data available to be read <linebreak/>
 </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio, else the bytes available to be read by the user. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="124" column="10" declfile="pros/link.h" declline="124" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1ab4e3a75704ace5aaddc1de05d10b644a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_raw_transmittable_size</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_raw_transmittable_size</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Returns the bytes of data available in transmission buffer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link/radio, </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="140" column="10" declfile="pros/link.h" declline="140" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a31012eb93b7684dcb2c2dfd54a61d8c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_transmit_raw</definition>
        <argsstring>(uint8_t port, void *data, uint16_t data_size)</argsstring>
        <name>link_transmit_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Send raw serial data through vexlink. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no room in the FIFO buffer (queue) to transmit the data. EINVAL - The data given is NULL</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully transmitted data size if it succeeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="164" column="10" declfile="pros/link.h" declline="164" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a5bf96e13a6b61a119b593f7f87613bc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_receive_raw</definition>
        <argsstring>(uint8_t port, void *dest, uint16_t data_size)</argsstring>
        <name>link_receive_raw</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive raw serial data through vexlink. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="187" column="10" declfile="pros/link.h" declline="187" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a5a1917d551d4f890f2e3663597b72c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_transmit</definition>
        <argsstring>(uint8_t port, void *data, uint16_t data_size)</argsstring>
        <name>link_transmit</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Send packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EBUSY - The transmitter buffer is still busy with a previous transmission, and there is no room in the FIFO buffer (queue) to transmit the data. EINVAL - The data given is NULL</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer with data to send </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully transmitted data size if it succeeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="211" column="10" declfile="pros/link.h" declline="211" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1afbe6fd56ba883a85e6190097ff932154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_receive</definition>
        <argsstring>(uint8_t port, void *dest, uint16_t data_size)</argsstring>
        <name>link_receive</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>data_size</declname>
        </param>
        <briefdescription>
<para>Receive packeted message through vexlink, with a checksum and start byte. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio. EINVAL - The destination given is NULL, or the size given is larger than the FIFO buffer or destination buffer. EBADMSG - Protocol error related to start byte, data size, or checksum.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination buffer to read data to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Bytes of data to be read to the destination buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link or protocol error, and the successfully transmitted data size if it succeeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="235" column="10" declfile="pros/link.h" declline="235" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacepros_1_1c_1a63e09087ca422aa711ad3ad56934f2a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pros::c::link_clear_receive_buf</definition>
        <argsstring>(uint8_t port)</argsstring>
        <name>link_clear_receive_buf</name>
        <param>
          <type>uint8_t</type>
          <declname>port</declname>
        </param>
        <briefdescription>
<para>Clear the receive buffer of the link, and discarding the data. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of V5 ports (1-21). ENODEV - The port cannot be configured as a radio. ENXIO - The sensor is still calibrating, or no link is connected via the radio.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port of the radio for the intended link.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PROS_ERR if port is not a link, and the successfully received data size if it succeeded. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/link.h" line="252" column="10" declfile="pros/link.h" declline="252" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Contains prototypes for functions related to the robot to robot communications.</para>
<para>Visit <ulink url="https://pros.cs.purdue.edu/v5/api/c/link.html">https://pros.cs.purdue.edu/v5/api/c/link.html</ulink> to learn more.</para>
<para>This file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2022, Purdue University ACM SIGBots.</para>
</simplesect>
This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/link.h"/>
  </compounddef>
</doxygen>
