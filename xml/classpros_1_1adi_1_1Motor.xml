<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1adi_1_1Motor" kind="class" language="C++" prot="public">
    <compoundname>pros::adi::Motor</compoundname>
    <basecompoundref refid="classpros_1_1adi_1_1Port" prot="private" virt="non-virtual">Port</basecompoundref>
    <includes refid="adi_8hpp" local="yes">adi.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__cpp-adi_1gaff0e259cdf8926b89b6da9eefd58571a" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor</definition>
        <argsstring>(std::uint8_t adi_port)</argsstring>
        <name>Motor</name>
        <param>
          <type>std::uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as a <ref refid="classpros_1_1adi_1_1Motor" kindref="compound">Motor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(MOTOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Commanded<sp/>Motor<sp/>Power:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_value();<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="760" column="10"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-adi_1ga2e065574a8dd4a4b62070b0a132c633b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Motor</definition>
        <argsstring>(ext_adi_port_pair_t port_pair)</argsstring>
        <name>Motor</name>
        <param>
          <type><ref refid="namespacepros_1_1adi_1a9b3fd3c73f06b023b3f9f819e1cd29f3" kindref="member">ext_adi_port_pair_t</ref></type>
          <declname>port_pair</declname>
        </param>
        <briefdescription>
<para>Configures an ADI port on an adi_expander to act as a <ref refid="classpros_1_1adi_1_1Motor" kindref="compound">Motor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair of the smart port number (from 1-22) and the ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>EXT_ADI_SMART_PORT<sp/>1</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>ADI_MOTOR_PORT<sp/>&apos;a&apos;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(<sp/>{{<sp/>EXT_ADI_SMART_PORT<sp/>,<sp/><sp/>ADI_MOTOR_PORT}}<sp/>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Commanded<sp/>Motor<sp/>Power:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_value();<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-adi_1ga0722135fc9e602e21043c879642c3fad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t stop</definition>
        <argsstring>() const</argsstring>
        <name>stop</name>
        <briefdescription>
<para>Stops the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a motor</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(MOTOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Commanded<sp/>Motor<sp/>Power:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_value();<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.stop();<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="813" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1adi_1_1Motor_1a833ed782b711495035dae08cfce3e62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_value</definition>
        <argsstring>(std::int32_t value) const</argsstring>
        <name>set_value</name>
        <param>
          <type>std::int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Sets the speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a motor</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The new signed speed; -127 is full reverse and 127 is full forward, with 0 being off</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(MOTOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Commanded<sp/>Motor<sp/>Power:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_value();<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="842" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1adi_1_1Motor_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
<para>Gets the last set speed of the motor on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a motor</para>
<para><simplesect kind="return"><para>The last set speed of the motor on the given</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>MOTOR_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(MOTOR_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(127);<sp/>//<sp/>Go<sp/>full<sp/>speed<sp/>forward</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Commanded<sp/>Motor<sp/>Power:<sp/>&quot;<sp/>&lt;&lt;<sp/>motor.get_value();<sp/>//<sp/>Will<sp/>display<sp/>127</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>motor.set_value(0);<sp/>//<sp/>Stop<sp/>the<sp/>motor</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="866" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Motor</label>
        <link refid="classpros_1_1adi_1_1Motor"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Port</label>
        <link refid="classpros_1_1adi_1_1Port"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Motor</label>
        <link refid="classpros_1_1adi_1_1Motor"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Port</label>
        <link refid="classpros_1_1adi_1_1Port"/>
      </node>
    </collaborationgraph>
    <location file="pros/adi.hpp" line="730" column="25" bodyfile="pros/adi.hpp" bodystart="730" bodyend="867"/>
    <listofallmembers>
      <member refid="classpros_1_1adi_1_1Motor_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" virt="non-virtual"><scope>pros::adi::Motor</scope><name>get_value</name></member>
      <member refid="group__cpp-adi_1ga60987c8e4946650cf9aa40f8e8345f01" prot="private" virt="non-virtual" ambiguityscope="pros::adi::Port::"><scope>pros::adi::Motor</scope><name>get_value</name></member>
      <member refid="group__cpp-adi_1gaff0e259cdf8926b89b6da9eefd58571a" prot="public" virt="non-virtual"><scope>pros::adi::Motor</scope><name>Motor</name></member>
      <member refid="group__cpp-adi_1ga2e065574a8dd4a4b62070b0a132c633b" prot="public" virt="non-virtual"><scope>pros::adi::Motor</scope><name>Motor</name></member>
      <member refid="classpros_1_1adi_1_1Motor_1a833ed782b711495035dae08cfce3e62e" prot="public" virt="non-virtual"><scope>pros::adi::Motor</scope><name>set_value</name></member>
      <member refid="group__cpp-adi_1ga833ed782b711495035dae08cfce3e62e" prot="private" virt="non-virtual" ambiguityscope="pros::adi::Port::"><scope>pros::adi::Motor</scope><name>set_value</name></member>
      <member refid="group__cpp-adi_1ga0722135fc9e602e21043c879642c3fad" prot="public" virt="non-virtual"><scope>pros::adi::Motor</scope><name>stop</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
