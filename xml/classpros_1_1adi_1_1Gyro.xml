<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1adi_1_1Gyro" kind="class" language="C++" prot="public">
    <compoundname>pros::adi::Gyro</compoundname>
    <basecompoundref refid="classpros_1_1adi_1_1Port" prot="private" virt="non-virtual">Port</basecompoundref>
    <includes refid="adi_8hpp" local="yes">adi.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1adi_1_1Gyro_1a9ad5b1d1b7d2bb2b7d31a96386d75dd8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyro</definition>
        <argsstring>(std::uint8_t adi_port, double multiplier=1)</argsstring>
        <name>Gyro</name>
        <param>
          <type>std::uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Initializes a gyroscope on the given port. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given port has not previously been configured as a gyro, then this function starts a 1300ms calibration period.</para>
<para>It is highly recommended that an <ref refid="classpros_1_1adi_1_1Gyro" kindref="compound">Gyro</ref> object be created in <ref refid="main_8h_1a9efe22aaead3a5e936b5df459de02eba" kindref="member">initialize()</ref> when the robot is stationary to ensure proper calibration. If an <ref refid="classpros_1_1adi_1_1Gyro" kindref="compound">Gyro</ref> object is declared at the global scope, a hardcoded 1300ms delay at the beginning of initialize will be necessary to ensure that the gyro&apos;s returned values are correct at the beginning of autonomous/opcontrol.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port to initialize as a gyro (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar value that will be multiplied by the gyro heading value supplied by the</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Gyro<sp/>gyro<sp/>(GYRO_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>gyro<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Distance:<sp/>&quot;<sp/>&lt;&lt;<sp/>gyro.get_value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="1077" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1adi_1_1Gyro_1a449b02125049538fd3809ee64a69b367" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Gyro</definition>
        <argsstring>(ext_adi_port_pair_t port_pair, double multiplier=1)</argsstring>
        <name>Gyro</name>
        <param>
          <type><ref refid="namespacepros_1_1adi_1a9b3fd3c73f06b023b3f9f819e1cd29f3" kindref="member">ext_adi_port_pair_t</ref></type>
          <declname>port_pair</declname>
        </param>
        <param>
          <type>double</type>
          <declname>multiplier</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
<para>Initializes a gyroscope on the given port of an adi expander. </para>
        </briefdescription>
        <detaileddescription>
<para>If the given port has not previously been configured as a gyro, then this function starts a 1300ms calibration period.</para>
<para>It is highly recommended that an ADIGyro object be created in <ref refid="main_8h_1a9efe22aaead3a5e936b5df459de02eba" kindref="member">initialize()</ref> when the robot is stationary to ensure proper calibration. If an ADIGyro object is declared at the global scope, a hardcoded 1300ms delay at the beginning of initialize will be necessary to ensure that the gyro&apos;s returned values are correct at the beginning of autonomous/opcontrol.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>port_pair</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair of the smart port number (from 1-22) and the ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>multiplier</parametername>
</parameternamelist>
<parameterdescription>
<para>A scalar value that will be multiplied by the gyro heading value supplied by the</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>ADI_GYRO_PORT<sp/>&apos;a&apos;</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>SMART_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Gyro<sp/>gyro<sp/>({{<sp/>SMART_PORT<sp/>,<sp/>ADI_GYRO_PORT<sp/>}});</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>gyro<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Distance:<sp/>&quot;<sp/>&lt;&lt;<sp/>gyro.get_value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="1117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1adi_1_1Gyro_1a8487ef9a8abbf5226130e0275ffa5331" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
<para>Gets the current gyro angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>Unless a multiplier is applied to the gyro, the return value will be a whole number representing the number of degrees of rotation times 10.</para>
<para>There are 360 degrees in a circle, thus the gyro will return 3600 for one whole rotation.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a gyro</para>
<para><simplesect kind="return"><para>The gyro angle in degrees.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Gyro<sp/>gyro<sp/>(GYRO_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Get<sp/>the<sp/>gyro<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Distance:<sp/>&quot;<sp/>&lt;&lt;<sp/>gyro.get_value();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="1147" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1adi_1_1Gyro_1ac92589176d26914068b37bb9d6afba7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t reset</definition>
        <argsstring>() const</argsstring>
        <name>reset</name>
        <briefdescription>
<para>Resets the gyroscope value to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a gyro</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">#define<sp/>GYRO_PORT<sp/>1</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Gyro<sp/>gyro<sp/>(GYRO_PORT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::uint32_t<sp/>now<sp/>=<sp/>pros::millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Get<sp/>the<sp/>gyro<sp/>heading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Distance:<sp/>&quot;<sp/>&lt;&lt;<sp/>gyro.get_value();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pros::millis()<sp/>-<sp/>now<sp/>&gt;<sp/>2000)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Reset<sp/>the<sp/>gyro<sp/>every<sp/>2<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>gyro.reset();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>now<sp/>=<sp/>pros::millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(10);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="1181" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>Gyro</label>
        <link refid="classpros_1_1adi_1_1Gyro"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Port</label>
        <link refid="classpros_1_1adi_1_1Port"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>Gyro</label>
        <link refid="classpros_1_1adi_1_1Gyro"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Port</label>
        <link refid="classpros_1_1adi_1_1Port"/>
      </node>
    </collaborationgraph>
    <location file="pros/adi.hpp" line="1039" column="24" bodyfile="pros/adi.hpp" bodystart="1039" bodyend="1182"/>
    <listofallmembers>
      <member refid="classpros_1_1adi_1_1Gyro_1a8487ef9a8abbf5226130e0275ffa5331" prot="public" virt="non-virtual"><scope>pros::adi::Gyro</scope><name>get_value</name></member>
      <member refid="classpros_1_1adi_1_1Gyro_1a9ad5b1d1b7d2bb2b7d31a96386d75dd8" prot="public" virt="non-virtual"><scope>pros::adi::Gyro</scope><name>Gyro</name></member>
      <member refid="classpros_1_1adi_1_1Gyro_1a449b02125049538fd3809ee64a69b367" prot="public" virt="non-virtual"><scope>pros::adi::Gyro</scope><name>Gyro</name></member>
      <member refid="classpros_1_1adi_1_1Gyro_1ac92589176d26914068b37bb9d6afba7b" prot="public" virt="non-virtual"><scope>pros::adi::Gyro</scope><name>reset</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
