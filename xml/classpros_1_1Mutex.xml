<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classpros_1_1Mutex" kind="class" language="C++" prot="public">
    <compoundname>pros::Mutex</compoundname>
    <includes refid="rtos_8hpp" local="yes">rtos.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpros_1_1Mutex_1abbacf876372ff9592f15777f84cb2663" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::remove_pointer_t&lt; <ref refid="namespacepros_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::remove_pointer_t&lt;mutex_t&gt; &gt; mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="360" column="17" bodyfile="pros/rtos.hpp" bodystart="360" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1Mutex_1a4d82f606394d888113e4e0f4b4212761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Mutex</definition>
        <argsstring>(void)</argsstring>
        <name>Mutex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Mutex_1a4ed04a4dfdab9c125ecd5b87e1d31ac7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool take</definition>
        <argsstring>(std::uint32_t timeout)</argsstring>
        <name>take</name>
        <param>
          <type>std::uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait before the mutex becomes available. A timeout of 0 can be used to poll the mutex. TIMEOUT_MAX can be used to block indefinitely.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully taken, false otherwise. If false is returned, then errno is set with a hint about why the the mutex couldn&apos;t be taken. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="344" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Mutex_1ac486bd42d8f62af10f74de06c893c6a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool give</definition>
        <argsstring>(void)</argsstring>
        <name>give</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Unlocks a mutex. </para>
        </briefdescription>
        <detaileddescription>
<para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para>
<para><simplesect kind="return"><para>True if the mutex was successfully returned, false otherwise. If false is returned, then errno is set with a hint about why the mutex couldn&apos;t be returned. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/rtos.hpp" line="357" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pros/rtos.hpp" line="323" column="1" bodyfile="pros/rtos.hpp" bodystart="323" bodyend="361"/>
    <listofallmembers>
      <member refid="classpros_1_1Mutex_1ac486bd42d8f62af10f74de06c893c6a4" prot="public" virt="non-virtual"><scope>pros::Mutex</scope><name>give</name></member>
      <member refid="classpros_1_1Mutex_1abbacf876372ff9592f15777f84cb2663" prot="private" virt="non-virtual"><scope>pros::Mutex</scope><name>mutex</name></member>
      <member refid="classpros_1_1Mutex_1a4d82f606394d888113e4e0f4b4212761" prot="public" virt="non-virtual"><scope>pros::Mutex</scope><name>Mutex</name></member>
      <member refid="classpros_1_1Mutex_1a4ed04a4dfdab9c125ecd5b87e1d31ac7" prot="public" virt="non-virtual"><scope>pros::Mutex</scope><name>take</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
