<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classpros_1_1Mutex" kind="class" language="C++" prot="public">
    <compoundname>pros::Mutex</compoundname>
    <includes refid="rtos_8hpp" local="no">rtos.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classpros_1_1Mutex_1a72746574e5e007fae4aded63533721c4" prot="private" static="no" mutable="no">
        <type><ref refid="rtos_8h_1ab15ea84d90257d70b44e8e04519864d2" kindref="member">mutex_t</ref></type>
        <definition>mutex_t pros::Mutex::mutex</definition>
        <argsstring></argsstring>
        <name>mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.hpp" line="360" column="1" bodyfile="pros/include/pros/rtos.hpp" bodystart="360" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1Mutex_1a96d568fada90acb8b79d82a3687f8f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>pros::Mutex::Mutex</definition>
        <argsstring>(void)</argsstring>
        <name>Mutex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.hpp" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Mutex_1a70da733375f7b4b68475881578c78516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::Mutex::take</definition>
        <argsstring>(std::uint32_t timeout)</argsstring>
        <name>take</name>
        <param>
          <type>std::uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Takes and locks a mutex, waiting for up to a certain number of milliseconds before timing out.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Time to wait before the mutex becomes available. A timeout of 0 can be used to poll the mutex. TIMEOUT_MAX can be used to block indefinitely.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the mutex was successfully taken, false otherwise. If false is returned, then errno is set with a hint about why the the mutex couldn&apos;t be taken. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.hpp" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1Mutex_1a1c3e7ee193608a27a5a509ee7930363b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::Mutex::give</definition>
        <argsstring>(void)</argsstring>
        <name>give</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlocks a mutex.</para><para>See <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes">https://pros.cs.purdue.edu/v5/tutorials/topical/multitasking.html#mutexes</ulink> for details.</para><para><simplesect kind="return"><para>True if the mutex was successfully returned, false otherwise. If false is returned, then errno is set with a hint about why the mutex couldn&apos;t be returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/include/pros/rtos.hpp" line="357" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="pros/include/pros/rtos.hpp" line="323" column="1" bodyfile="pros/include/pros/rtos.hpp" bodystart="323" bodyend="361"/>
    <listofallmembers>
      <member refid="classpros_1_1Mutex_1a1c3e7ee193608a27a5a509ee7930363b" prot="public" virt="non-virtual"><scope>pros::Mutex</scope><name>give</name></member>
      <member refid="classpros_1_1Mutex_1a96d568fada90acb8b79d82a3687f8f18" prot="public" virt="non-virtual"><scope>pros::Mutex</scope><name>Mutex</name></member>
      <member refid="classpros_1_1Mutex_1a72746574e5e007fae4aded63533721c4" prot="private" virt="non-virtual"><scope>pros::Mutex</scope><name>mutex</name></member>
      <member refid="classpros_1_1Mutex_1a70da733375f7b4b68475881578c78516" prot="public" virt="non-virtual"><scope>pros::Mutex</scope><name>take</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
