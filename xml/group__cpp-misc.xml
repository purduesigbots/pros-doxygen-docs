<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__cpp-misc" kind="group">
    <compoundname>cpp-misc</compoundname>
    <title>Miscellaneous C++ API</title>
    <innerclass refid="classpros_1_1v5_1_1Controller" prot="public">pros::v5::Controller</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__cpp-misc_1ga87feae64216cf22775b662fbc5f20048" prot="private" static="no" mutable="no">
        <type>controller_id_e_t</type>
        <definition>controller_id_e_t _id</definition>
        <argsstring></argsstring>
        <name>_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="419" column="19" bodyfile="pros/misc.hpp" bodystart="419" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cpp-misc_1ga652922e5c7390ce35a405959dda1d68a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Controller</definition>
        <argsstring>(controller_id_e_t id)</argsstring>
        <name>Controller</name>
        <param>
          <type>controller_id_e_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Creates a controller object for the given controller id. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EINVAL - A value other than E_CONTROLLER_MASTER or E_CONTROLLER_PARTNER is given.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the controller (e.g. the master or partner controller). Must be one of CONTROLLER_MASTER or CONTROLLER_PARTNER</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move(master.get_analog(E_CONTROLLER_ANALOG_LEFT_X));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga74a04929bc60c72d8436cfb5b40461c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t is_connected</definition>
        <argsstring>(void)</argsstring>
        <name>is_connected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the controller is connected. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><simplesect kind="return"><para>1 if the controller is connected, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>partner<sp/>(E_CONTROLLER_PARTNER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(partner.is_connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>a<sp/>two<sp/>controller<sp/>control<sp/>scheme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Just<sp/>use<sp/>a<sp/>single<sp/>controller<sp/>control<sp/>scheme</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="95" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga880820cec57dc2d47bb9cb27e18b4a0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_analog</definition>
        <argsstring>(controller_analog_e_t channel)</argsstring>
        <name>get_analog</name>
        <param>
          <type>controller_analog_e_t</type>
          <declname>channel</declname>
        </param>
        <briefdescription>
<para>Gets the value of an analog channel (joystick) on a controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>channel</parametername>
</parameternamelist>
<parameterdescription>
<para>The analog channel to get. Must be one of ANALOG_LEFT_X, ANALOG_LEFT_Y, ANALOG_RIGHT_X, ANALOG_RIGHT_Y</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The current reading of the analog channel: [-127, 127]. If the controller was not connected, then 0 is returned</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motor.move(master.get_analog(E_CONTROLLER_ANALOG_LEFT_X));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="125" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga45fb617eafe5e07c279b0b4d2158503d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_battery_capacity</definition>
        <argsstring>(void)</argsstring>
        <name>get_battery_capacity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the battery capacity of the controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><simplesect kind="return"><para>The controller&apos;s battery capacity</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Capacity:<sp/>%d\n&quot;,<sp/>master.get_battery_capacity());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="145" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gaea0f0813bb505219cd0e6a8d87922fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_battery_level</definition>
        <argsstring>(void)</argsstring>
        <name>get_battery_level</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the battery level of the controller. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><simplesect kind="return"><para>The controller&apos;s battery level</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Battery<sp/>Level:<sp/>%d\n&quot;,<sp/>master.get_battery_level());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="165" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga360ac95a3f2da903f29d38e212aaf005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_digital</definition>
        <argsstring>(controller_digital_e_t button)</argsstring>
        <name>get_digital</name>
        <param>
          <type>controller_digital_e_t</type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Checks if a digital channel (button) on the controller is currently pressed. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button on the controller is pressed. If the controller was not connected, then 0 is returned</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Motor<sp/>motor<sp/>(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(master.get_digital(E_CONTROLLER_DIGITAL_A))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>motor.move(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>motor.move(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="198" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gaae8fa80cfb5153c0b30221914742ee49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_digital_new_press</definition>
        <argsstring>(controller_digital_e_t button)</argsstring>
        <name>get_digital_new_press</name>
        <param>
          <type>controller_digital_e_t</type>
          <declname>button</declname>
        </param>
        <briefdescription>
<para>Returns a rising-edge case for a controller button press. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is not thread-safe. Multiple tasks polling a single button may return different results under the same circumstances, so only one task should call this function for any given button. E.g., <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> A calls this function for buttons 1 and 2. <ref refid="classpros_1_1rtos_1_1Task" kindref="compound">Task</ref> B may call this function for button 3, but should not for buttons 1 or 2. A typical use-case for this function is to call inside opcontrol to detect new button presses, and not in any other tasks.</para>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>The button to read. Must be one of DIGITAL_{RIGHT,DOWN,LEFT,UP,A,B,Y,X,R1,R2,L1,L2}</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the button on the controller is pressed and had not been pressed the last time this function was called, 0 otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(master.get_digital_new_press(E_CONTROLLER_DIGITAL_A))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Toggle<sp/>pneumatics<sp/>or<sp/>other<sp/>similar<sp/>actions</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="234" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga28aa7fefb62dcdf98555066756a6fbd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T convert_args</definition>
        <argsstring>(T arg)</argsstring>
        <name>convert_args</name>
        <param>
          <type>T</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="239" column="3" bodyfile="pros/misc.hpp" bodystart="239" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga157a634f89e6ec862d929edeaa529cff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* convert_args</definition>
        <argsstring>(const std::string &amp;arg)</argsstring>
        <name>convert_args</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="242" column="12" bodyfile="pros/misc.hpp" bodystart="242" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gaffd382a2e5b4b50fbbc7b9799637b0a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type>std::int32_t</type>
        <definition>std::int32_t print</definition>
        <argsstring>(std::uint8_t line, std::uint8_t col, const char *fmt, Params... args)</argsstring>
        <name>print</name>
        <param>
          <type>std::uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>Params...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Sets text to the controller LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number at which the text will be displayed [0-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number at which the text will be displayed [0-14] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>The format string to print to the controller </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>The argument list for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>print<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>text<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>master.print(0,<sp/>0,<sp/>&quot;Counter:<sp/>%d&quot;,<sp/>count);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="283" column="14" bodyfile="pros/misc.hpp" bodystart="283" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga3cd136d81be409f77263bf0c983058a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_text</definition>
        <argsstring>(std::uint8_t line, std::uint8_t col, const char *str)</argsstring>
        <name>set_text</name>
        <param>
          <type>std::uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Sets text to the controller LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number at which the text will be displayed [0-2] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>col</parametername>
</parameternamelist>
<parameterdescription>
<para>The column number at which the text will be displayed [0-14] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>The pre-formatted string to print to the controller</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>print<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>text<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>master.set_text(0,<sp/>0,<sp/>&quot;Example<sp/>text&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="322" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga792642d2e8721a3ba27e0ba6b8f0755f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t set_text</definition>
        <argsstring>(std::uint8_t line, std::uint8_t col, const std::string &amp;str)</argsstring>
        <name>set_text</name>
        <param>
          <type>std::uint8_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>std::uint8_t</type>
          <declname>col</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="323" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga65549b3a6f5f7af9d68684a2813b5d2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t clear_line</definition>
        <argsstring>(std::uint8_t line)</argsstring>
        <name>clear_line</name>
        <param>
          <type>std::uint8_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clears an individual line of the controller screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>The line number to clear [0-2]</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>master.set_text(0,<sp/>0,<sp/>&quot;Example&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>master.clear_line(0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="352" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gaa76da9849eb5dfde35588f2d08ac6f19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t rumble</definition>
        <argsstring>(const char *rumble_pattern)</argsstring>
        <name>rumble</name>
        <param>
          <type>const char *</type>
          <declname>rumble_pattern</declname>
        </param>
        <briefdescription>
<para>Rumble the controller. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> rumble activation is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rumble_pattern</parametername>
</parameternamelist>
<parameterdescription>
<para>A string consisting of the characters &apos;.&apos;, &apos;-&apos;, and &apos; &apos;, where dots are short rumbles, dashes are long rumbles, and spaces are pauses. Maximum supported length is 8 characters.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!(count<sp/>%<sp/>25))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>print<sp/>every<sp/>50ms,<sp/>the<sp/>controller<sp/>text<sp/>update<sp/>rate<sp/>is<sp/>slow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>master.rumble(&quot;.<sp/>-<sp/>.<sp/>-&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>count++;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="388" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gacb5f1e6485a4af89f3fce3ff66895b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clears all of the lines on the controller screen. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para><ref refid="classpros_1_1v5_1_1Controller" kindref="compound">Controller</ref> text setting is a slow process, so updates faster than 10ms when on a wired connection or 50ms over Vexnet will not be applied to the controller. On vexOS version 1.0.0 this function will block for 110 ms.</para>
</simplesect>
This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the controller port. EAGAIN - Could not send the text to the controller.</para>
<para><simplesect kind="return"><para>1 if the operation was successful or PROS_ERR if the operation failed, setting errno.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Controller<sp/>master<sp/>(E_CONTROLLER_MASTER);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>master.set_text(0,<sp/>0,<sp/>&quot;Example&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::delay(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>master.clear();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="416" column="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga42876357c2ed5a047a535aca84f4458e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::battery::get_capacity</definition>
        <argsstring>(void)</argsstring>
        <name>get_capacity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current voltage of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current voltage of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Level:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_capacity();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="446" column="8" declfile="pros/misc.hpp" declline="446" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gad0f092e6341126d68ae15d41b5dba352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::battery::get_current</definition>
        <argsstring>(void)</argsstring>
        <name>get_current</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current current of the battery in milliamps, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current current of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Current:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_current();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="464" column="9" declfile="pros/misc.hpp" declline="464" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga33d1a503808ed06148a1884e3ccf88ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pros::battery::get_temperature</definition>
        <argsstring>(void)</argsstring>
        <name>get_temperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current temperature of the battery, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current temperature of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Temperature:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_temperature();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="482" column="8" declfile="pros/misc.hpp" declline="482" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga2c325b346f66c15ca7e5a844a66b20d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t pros::battery::get_voltage</definition>
        <argsstring>(void)</argsstring>
        <name>get_voltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the current capacity of the battery in millivolts, as reported by VEXos. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: EACCES - Another resource is currently trying to access the battery port.</para>
<para><simplesect kind="return"><para>The current capacity of the battery</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Battery<sp/>Voltage:&quot;<sp/>&lt;&lt;<sp/>pros::battery::get_voltage();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="500" column="9" declfile="pros/misc.hpp" declline="500" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gad75e0e06e0817959c08798358eaa8ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::get_status</definition>
        <argsstring>(void)</argsstring>
        <name>get_status</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current status of the competition control. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The competition control status as a mask of bits with COMPETITION_{ENABLED,AUTONOMOUS,CONNECTED}.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pros::competition::get_status()<sp/>&amp;<sp/>COMPETITION_CONNECTED<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="526" column="14" declfile="pros/misc.hpp" declline="526" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga88353a4f8e5e283558ee6504c54283af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_autonomous</definition>
        <argsstring>(void)</argsstring>
        <name>is_autonomous</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is in autonomous mode, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!pros::competition::is_autonomous())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Wait<sp/>to<sp/>do<sp/>anything<sp/>until<sp/>autonomous<sp/>starts</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>pros::delay(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(pros::competition::is_autonomous())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>whatever<sp/>code<sp/>is<sp/>desired<sp/>to<sp/>just<sp/>execute<sp/>in<sp/>autonomous</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Task<sp/>my_task<sp/>(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="548" column="14" declfile="pros/misc.hpp" declline="548" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1gaaf36367a2369390657f6bc4285f68c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_connected</definition>
        <argsstring>(void)</argsstring>
        <name>is_connected</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is connected to competition control, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pros::competition::is_connected())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Field<sp/>Control<sp/>is<sp/>Connected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>LCD<sp/>Selector<sp/>code<sp/>or<sp/>similar</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="563" column="14" declfile="pros/misc.hpp" declline="563" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga2d4f4555af4c45f7f82ea75e1223899b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uint8_t</type>
        <definition>std::uint8_t pros::competition::is_disabled</definition>
        <argsstring>(void)</argsstring>
        <name>is_disabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the V5 Brain is disabled, false otherwise.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>my_task_fn(void*<sp/>ignore)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(!pros::competition::is_disabled())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Run<sp/>competition<sp/>tasks<sp/>(like<sp/>Lift<sp/>Control<sp/>or<sp/>similar)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pros::Task<sp/>my_task<sp/>(my_task_fn,<sp/>NULL,<sp/>TASK_PRIO_DEFAULT,<sp/>TASK_STACK_DEPTH_DEFAULT,<sp/>&quot;My<sp/>Task&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="581" column="14" declfile="pros/misc.hpp" declline="581" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__cpp-misc_1ga2d7eecbe50533c0d753e82470dc2e6f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t pros::usd::is_installed</definition>
        <argsstring>(void)</argsstring>
        <name>is_installed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks if the SD card is installed. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>1 if the SD card is installed, 0 otherwise</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>opcontrol()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>pros::usd::is_installed()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/misc.hpp" line="603" column="14" declfile="pros/misc.hpp" declline="603" declcolumn="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="note"><para>Additional example code for this module can be found in its <ref refid="controller" kindref="compound">Tutorial.</ref></para>
</simplesect>
/// </para>
    </detaileddescription>
  </compounddef>
</doxygen>
