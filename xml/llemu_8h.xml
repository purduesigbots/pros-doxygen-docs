<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="llemu_8h" kind="file" language="C++">
    <compoundname>llemu.h</compoundname>
    <includes local="no">errno.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes local="yes">display/lvgl.h</includes>
    <includedby refid="api_8h" local="yes">api.h</includedby>
    <includedby refid="llemu_8hpp" local="yes">pros/llemu.hpp</includedby>
    <incdepgraph>
      <node id="3">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>display/lvgl.h</label>
      </node>
      <node id="2">
        <label>errno.h</label>
      </node>
      <node id="1">
        <label>pros/llemu.h</label>
        <link refid="llemu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="9">
        <label>pros/llemu.hpp</label>
        <link refid="llemu_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>kapi.h</label>
        <link refid="kapi_8h"/>
      </node>
      <node id="8">
        <label>pros/api_legacy.h</label>
        <link refid="api__legacy_8h"/>
      </node>
      <node id="6">
        <label>pros/apix.h</label>
        <link refid="apix_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>pros/llemu.h</label>
        <link refid="llemu_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>pros/optical.hpp</label>
        <link refid="optical_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>api.h</label>
        <link refid="api_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>pros/optical.h</label>
        <link refid="optical_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>main.h</label>
        <link refid="main_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacepros">pros</innernamespace>
    <innernamespace refid="namespacepros_1_1c">pros::c</innernamespace>
      <sectiondef kind="user-defined">
      <header>Functions</header>
      <memberdef kind="function" id="group__c-llemu_1gaf43a5a9cea1850757c8f0cc180604705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_is_initialized</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_is_initialized</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Checks whether the emulated three-button LCD has already been initialized. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the LCD has been initialized or false if not.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>printf(&quot;Is<sp/>the<sp/>LCD<sp/>initialized?<sp/>%d\n&quot;,<sp/>lcd_is_initialized());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Will<sp/>Display<sp/>True</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="111" column="6" declfile="pros/llemu.h" declline="111" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_initialize</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_initialize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Creates an emulation of the three-button, UART-based VEX LCD on the display. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if the LCD was successfully initialized, or false if it has already been initialized.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="127" column="6" declfile="pros/llemu.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaa0195c987d4c988cf9c9b8f6f6d40504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_shutdown</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_shutdown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Turns off the Legacy LCD Emulator. </para>
        </briefdescription>
        <detaileddescription>
<para>Calling this function will clear the entire display, and you will not be able to call any further LLEMU functions until another call to lcd_initialize.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_shutdown();<sp/>//<sp/>All<sp/>done<sp/>with<sp/>the<sp/>LCD</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="151" column="6" declfile="pros/llemu.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gadb97914cdf57d801b60962f9be046c8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_print</definition>
        <argsstring>(int16_t line, const char *fmt,...)</argsstring>
        <name>lcd_print</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
<para>Displays a formatted string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fmt</parametername>
</parameternamelist>
<parameterdescription>
<para>Format string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>Optional list of arguments for the format string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_print(0,<sp/>&quot;Buttons<sp/>Bitmap:<sp/>%d\n&quot;,<sp/>lcd_read_buttons());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="185" column="6" declfile="pros/llemu.h" declline="185" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaac6e7a4915acb7b67424a56ee38e72b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_set_text</definition>
        <argsstring>(int16_t line, const char *text)</argsstring>
        <name>lcd_set_text</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Displays a string on the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line on which to display the text [0-7] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> text to display</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="211" column="6" declfile="pros/llemu.h" declline="211" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaccbddef45caac238401cb65a464ed306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_clear</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clears the contents of the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_clear();<sp/>//<sp/>No<sp/>more<sp/>text<sp/>will<sp/>be<sp/>displayed</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="233" column="6" declfile="pros/llemu.h" declline="233" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga054b2c7b5c134f6e495e02e6b289416a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_clear_line</definition>
        <argsstring>(int16_t line)</argsstring>
        <name>lcd_clear_line</name>
        <param>
          <type>int16_t</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Clears the contents of a line of the emulated three-button LCD screen. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first. EINVAL - <ref refid="structThe" kindref="compound">The</ref> line number specified is not in the range [0-7]</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structThe" kindref="compound">The</ref> line to clear</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text(1,<sp/>&quot;Hello<sp/>World!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_clear_line(1);<sp/>//<sp/>No<sp/>more<sp/>text<sp/>will<sp/>be<sp/>displayed</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="258" column="6" declfile="pros/llemu.h" declline="258" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga15de5b08e88b129028b094a1bc96e446" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn0_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn0_cb</name>
        <param>
          <type>lcd_btn_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the leftmost button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the leftmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>on_center_button()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>pressed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pressed<sp/>=<sp/>!pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pressed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_set_text(2,<sp/>&quot;I<sp/>was<sp/>pressed!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_clear_line(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_register_btn0_cb(on_center_button);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="294" column="6" declfile="pros/llemu.h" declline="294" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gaad5b65ea0cb13a9166b6d078839cf9ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn1_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn1_cb</name>
        <param>
          <type>lcd_btn_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the center button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the center button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>on_center_button()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>pressed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pressed<sp/>=<sp/>!pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pressed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_set_text(2,<sp/>&quot;I<sp/>was<sp/>pressed!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_clear_line(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_register_btn1_cb(on_center_button);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="330" column="6" declfile="pros/llemu.h" declline="330" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga6987d7b3dae61fd87cc66e63772e1595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool pros::c::lcd_register_btn2_cb</definition>
        <argsstring>(lcd_btn_cb_fn_t cb)</argsstring>
        <name>lcd_register_btn2_cb</name>
        <param>
          <type>lcd_btn_cb_fn_t</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
<para>Registers a callback function for the rightmost button. </para>
        </briefdescription>
        <detaileddescription>
<para>When the rightmost button on the emulated three-button LCD is pressed, the user-provided callback function will be invoked.</para>
<para><ref refid="structThis" kindref="compound">This</ref> function uses the following values of errno when an error state is reached: ENXIO - <ref refid="structThe" kindref="compound">The</ref> LCD has not been initialized. Call <ref refid="group__c-llemu_1ga36a50f90e2186a37abce6cf36d5df6a3" kindref="member">lcd_initialize()</ref> first.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>A callback function of type lcd_btn_cb_fn_t (void (*cb)(void))</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if the operation was successful, or false otherwise, setting errno values as specified above.</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>on_center_button()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>static<sp/>bool<sp/>pressed<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pressed<sp/>=<sp/>!pressed;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(pressed)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_set_text(2,<sp/>&quot;I<sp/>was<sp/>pressed!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lcd_clear_line(2);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_register_btn2_cb(on_center_button);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="366" column="6" declfile="pros/llemu.h" declline="366" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga7dd4fea9a022783060e9c69fb4d9dc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t pros::c::lcd_read_buttons</definition>
        <argsstring>(void)</argsstring>
        <name>lcd_read_buttons</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the button status from the emulated three-button LCD. </para>
        </briefdescription>
        <detaileddescription>
<para><ref refid="structThe" kindref="compound">The</ref> value returned is a 3-bit integer where 1 0 0 indicates the left button is pressed, 0 1 0 indicates the center button is pressed, and 0 0 1 indicates the right button is pressed. 0 is returned if no buttons are currently being pressed.</para>
<para>Note that this function is provided for legacy API compatibility purposes, with the caveat that the V5 touch screen does not actually support pressing multiple points on the screen at the same time.</para>
<para><simplesect kind="return"><para><ref refid="structThe" kindref="compound">The</ref> buttons pressed as a bit mask</para>
</simplesect>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>opcontrol<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Buttons<sp/>Bitmap:<sp/>%d\n&quot;,<sp/>lcd_read_buttons());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>delay(20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="396" column="9" declfile="pros/llemu.h" declline="396" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1gadc8ea2da6bf9308f4cf4c5ff0e9c6486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::lcd_set_background_color</definition>
        <argsstring>(lv_color_t color)</argsstring>
        <name>lcd_set_background_color</name>
        <param>
          <type>lv_color_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Changes the color of the LCD background to a provided color expressed in type lv_color_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>A color of type lv_color_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_background_color(COLOR_BLACK);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="413" column="6" declfile="pros/llemu.h" declline="413" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__c-llemu_1ga17f4e35d4f2d1f970049b1f8b8a2b77f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pros::c::lcd_set_text_color</definition>
        <argsstring>(lv_color_t color)</argsstring>
        <name>lcd_set_text_color</name>
        <param>
          <type>lv_color_t</type>
          <declname>color</declname>
        </param>
        <briefdescription>
<para>Changes the text color of the LCD to a provided color expressed in type lv_color_t. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>A color of type lv_color_t</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="normal">void<sp/>initialize()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_initialize();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lcd_set_text_color(COLOR_WHITE);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="430" column="6" declfile="pros/llemu.h" declline="430" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__c-llemu_1gafa86afc6491531fb4b4d7f1e18803852" prot="public" static="no">
        <name>LCD_BTN_LEFT</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="61" column="9" bodyfile="pros/llemu.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-llemu_1gabf8903693b4a95a6b653916d5f6fe486" prot="public" static="no">
        <name>LCD_BTN_CENTER</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="66" column="9" bodyfile="pros/llemu.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__c-llemu_1ga7851ef3eb7573b194efb0a05d88f2c35" prot="public" static="no">
        <name>LCD_BTN_RIGHT</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="71" column="9" bodyfile="pros/llemu.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__c-llemu_1ga0f5bb2a3264a6ad95973f9c8e6b3198e" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* lcd_btn_cb_fn_t) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>lcd_btn_cb_fn_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/llemu.h" line="56" column="9" bodyfile="pros/llemu.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Legacy LCD Emulator</para>
<para><ref refid="structThis" kindref="compound">This</ref> file defines a high-level API for emulating the three-button, UART-based VEX LCD, containing a set of functions that facilitate the use of a software- emulated version of the classic VEX LCD module.</para>
<para>Visit <ulink url="https://pros.cs.purdue.edu/v5/tutorials/topical/llemu.html">https://pros.cs.purdue.edu/v5/tutorials/topical/llemu.html</ulink> to learn more.</para>
<para><ref refid="structThis" kindref="compound">This</ref> file should not be modified by users, since it gets replaced whenever a kernel upgrade occurs.</para>
<para><simplesect kind="copyright"><para>(c) 2017-2022, Purdue University ACM SIGBots.</para>
</simplesect>
<ref refid="structThis" kindref="compound">This</ref> Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at <ulink url="http://mozilla.org/MPL/2.0/">http://mozilla.org/MPL/2.0/</ulink>. </para>
    </detaileddescription>
    <location file="pros/llemu.h"/>
  </compounddef>
</doxygen>
