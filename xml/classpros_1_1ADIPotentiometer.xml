<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classpros_1_1ADIPotentiometer" kind="class" language="C++" prot="public">
    <compoundname>pros::ADIPotentiometer</compoundname>
    <basecompoundref refid="classpros_1_1ADIAnalogIn" prot="public" virt="non-virtual">ADIAnalogIn</basecompoundref>
    <includes refid="adi_8hpp" local="yes">adi.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classpros_1_1ADIPotentiometer_1a76a7947417e8f42766f4f22708bb8f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ADIPotentiometer</definition>
        <argsstring>(std::uint8_t adi_port, adi_potentiometer_type_e_t potentiometer_type=E_ADI_POT_EDR)</argsstring>
        <name>ADIPotentiometer</name>
        <param>
          <type>std::uint8_t</type>
          <declname>adi_port</declname>
        </param>
        <param>
          <type>adi_potentiometer_type_e_t</type>
          <declname>potentiometer_type</declname>
          <defval><ref refid="namespacepros_1a7034f9d1751c13d2c874a8ab2cad7cb4a5cce3fb6b2c38616774bb4c71492053b" kindref="member">E_ADI_POT_EDR</ref></defval>
        </param>
        <briefdescription>
<para>Configures an ADI port to act as a Potentiometer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>potentiometer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An adi_potentiometer_type_e_t enum value specifying the potentiometer version type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="677" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIPotentiometer_1aae570f8f2cbb2afbb5b6a089f852d0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ADIPotentiometer</definition>
        <argsstring>(ext_adi_port_pair_t port_pair, adi_potentiometer_type_e_t potentiometer_type=E_ADI_POT_EDR)</argsstring>
        <name>ADIPotentiometer</name>
        <param>
          <type><ref refid="namespacepros_1aa8b90563c470741ebd760aeacfd90599" kindref="member">ext_adi_port_pair_t</ref></type>
          <declname>port_pair</declname>
        </param>
        <param>
          <type>adi_potentiometer_type_e_t</type>
          <declname>potentiometer_type</declname>
          <defval><ref refid="namespacepros_1a7034f9d1751c13d2c874a8ab2cad7cb4a5cce3fb6b2c38616774bb4c71492053b" kindref="member">E_ADI_POT_EDR</ref></defval>
        </param>
        <briefdescription>
<para>Configures an ADI port on an adi_expander to act as a Potentiometer. </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses the following values of errno when an error state is reached: ENXIO - Either the ADI port value or the smart port value is not within its valid range (ADI port: 1-8, &apos;a&apos;-&apos;h&apos;, or &apos;A&apos;-&apos;H&apos;; smart port: 1-21).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>adi_port</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair of the smart port number (from 1-22) and the ADI port number (from 1-8, &apos;a&apos;-&apos;h&apos;, &apos;A&apos;-&apos;H&apos;) to configure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>potentiometer_type</parametername>
</parameternamelist>
<parameterdescription>
<para>An adi_potentiometer_type_e_t enum value specifying the potentiometer version type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIPotentiometer_1ac3309c0161ad846ca5e08c6bd21cbc85" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_angle</definition>
        <argsstring>() const</argsstring>
        <name>get_angle</name>
        <briefdescription>
<para>Gets the current potentiometer angle in tenths of a degree. </para>
        </briefdescription>
        <detaileddescription>
<para>The original potentiometer rotates 250 degrees thus returning an angle between 0-250 degrees. Potentiometer V2 rotates 330 degrees thus returning an angle between 0-330 degrees.</para>
<para>This function uses the following values of errno when an error state is reached: ENXIO - The given value is not within the range of ADI Ports EADDRINUSE - The port is not configured as a potentiometer</para>
<para><simplesect kind="return"><para>The potentiometer angle in degrees. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="708" column="8"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIPotentiometer_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value</definition>
        <argsstring>() const</argsstring>
        <name>get_value</name>
        <briefdescription>
<para>Gets the 12-bit value of the specified port. </para>
        </briefdescription>
        <detaileddescription>
<para>The value returned is undefined if the analog pin has been switched to a different mode.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a potentiometer</para>
<para><simplesect kind="return"><para>The analog sensor value, where a value of 0 reflects an input voltage of nearly 0 V and a value of 4095 reflects an input voltage of nearly 5 V </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIPotentiometer_1a2eb97b12f7be6fd44db629dcfe9a4fc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t calibrate</definition>
        <argsstring>() const</argsstring>
        <name>calibrate</name>
        <briefdescription>
<para>Calibrates the potentiometer on the specified port and returns the new calibration value. </para>
        </briefdescription>
        <detaileddescription>
<para>This method assumes that the potentiometer value is not actively changing at this time and computes an average from approximately 500 samples, 1 ms apart, for a 0.5 s period of calibration. The average value thus calculated is returned and stored for later calls to the <ref refid="classpros_1_1ADIAnalogIn_1a074cb99ddc5bcf9b461c204a5a5fad2c" kindref="member">pros::ADIPotentiometer::get_value_calibrated()</ref> function. This function will return the difference between this value and the current sensor value when called.</para>
<para>Do not use this function when the potentiometer value might be unstable (rotating the potentiometer)</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a potentiometer</para>
<para><simplesect kind="return"><para>The average potentiometer value computed by this function </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="746" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classpros_1_1ADIPotentiometer_1a074cb99ddc5bcf9b461c204a5a5fad2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::int32_t</type>
        <definition>std::int32_t get_value_calibrated</definition>
        <argsstring>() const</argsstring>
        <name>get_value_calibrated</name>
        <briefdescription>
<para>Gets the 12 bit calibrated value of a potentiometer port. </para>
        </briefdescription>
        <detaileddescription>
<para>The <ref refid="classpros_1_1ADIAnalogIn_1a2eb97b12f7be6fd44db629dcfe9a4fc4" kindref="member">pros::ADIPotentiometer::calibrate()</ref> function must be run first.</para>
<para>This function uses the following values of errno when an error state is reached: ENODEV - The port is not configured as a potentiometer</para>
<para><simplesect kind="return"><para>The difference of the potentiometer value from its calibrated default from -4095 to 4095 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="pros/adi.hpp" line="760" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>ADIPort</label>
        <link refid="classpros_1_1ADIPort"/>
      </node>
      <node id="2">
        <label>ADIAnalogIn</label>
        <link refid="classpros_1_1ADIAnalogIn"/>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>ADIPotentiometer</label>
        <link refid="classpros_1_1ADIPotentiometer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>ADIPort</label>
        <link refid="classpros_1_1ADIPort"/>
      </node>
      <node id="2">
        <label>ADIAnalogIn</label>
        <link refid="classpros_1_1ADIAnalogIn"/>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>ADIPotentiometer</label>
        <link refid="classpros_1_1ADIPotentiometer"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="pros/adi.hpp" line="662" column="42" bodyfile="pros/adi.hpp" bodystart="662" bodyend="761"/>
    <listofallmembers>
      <member refid="classpros_1_1ADIAnalogIn_1a399da39531465667a539555d0afa953d" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>ADIAnalogIn</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a2a26928e153eb08641528b46c1da1791" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>ADIAnalogIn</name></member>
      <member refid="classpros_1_1ADIPotentiometer_1a76a7947417e8f42766f4f22708bb8f3f" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>ADIPotentiometer</name></member>
      <member refid="classpros_1_1ADIPotentiometer_1aae570f8f2cbb2afbb5b6a089f852d0ad" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>ADIPotentiometer</name></member>
      <member refid="classpros_1_1ADIPotentiometer_1a2eb97b12f7be6fd44db629dcfe9a4fc4" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>calibrate</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a2eb97b12f7be6fd44db629dcfe9a4fc4" prot="public" virt="non-virtual" ambiguityscope="pros::ADIAnalogIn::"><scope>pros::ADIPotentiometer</scope><name>calibrate</name></member>
      <member refid="classpros_1_1ADIPotentiometer_1ac3309c0161ad846ca5e08c6bd21cbc85" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>get_angle</name></member>
      <member refid="classpros_1_1ADIPotentiometer_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>get_value</name></member>
      <member refid="classpros_1_1ADIPort_1a60987c8e4946650cf9aa40f8e8345f01" prot="public" virt="non-virtual" ambiguityscope="pros::ADIPort::"><scope>pros::ADIPotentiometer</scope><name>get_value</name></member>
      <member refid="classpros_1_1ADIPotentiometer_1a074cb99ddc5bcf9b461c204a5a5fad2c" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>get_value_calibrated</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a074cb99ddc5bcf9b461c204a5a5fad2c" prot="public" virt="non-virtual" ambiguityscope="pros::ADIAnalogIn::"><scope>pros::ADIPotentiometer</scope><name>get_value_calibrated</name></member>
      <member refid="classpros_1_1ADIAnalogIn_1a2d4a70c5c23555ddf8ea24318d7a8731" prot="public" virt="non-virtual"><scope>pros::ADIPotentiometer</scope><name>get_value_calibrated_HR</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
